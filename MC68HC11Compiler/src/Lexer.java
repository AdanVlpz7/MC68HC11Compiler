// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u1f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u1f00\1\u4900\1\u1f00\1\u4a00\1\u4b00\2\u1f00\3\u0100\1\u4c00"+
    "\1\u4d00\1\u4e00\12\u1f00\4\u0100\1\u4f00\17\u1f00\2\u0100\1\u5000"+
    "\41\u1f00\2\u0100\1\u5100\1\u5200\3\u1f00\1\u5300\27\u0100\1\u5400"+
    "\2\u0100\1\u5500\45\u1f00\1\u0100\1\u5600\1\u5700\11\u1f00\1\u5800"+
    "\24\u1f00\1\u5900\1\u5a00\1\u1f00\1\u5b00\1\u5c00\1\u5d00\1\u5e00"+
    "\2\u1f00\1\u5f00\5\u1f00\1\u6000\7\u1f00\1\u6100\1\u6200\4\u1f00"+
    "\1\u6300\21\u1f00\246\u0100\1\u6400\20\u0100\1\u6500\1\u6600\25\u0100"+
    "\1\u6700\34\u0100\1\u6800\14\u1f00\2\u0100\1\u6900\u0b05\u1f00\1\u6a00"+
    "\1\u6b00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\2\0\1\5\1\6\3\0\1\7\1\10\1\11\1\0"+
    "\1\12\3\0\1\13\11\14\7\0\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\27\4\0"+
    "\1\27\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\27\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\27\1\76\1\77\1\100\103\0"+
    "\1\27\7\0\1\27\3\0\1\27\3\0\1\27\1\0"+
    "\1\27\6\0\1\27\1\0\1\27\4\0\1\27\7\0"+
    "\1\27\3\0\1\27\3\0\1\27\1\0\1\27\6\0"+
    "\1\27\1\0\1\27\u6b03\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\0\1\6"+
    "\45\7\1\10\1\11\1\0\160\7\1\12\1\13\1\14"+
    "\1\15\3\7\1\16\1\17\1\20\1\7\1\21\1\22"+
    "\1\23\1\24\1\7\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\7\1\34\2\7\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\7\1\44\1\45\1\46"+
    "\1\47\1\7\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\7\1\56\1\57\2\7\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\7\1\66\1\67\1\70\1\71\1\16"+
    "\1\72\1\73\1\74\1\75\1\7\1\76\2\7\1\77"+
    "\1\100\1\101\1\102\1\103\1\7\1\104\1\105\1\106"+
    "\1\7\1\107\1\7\1\110\1\111\1\112\1\7\1\113"+
    "\1\114\1\115\1\116\1\7\1\117\1\120\1\121\1\122"+
    "\1\123\1\7\1\13\1\14\1\15\3\7\1\16\1\17"+
    "\5\7\1\42\1\7\1\44\1\50\1\51\1\52\1\53"+
    "\1\54\3\7\1\60\1\61\1\62\1\63\1\7\1\16"+
    "\1\72\1\73\1\74\3\7\1\77\1\100\1\103\5\7"+
    "\1\120\1\7\1\0\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\3\0\1\136\1\137"+
    "\1\140\2\0\1\141\1\142\2\7\1\143\1\0\1\144"+
    "\1\145\1\146\1\147\1\150\1\151\5\0\1\152\1\153"+
    "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
    "\1\0\1\133\1\134\1\135\1\164\1\165\1\166\1\167"+
    "\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177"+
    "\1\200\1\201\1\202\1\203\1\204\1\205\1\206\1\207"+
    "\1\210\1\211\1\212\1\213\1\214\1\215\1\216\1\217"+
    "\1\220\1\221\1\222\1\223\3\7\1\0\1\144\1\145"+
    "\1\150\1\151\1\152\1\153\1\156\1\157\1\160\1\161"+
    "\1\167\1\170\1\224\4\0\3\225\1\226\1\227\10\0"+
    "\1\7\2\0\1\7\10\0\3\230\3\0\1\7\3\0"+
    "\1\7\1\0\2\230\2\0\1\225\3\0\2\230\1\7"+
    "\1\0\1\7\3\0\1\230\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\23\7\1\225\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\303\0\101\0\101\0\u0104"+
    "\0\101\0\u0145\0\u0186\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb"+
    "\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3"+
    "\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\101\0\101"+
    "\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u02cb\0\u02cb\0\u02cb\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\u28a0\0\u02cb\0\u28e1\0\u2922\0\u2922\0\u2922\0\u2922"+
    "\0\u2963\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922"+
    "\0\u29a4\0\u2922\0\u29e5\0\u2a26\0\u2922\0\u2922\0\u2922\0\u2922"+
    "\0\u2922\0\u2a67\0\u2922\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u02cb\0\u2c2e\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u2c6f"+
    "\0\u02cb\0\u02cb\0\u2cb0\0\u2cf1\0\u2d32\0\u02cb\0\u02cb\0\u02cb"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e36\0\u2e36\0\u2e36\0\u2e77"+
    "\0\u2eb8\0\u02cb\0\u2ef9\0\u2922\0\u2f3a\0\u02cb\0\u2f7b\0\u2fbc"+
    "\0\u2ffd\0\u303e\0\u2922\0\u2922\0\u02cb\0\u307f\0\u2922\0\u2922"+
    "\0\u2922\0\u30c0\0\u2db4\0\u3101\0\u2db4\0\u2db4\0\u2db4\0\u3142"+
    "\0\u2922\0\u2922\0\u2922\0\u2922\0\u3183\0\u2922\0\u31c4\0\u2922"+
    "\0\u2922\0\u2922\0\u3205\0\u3246\0\u3246\0\u3246\0\u3287\0\u32c8"+
    "\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0"+
    "\0\u3511\0\u3552\0\u3593\0\u2922\0\u35d4\0\u2922\0\u2922\0\u2922"+
    "\0\u3615\0\u3656\0\u3697\0\u36d8\0\u2922\0\u2922\0\u2922\0\u3719"+
    "\0\u375a\0\u379b\0\u2922\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0"+
    "\0\u3921\0\u3246\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\u2e36\0\u2e36\0\u2e36\0\u3bab\0\u2e36"+
    "\0\u2e36\0\u02cb\0\u02cb\0\u02cb\0\u3bec\0\u3c2d\0\u3c6e\0\u2922"+
    "\0\u2922\0\u3caf\0\u3cf0\0\u3d31\0\u2e36\0\u2e36\0\u3d72\0\u3db3"+
    "\0\u3caf\0\u3df4\0\u02cb\0\u02cb\0\u2e36\0\u2e36\0\u02cb\0\u02cb"+
    "\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u02cb\0\u02cb\0\u2e36"+
    "\0\u3f7a\0\u02cb\0\u02cb\0\u02cb\0\u02cb\0\u3fbb\0\u2e36\0\u3ffc"+
    "\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u02cb\0\u02cb"+
    "\0\u2e36\0\u2e36\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922"+
    "\0\u2922\0\u2922\0\u2922\0\u403d\0\u2922\0\u2922\0\u407e\0\u2e36"+
    "\0\u40bf\0\u2db4\0\u2922\0\u3bab\0\u2b6b\0\u4100\0\u2922\0\u2922"+
    "\0\u2922\0\u4141\0\u2922\0\u4182\0\u41c3\0\u4204\0\u4245\0\u2922"+
    "\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922\0\u2922"+
    "\0\u2922\0\u2922\0\u2922\0\101\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\101\0\u438a\0\u43cb\0\u3caf\0\u3caf\0\u440c\0\u444d\0\u448e"+
    "\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696"+
    "\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e"+
    "\0\u48df\0\u4920\0\u489e\0\u47db\0\u4961\0\u49a2\0\u49e3\0\u4a24"+
    "\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u45d3\0\u4baa\0\u4beb"+
    "\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4b69\0\101\0\u4d71"+
    "\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4beb\0\u4ef7\0\u4f38"+
    "\0\u4f79\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff\0\u5140"+
    "\0\u5181\0\u51c2\0\u5203\0\u5244\0\u5285\0\u52c6\0\u5307\0\u5348"+
    "\0\u5389\0\u53ca\0\u540b\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550"+
    "\0\u2922\0\u5591\0\u55d2\0\u5613\0\u5654\0\u5695\0\u56d6\0\u5717"+
    "\0\u5758\0\u5799\0\u57da\0\u581b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\20\1\23\1\24\1\25"+
    "\1\26\1\27\1\20\1\30\1\31\1\32\2\20\1\33"+
    "\1\34\1\20\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\20\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\20\1\52\1\53\1\54\2\20\1\55\1\56\1\20"+
    "\1\57\1\0\1\60\103\0\1\2\111\0\63\61\3\0"+
    "\2\10\1\2\1\3\75\10\13\0\3\20\1\62\1\20"+
    "\1\63\11\20\1\64\4\20\1\65\36\20\16\0\4\20"+
    "\1\66\1\20\1\67\1\20\1\70\1\71\1\72\2\20"+
    "\1\73\1\74\1\75\1\20\1\76\1\20\1\77\1\100"+
    "\2\20\1\101\33\20\16\0\3\20\1\102\11\20\1\103"+
    "\1\104\1\20\1\105\1\106\3\20\1\107\35\20\16\0"+
    "\2\20\1\110\3\20\1\111\54\20\16\0\17\20\1\112"+
    "\1\113\1\20\1\114\40\20\16\0\4\20\1\115\1\116"+
    "\55\20\16\0\63\20\16\0\5\20\1\117\11\20\1\120"+
    "\43\20\16\0\16\20\1\121\5\20\1\122\36\20\16\0"+
    "\5\20\1\123\16\20\1\124\36\20\16\0\26\20\1\125"+
    "\34\20\16\0\6\20\1\126\11\20\1\127\42\20\16\0"+
    "\23\20\1\130\37\20\16\0\24\20\1\131\1\20\1\132"+
    "\34\20\16\0\20\20\1\133\4\20\1\134\35\20\16\0"+
    "\3\20\1\135\2\20\1\136\16\20\1\137\1\140\1\20"+
    "\1\141\32\20\16\0\2\20\1\142\1\143\2\20\1\144"+
    "\12\20\1\145\2\20\1\146\4\20\1\147\31\20\16\0"+
    "\2\20\1\150\60\20\16\0\10\20\1\151\52\20\16\0"+
    "\34\20\1\152\1\20\1\153\10\20\1\154\4\20\1\155"+
    "\6\20\16\0\35\20\1\156\1\20\1\157\1\20\1\160"+
    "\1\161\1\162\1\20\1\163\1\164\1\165\1\20\1\166"+
    "\1\20\1\167\1\170\2\20\1\171\3\20\16\0\34\20"+
    "\1\172\10\20\1\173\1\174\1\20\1\175\1\176\3\20"+
    "\1\177\5\20\16\0\33\20\1\200\3\20\1\201\23\20"+
    "\16\0\47\20\1\202\1\203\1\20\1\204\10\20\16\0"+
    "\35\20\1\205\1\206\24\20\16\0\36\20\1\207\10\20"+
    "\1\210\13\20\16\0\46\20\1\211\5\20\1\212\6\20"+
    "\16\0\36\20\1\213\15\20\1\214\6\20\16\0\56\20"+
    "\1\215\4\20\16\0\37\20\1\216\10\20\1\217\12\20"+
    "\16\0\53\20\1\220\7\20\16\0\54\20\1\221\1\20"+
    "\1\222\4\20\16\0\50\20\1\223\4\20\1\224\5\20"+
    "\16\0\34\20\1\225\2\20\1\226\15\20\1\227\1\230"+
    "\1\20\1\231\2\20\16\0\33\20\1\232\1\233\2\20"+
    "\1\234\11\20\1\235\2\20\1\236\4\20\1\237\1\20"+
    "\16\0\33\20\1\240\27\20\16\0\41\20\1\241\21\20"+
    "\16\0\63\242\16\0\2\20\1\243\26\20\1\244\1\245"+
    "\30\20\16\0\4\20\1\246\1\247\55\20\16\0\5\20"+
    "\1\250\55\20\16\0\15\20\1\251\5\20\1\252\37\20"+
    "\16\0\4\20\1\253\10\20\1\254\6\20\1\253\36\20"+
    "\16\0\22\20\1\255\40\20\16\0\6\20\1\256\16\20"+
    "\1\257\35\20\16\0\12\20\1\260\11\20\1\253\36\20"+
    "\16\0\25\20\1\261\35\20\16\0\6\20\1\262\11\20"+
    "\1\253\3\20\1\263\1\264\35\20\16\0\12\20\1\265"+
    "\50\20\16\0\6\20\1\266\54\20\16\0\15\20\1\267"+
    "\45\20\16\0\2\20\1\270\1\20\1\271\12\20\1\272"+
    "\4\20\1\273\36\20\16\0\6\20\1\274\14\20\1\262"+
    "\37\20\16\0\4\20\1\275\17\20\1\276\36\20\16\0"+
    "\2\20\1\277\60\20\16\0\4\20\1\300\5\20\1\301"+
    "\10\20\1\302\3\20\1\303\33\20\16\0\21\20\1\304"+
    "\41\20\16\0\16\20\1\305\44\20\16\0\5\20\1\306"+
    "\23\20\1\307\1\310\30\20\16\0\32\20\1\311\30\20"+
    "\16\0\2\20\1\312\60\20\16\0\4\20\1\313\17\20"+
    "\1\314\4\20\1\315\1\316\30\20\16\0\5\20\1\317"+
    "\55\20\16\0\23\20\1\320\37\20\16\0\26\20\1\321"+
    "\34\20\16\0\3\20\1\322\57\20\16\0\12\20\1\323"+
    "\50\20\16\0\12\20\1\324\50\20\16\0\4\20\1\325"+
    "\17\20\1\326\4\20\1\327\1\330\30\20\16\0\21\20"+
    "\1\331\41\20\16\0\23\20\1\332\37\20\16\0\2\20"+
    "\1\333\2\20\1\334\16\20\1\335\4\20\1\336\1\337"+
    "\30\20\16\0\15\20\1\340\5\20\1\341\37\20\16\0"+
    "\15\20\1\342\45\20\16\0\10\20\1\343\52\20\16\0"+
    "\21\20\1\344\41\20\16\0\2\20\1\345\5\20\1\346"+
    "\52\20\16\0\11\20\1\347\51\20\16\0\15\20\1\350"+
    "\45\20\16\0\15\20\1\351\5\20\1\352\37\20\16\0"+
    "\12\20\1\353\11\20\1\354\36\20\16\0\2\20\1\355"+
    "\1\20\1\356\56\20\16\0\4\20\1\357\5\20\1\360"+
    "\14\20\1\361\33\20\16\0\2\20\1\362\2\20\1\363"+
    "\12\20\1\364\3\20\1\365\4\20\1\366\1\367\30\20"+
    "\16\0\3\20\1\370\57\20\16\0\12\20\1\371\50\20"+
    "\16\0\3\20\1\372\15\20\1\373\41\20\16\0\2\20"+
    "\1\374\60\20\16\0\24\20\1\375\36\20\16\0\2\20"+
    "\1\376\60\20\16\0\25\20\1\377\3\20\1\u0100\31\20"+
    "\16\0\24\20\1\u0101\36\20\16\0\12\20\1\u0102\50\20"+
    "\16\0\5\20\1\u0103\55\20\16\0\33\20\1\u0104\25\20"+
    "\1\u0105\1\u0106\16\0\35\20\1\u0107\1\u0108\24\20\16\0"+
    "\36\20\1\u0109\24\20\16\0\45\20\1\u010a\5\20\1\u010b"+
    "\7\20\16\0\35\20\1\253\7\20\1\u010c\6\20\1\253"+
    "\6\20\16\0\52\20\1\255\10\20\16\0\37\20\1\256"+
    "\15\20\1\257\5\20\16\0\43\20\1\260\10\20\1\253"+
    "\6\20\16\0\55\20\1\u010d\5\20\16\0\37\20\1\262"+
    "\10\20\1\253\3\20\1\263\1\264\5\20\16\0\43\20"+
    "\1\265\17\20\16\0\37\20\1\266\23\20\16\0\45\20"+
    "\1\267\15\20\16\0\33\20\1\270\1\20\1\u010e\11\20"+
    "\1\272\4\20\1\u010f\6\20\16\0\37\20\1\u0110\13\20"+
    "\1\262\7\20\16\0\35\20\1\275\16\20\1\276\6\20"+
    "\16\0\33\20\1\277\27\20\16\0\35\20\1\300\5\20"+
    "\1\301\7\20\1\u0111\3\20\1\303\3\20\16\0\51\20"+
    "\1\u0112\11\20\16\0\46\20\1\u0113\14\20\16\0\36\20"+
    "\1\306\22\20\1\307\1\310\16\0\62\20\1\311\16\0"+
    "\33\20\1\u0114\27\20\16\0\35\20\1\u0115\16\20\1\u0116"+
    "\4\20\1\u0117\1\u0118\16\0\36\20\1\317\24\20\16\0"+
    "\53\20\1\u0119\7\20\16\0\56\20\1\321\4\20\16\0"+
    "\34\20\1\322\26\20\16\0\43\20\1\u011a\17\20\16\0"+
    "\43\20\1\u011b\17\20\16\0\35\20\1\u011c\16\20\1\u011d"+
    "\4\20\1\u011e\1\u011f\16\0\51\20\1\331\11\20\16\0"+
    "\53\20\1\332\7\20\16\0\33\20\1\u0120\2\20\1\334"+
    "\15\20\1\335\4\20\1\336\1\337\16\0\45\20\1\u0121"+
    "\5\20\1\u0122\7\20\16\0\45\20\1\u0123\15\20\16\0"+
    "\41\20\1\u0124\21\20\16\0\51\20\1\344\11\20\16\0"+
    "\33\20\1\u0125\5\20\1\346\21\20\16\0\42\20\1\u0126"+
    "\20\20\16\0\45\20\1\u0127\15\20\16\0\45\20\1\u0128"+
    "\5\20\1\u0129\7\20\16\0\43\20\1\353\10\20\1\354"+
    "\6\20\16\0\33\20\1\u012a\1\20\1\u012b\25\20\16\0"+
    "\35\20\1\357\5\20\1\360\13\20\1\361\3\20\16\0"+
    "\33\20\1\u012c\2\20\1\363\11\20\1\u012d\3\20\1\365"+
    "\4\20\1\366\1\367\16\0\34\20\1\u012e\26\20\16\0"+
    "\43\20\1\371\17\20\16\0\34\20\1\372\14\20\1\373"+
    "\11\20\16\0\33\20\1\374\27\20\16\0\54\20\1\u012f"+
    "\6\20\16\0\33\20\1\376\27\20\16\0\55\20\1\u0130"+
    "\3\20\1\u0100\1\20\16\0\54\20\1\u0101\6\20\16\0"+
    "\43\20\1\u0102\17\20\16\0\36\20\1\u0131\24\20\16\0"+
    "\63\u0132\16\0\2\20\1\u0133\1\u0134\57\20\16\0\2\20"+
    "\1\u0135\1\u0136\1\20\1\u0137\55\20\16\0\2\20\1\u0138"+
    "\1\u0139\57\20\16\0\2\20\1\u013a\1\u013b\1\20\1\u013c"+
    "\55\20\4\0\2\u013d\1\u013e\1\u013d\1\0\1\u013f\4\0"+
    "\2\20\1\u0140\1\u0141\57\20\16\0\23\20\1\u0142\37\20"+
    "\4\0\2\u0143\1\u0144\1\u0143\6\0\63\20\16\0\2\20"+
    "\1\u0145\1\u0146\57\20\16\0\15\20\1\u0147\45\20\16\0"+
    "\6\20\1\u0148\54\20\16\0\25\20\1\u0149\35\20\11\0"+
    "\1\u014a\4\0\2\20\1\u014b\1\u014c\57\20\16\0\2\20"+
    "\1\u014d\1\u014e\57\20\11\0\1\u014a\4\0\2\20\1\u014f"+
    "\1\u0150\57\20\10\0\1\u0151\1\u0152\4\0\63\20\10\0"+
    "\1\u0151\1\u0153\4\0\63\20\10\0\1\u0151\1\u0154\4\0"+
    "\63\20\11\0\1\u0155\4\0\63\20\11\0\1\u014a\4\0"+
    "\2\20\1\u0156\1\u0157\57\20\16\0\2\20\1\u0158\1\u0159"+
    "\57\20\16\0\27\20\1\u015a\33\20\16\0\27\20\1\u015b"+
    "\33\20\11\0\1\u014a\4\0\2\20\1\u015c\1\u015d\57\20"+
    "\4\0\2\u013d\1\u013e\1\u013d\1\0\1\u013f\4\0\63\20"+
    "\11\0\1\u0153\4\0\63\20\16\0\2\20\1\u015e\1\u015f"+
    "\57\20\10\0\1\u0160\1\u0153\4\0\63\20\11\0\1\u014a"+
    "\4\0\2\20\1\u0161\1\u0162\1\20\1\u0163\55\20\4\0"+
    "\2\u013d\1\u013e\1\u013d\1\0\1\u013f\4\0\2\20\1\u0164"+
    "\1\u0165\1\20\1\u0166\55\20\11\0\1\u014a\4\0\2\20"+
    "\1\u0167\1\u0168\57\20\16\0\2\20\1\u0169\1\u016a\57\20"+
    "\16\0\2\20\1\u016b\1\u016c\25\20\1\u016d\1\u016e\30\20"+
    "\16\0\2\20\1\u016f\1\u0170\25\20\1\u0171\1\u0172\30\20"+
    "\4\0\2\u013d\1\u013e\1\u013d\1\0\1\u013f\4\0\2\20"+
    "\1\u0173\1\u0174\57\20\4\0\2\u013d\1\u013e\1\u013d\1\0"+
    "\1\u013f\4\0\2\20\1\u0175\1\u0176\57\20\16\0\2\20"+
    "\1\u0177\1\u0178\57\20\16\0\2\20\1\u0179\1\u017a\57\20"+
    "\16\0\21\20\1\u017b\41\20\16\0\2\20\1\u017c\1\u017d"+
    "\1\20\1\u017e\55\20\16\0\25\20\1\u017f\35\20\11\0"+
    "\1\u014a\4\0\2\20\1\u0180\1\u0181\57\20\16\0\31\20"+
    "\1\u0182\1\u0183\30\20\16\0\6\20\1\u0184\54\20\16\0"+
    "\33\20\1\u0133\1\u0134\26\20\16\0\33\20\1\u0135\1\u0136"+
    "\1\20\1\u0137\24\20\16\0\33\20\1\u0138\1\u0139\26\20"+
    "\16\0\33\20\1\u013a\1\u013b\1\20\1\u013c\24\20\4\0"+
    "\2\u013d\1\u013e\1\u013d\1\0\1\u013f\4\0\33\20\1\u0140"+
    "\1\u0141\26\20\16\0\53\20\1\u0142\7\20\16\0\33\20"+
    "\1\u0145\1\u0146\26\20\16\0\45\20\1\u0185\15\20\16\0"+
    "\37\20\1\u0186\23\20\16\0\55\20\1\u0149\5\20\11\0"+
    "\1\u0187\4\0\33\20\1\u0188\1\u0189\26\20\16\0\33\20"+
    "\1\u014d\1\u014e\26\20\11\0\1\u014a\4\0\33\20\1\u018a"+
    "\1\u018b\26\20\11\0\1\u014a\4\0\33\20\1\u018c\1\u018d"+
    "\26\20\16\0\33\20\1\u0158\1\u0159\26\20\16\0\57\20"+
    "\1\u018e\3\20\16\0\57\20\1\u018f\3\20\11\0\1\u014a"+
    "\4\0\33\20\1\u0190\1\u0191\26\20\16\0\33\20\1\u015e"+
    "\1\u015f\26\20\11\0\1\u014a\4\0\33\20\1\u0161\1\u0162"+
    "\1\20\1\u0163\24\20\4\0\2\u013d\1\u013e\1\u013d\1\0"+
    "\1\u013f\4\0\33\20\1\u0164\1\u0165\1\20\1\u0166\24\20"+
    "\11\0\1\u014a\4\0\33\20\1\u0192\1\u0193\26\20\16\0"+
    "\33\20\1\u0169\1\u016a\26\20\16\0\33\20\1\u016b\1\u016c"+
    "\24\20\1\u016d\1\u016e\16\0\33\20\1\u016f\1\u0170\24\20"+
    "\1\u0171\1\u0172\4\0\2\u013d\1\u013e\1\u013d\1\0\1\u013f"+
    "\4\0\33\20\1\u0173\1\u0174\26\20\4\0\2\u013d\1\u013e"+
    "\1\u013d\1\0\1\u013f\4\0\33\20\1\u0175\1\u0176\26\20"+
    "\16\0\33\20\1\u0177\1\u0178\26\20\16\0\33\20\1\u0179"+
    "\1\u017a\26\20\16\0\51\20\1\u017b\11\20\16\0\33\20"+
    "\1\u017c\1\u017d\1\20\1\u017e\24\20\16\0\55\20\1\u017f"+
    "\5\20\11\0\1\u014a\4\0\33\20\1\u0180\1\u0181\26\20"+
    "\16\0\61\20\1\u0182\1\u0183\16\0\63\u0194\10\0\1\u0160"+
    "\1\u0195\4\0\63\20\10\0\1\u0151\1\u0196\4\0\63\20"+
    "\11\0\1\u0155\74\0\1\u013d\3\0\1\u0155\105\0\63\u0197"+
    "\11\0\1\u0198\4\0\63\20\7\0\2\u0199\1\u019a\3\0"+
    "\2\u0199\1\u019b\61\u0199\1\0\1\u0199\3\0\1\u0143\1\0"+
    "\2\u0199\1\u019a\3\0\2\u0199\1\u019b\61\u0199\1\0\1\u0199"+
    "\14\0\23\20\1\u019c\37\20\16\0\25\20\1\u019d\35\20"+
    "\16\0\63\u019e\11\0\1\u019f\105\0\63\u01a0\16\0\63\u01a1"+
    "\16\0\63\u01a2\16\0\63\u01a3\10\0\1\u0160\1\u01a4\4\0"+
    "\63\20\4\0\2\u013d\1\u013e\1\u013d\1\u0160\1\u0154\4\0"+
    "\63\20\11\0\1\u01a5\105\0\6\20\1\u01a6\54\20\10\0"+
    "\1\u0160\1\u0196\4\0\63\20\4\0\2\u013d\1\u013e\1\u013d"+
    "\1\0\1\u0154\4\0\63\20\10\0\1\u0151\1\u0195\4\0"+
    "\63\20\4\0\2\u01a7\1\u01a8\1\u01a7\6\0\63\20\16\0"+
    "\54\20\1\u01a9\6\20\16\0\53\20\1\u019c\7\20\16\0"+
    "\55\20\1\u019d\5\20\16\0\63\u01aa\16\0\63\u01ab\16\0"+
    "\63\u01ac\16\0\63\u01ad\16\0\63\u01ae\16\0\63\u01af\16\0"+
    "\2\u019b\77\0\63\u01b0\16\0\63\u01b1\16\0\63\u01b2\16\0"+
    "\63\u01b3\16\0\63\u01b4\16\0\63\u01b5\16\0\63\u01b6\16\0"+
    "\63\u01b7\16\0\54\20\1\u01b8\6\20\7\0\2\u01b9\1\u01ba"+
    "\3\0\2\u01b9\1\u01bb\61\u01b9\1\0\1\u01b9\3\0\1\u01a7"+
    "\1\0\2\u01b9\1\u01ba\3\0\2\u01b9\1\u01bb\61\u01b9\1\0"+
    "\1\u01b9\14\0\51\20\1\u01bc\11\20\16\0\63\u01bd\16\0"+
    "\63\u01be\16\0\63\u01bf\15\0\1\u01c0\63\u01b7\16\0\63\u01c1"+
    "\16\0\63\u01c2\15\0\1\u01c3\63\u01b7\16\0\63\u01a5\15\0"+
    "\1\u01c4\63\u01b7\15\0\1\u01c5\101\0\63\u01c6\16\0\63\u01c7"+
    "\16\0\51\20\1\u01c8\11\20\4\0\2\u0143\1\u0144\1\u0143"+
    "\75\0\2\u0143\1\u0144\1\u0143\6\0\63\u01c9\4\0\2\u0143"+
    "\1\u0144\1\u0143\6\0\2\u01bb\77\0\33\20\1\u01ca\27\20"+
    "\15\0\1\u01c3\100\0\1\u01c5\63\u01b7\7\0\1\u01c7\37\0"+
    "\2\u01c7\26\0\2\u01c7\1\0\1\u01c7\13\0\1\u01cb\101\0"+
    "\63\u01cc\4\0\2\u01c0\1\u01cd\1\u01ce\37\0\2\u01c7\26\0"+
    "\2\u01c7\1\0\1\u01c7\2\0\2\u01c0\1\u01cd\1\u01c0\10\0"+
    "\61\u01c7\4\0\2\u01c0\1\u01cd\1\u01c0\107\0\33\20\1\u01cf"+
    "\27\20\16\0\63\u01d0\16\0\35\20\1\u01d1\25\20\7\0"+
    "\1\u01d2\1\u01a5\36\0\2\u01d2\26\0\2\u01d2\1\0\1\u01d2"+
    "\14\0\63\u0199\5\0\1\u01c0\1\0\1\u01c7\37\0\2\u01c7"+
    "\26\0\2\u01c7\1\0\1\u01c7\14\0\35\20\1\u01d3\25\20"+
    "\4\0\2\u0143\1\u0144\1\u0143\6\0\63\u01d4\16\0\43\20"+
    "\1\u01d5\17\20\15\0\1\u01d6\101\0\43\20\1\u01d7\17\20"+
    "\16\0\63\u01b9\16\0\50\20\1\u01d8\12\20\10\0\1\u01a5"+
    "\106\0\50\20\1\u01d9\12\20\16\0\6\20\1\u01da\54\20"+
    "\16\0\6\20\1\u01db\54\20\16\0\47\20\1\u01dc\13\20"+
    "\16\0\47\20\1\u01dd\13\20\16\0\3\20\1\u01de\57\20"+
    "\16\0\3\20\1\u01df\57\20\16\0\45\20\1\u01e0\15\20"+
    "\16\0\45\20\1\u01e1\15\20\16\0\33\20\1\u01e2\27\20"+
    "\16\0\33\20\1\u01e3\27\20\16\0\47\20\1\u01e4\13\20"+
    "\16\0\47\20\1\u01e5\13\20\16\0\35\20\1\u01e6\25\20"+
    "\16\0\35\20\1\u01e7\25\20\16\0\50\20\1\u01e8\12\20"+
    "\16\0\50\20\1\u01e9\12\20\10\0\1\u0199\1\u01ea\3\0"+
    "\1\u0199\63\20\23\0\1\u01eb\136\0\1\u01ec\110\0\1\u01ed"+
    "\33\0\1\u01ee\15\0\1\u01ef\135\0\1\u01f0\62\0\1\u01f1"+
    "\112\0\1\u0199\71\0\1\u01f2\103\0\1\u01f3\74\0\1\u01f4"+
    "\72\0\1\u0199\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\1\0\1\11"+
    "\45\1\2\11\1\0\u0100\1\1\0\12\1\3\0\3\1"+
    "\2\0\5\1\1\0\6\1\5\0\12\1\1\0\46\1"+
    "\1\0\14\1\1\11\4\0\1\11\4\1\10\0\1\1"+
    "\2\0\1\1\10\0\3\1\3\0\1\1\3\0\1\1"+
    "\1\0\2\1\2\0\1\1\3\0\1\1\1\11\1\1"+
    "\1\0\1\1\3\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\24\1\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 153: break;
          case 2:
            { return token(yytext(),"GATO",yyline,yycolumn);
            }
            // fall through
          case 154: break;
          case 3:
            { return token(yytext(),"PESOS",yyline,yycolumn);
            }
            // fall through
          case 155: break;
          case 4:
            { return token(yytext(),"PARENTESIS_A",yyline,yycolumn);
            }
            // fall through
          case 156: break;
          case 5:
            { return token(yytext(),"PARENTESIS_C",yyline,yycolumn);
            }
            // fall through
          case 157: break;
          case 6:
            { return token(yytext(),"COMA",yyline,yycolumn);
            }
            // fall through
          case 158: break;
          case 7:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 159: break;
          case 8:
            { return token(yytext(),"LLAVE_A",yyline,yycolumn);
            }
            // fall through
          case 160: break;
          case 9:
            { return token(yytext(),"LLAVE_C",yyline,yycolumn);
            }
            // fall through
          case 161: break;
          case 10:
            { return token(yytext(), "DirSimple", yyline, yycolumn);
            }
            // fall through
          case 162: break;
          case 11:
            { return token(yytext(),"Inst_ABA",yyline,yycolumn);
            }
            // fall through
          case 163: break;
          case 12:
            { return token(yytext(),"Inst_ABX",yyline,yycolumn);
            }
            // fall through
          case 164: break;
          case 13:
            { return token(yytext(),"Inst_ABY",yyline,yycolumn);
            }
            // fall through
          case 165: break;
          case 14:
            { return token(yytext(),"Inst_ASL",yyline,yycolumn);
            }
            // fall through
          case 166: break;
          case 15:
            { return token(yytext(),"Inst_ASR",yyline,yycolumn);
            }
            // fall through
          case 167: break;
          case 16:
            { return token(yytext(),"Inst_BCC",yyline,yycolumn);
            }
            // fall through
          case 168: break;
          case 17:
            { return token(yytext(),"Inst_BEQ",yyline,yycolumn);
            }
            // fall through
          case 169: break;
          case 18:
            { return token(yytext(),"Inst_BGE",yyline,yycolumn);
            }
            // fall through
          case 170: break;
          case 19:
            { return token(yytext(),"Inst_BGT",yyline,yycolumn);
            }
            // fall through
          case 171: break;
          case 20:
            { return token(yytext(),"Inst_BHI",yyline,yycolumn);
            }
            // fall through
          case 172: break;
          case 21:
            { return token(yytext(),"Inst_BLE",yyline,yycolumn);
            }
            // fall through
          case 173: break;
          case 22:
            { return token(yytext(),"Inst_BLS",yyline,yycolumn);
            }
            // fall through
          case 174: break;
          case 23:
            { return token(yytext(),"Inst_BLT",yyline,yycolumn);
            }
            // fall through
          case 175: break;
          case 24:
            { return token(yytext(),"Inst_BMI",yyline,yycolumn);
            }
            // fall through
          case 176: break;
          case 25:
            { return token(yytext(),"Inst_BNE",yyline,yycolumn);
            }
            // fall through
          case 177: break;
          case 26:
            { return token(yytext(),"Inst_BPL",yyline,yycolumn);
            }
            // fall through
          case 178: break;
          case 27:
            { return token(yytext(),"Inst_BRA",yyline,yycolumn);
            }
            // fall through
          case 179: break;
          case 28:
            { return token(yytext(),"Inst_BRN",yyline,yycolumn);
            }
            // fall through
          case 180: break;
          case 29:
            { return token(yytext(),"Inst_BVC",yyline,yycolumn);
            }
            // fall through
          case 181: break;
          case 30:
            { return token(yytext(),"Inst_BVS",yyline,yycolumn);
            }
            // fall through
          case 182: break;
          case 31:
            { return token(yytext(),"Inst_CBA",yyline,yycolumn);
            }
            // fall through
          case 183: break;
          case 32:
            { return token(yytext(),"Inst_CLC",yyline,yycolumn);
            }
            // fall through
          case 184: break;
          case 33:
            { return token(yytext(),"Inst_CLI",yyline,yycolumn);
            }
            // fall through
          case 185: break;
          case 34:
            { return token(yytext(),"Inst_CLR",yyline,yycolumn);
            }
            // fall through
          case 186: break;
          case 35:
            { return token(yytext(),"Inst_CLV",yyline,yycolumn);
            }
            // fall through
          case 187: break;
          case 36:
            { return token(yytext(),"Inst_COM",yyline,yycolumn);
            }
            // fall through
          case 188: break;
          case 37:
            { return token(yytext(),"Inst_CPD",yyline,yycolumn);
            }
            // fall through
          case 189: break;
          case 38:
            { return token(yytext(),"Inst_CPX",yyline,yycolumn);
            }
            // fall through
          case 190: break;
          case 39:
            { return token(yytext(),"Inst_CPY",yyline,yycolumn);
            }
            // fall through
          case 191: break;
          case 40:
            { return token(yytext(),"Inst_DAA",yyline,yycolumn);
            }
            // fall through
          case 192: break;
          case 41:
            { return token(yytext(),"Inst_DEC",yyline,yycolumn);
            }
            // fall through
          case 193: break;
          case 42:
            { return token(yytext(),"Inst_DES",yyline,yycolumn);
            }
            // fall through
          case 194: break;
          case 43:
            { return token(yytext(),"Inst_DEX",yyline,yycolumn);
            }
            // fall through
          case 195: break;
          case 44:
            { return token(yytext(),"Inst_DEY",yyline,yycolumn);
            }
            // fall through
          case 196: break;
          case 45:
            { return token(yytext(),"FINAL",yyline,yycolumn);
            }
            // fall through
          case 197: break;
          case 46:
            { return token(yytext(),"Directiva_EQU",yyline,yycolumn);
            }
            // fall through
          case 198: break;
          case 47:
            { return token(yytext(),"Directiva_FCB",yyline,yycolumn);
            }
            // fall through
          case 199: break;
          case 48:
            { return token(yytext(),"Inst_INC",yyline,yycolumn);
            }
            // fall through
          case 200: break;
          case 49:
            { return token(yytext(),"Inst_INS",yyline,yycolumn);
            }
            // fall through
          case 201: break;
          case 50:
            { return token(yytext(),"Inst_INX",yyline,yycolumn);
            }
            // fall through
          case 202: break;
          case 51:
            { return token(yytext(),"Inst_INY",yyline,yycolumn);
            }
            // fall through
          case 203: break;
          case 52:
            { return token(yytext(),"Inst_JMP",yyline,yycolumn);
            }
            // fall through
          case 204: break;
          case 53:
            { return token(yytext(),"Inst_JSR",yyline,yycolumn);
            }
            // fall through
          case 205: break;
          case 54:
            { return token(yytext(),"Inst_LDD",yyline,yycolumn);
            }
            // fall through
          case 206: break;
          case 55:
            { return token(yytext(),"Inst_LDS",yyline,yycolumn);
            }
            // fall through
          case 207: break;
          case 56:
            { return token(yytext(),"Inst_LDX",yyline,yycolumn);
            }
            // fall through
          case 208: break;
          case 57:
            { return token(yytext(),"Inst_LDY",yyline,yycolumn);
            }
            // fall through
          case 209: break;
          case 58:
            { return token(yytext(),"Inst_LSR",yyline,yycolumn);
            }
            // fall through
          case 210: break;
          case 59:
            { return token(yytext(),"Inst_MUL",yyline,yycolumn);
            }
            // fall through
          case 211: break;
          case 60:
            { return token(yytext(),"Inst_NEG",yyline,yycolumn);
            }
            // fall through
          case 212: break;
          case 61:
            { return token(yytext(),"Inst_NOP",yyline,yycolumn);
            }
            // fall through
          case 213: break;
          case 62:
            { return token(yytext(),"INICIO",yyline,yycolumn);
            }
            // fall through
          case 214: break;
          case 63:
            { return token(yytext(),"Inst_ROL",yyline,yycolumn);
            }
            // fall through
          case 215: break;
          case 64:
            { return token(yytext(),"Inst_ROR",yyline,yycolumn);
            }
            // fall through
          case 216: break;
          case 65:
            { return token(yytext(),"Inst_RTI",yyline,yycolumn);
            }
            // fall through
          case 217: break;
          case 66:
            { return token(yytext(),"Inst_RTS",yyline,yycolumn);
            }
            // fall through
          case 218: break;
          case 67:
            { return token(yytext(),"Inst_SBA",yyline,yycolumn);
            }
            // fall through
          case 219: break;
          case 68:
            { return token(yytext(),"Inst_SEC",yyline,yycolumn);
            }
            // fall through
          case 220: break;
          case 69:
            { return token(yytext(),"Inst_SEI",yyline,yycolumn);
            }
            // fall through
          case 221: break;
          case 70:
            { return token(yytext(),"Inst_SEV",yyline,yycolumn);
            }
            // fall through
          case 222: break;
          case 71:
            { return token(yytext(),"Inst_STD",yyline,yycolumn);
            }
            // fall through
          case 223: break;
          case 72:
            { return token(yytext(),"Inst_STS",yyline,yycolumn);
            }
            // fall through
          case 224: break;
          case 73:
            { return token(yytext(),"Inst_STX",yyline,yycolumn);
            }
            // fall through
          case 225: break;
          case 74:
            { return token(yytext(),"Inst_STY",yyline,yycolumn);
            }
            // fall through
          case 226: break;
          case 75:
            { return token(yytext(),"Inst_SWI",yyline,yycolumn);
            }
            // fall through
          case 227: break;
          case 76:
            { return token(yytext(),"Inst_TAB",yyline,yycolumn);
            }
            // fall through
          case 228: break;
          case 77:
            { return token(yytext(),"Inst_TAP",yyline,yycolumn);
            }
            // fall through
          case 229: break;
          case 78:
            { return token(yytext(),"Inst_TBA",yyline,yycolumn);
            }
            // fall through
          case 230: break;
          case 79:
            { return token(yytext(),"Inst_TPA",yyline,yycolumn);
            }
            // fall through
          case 231: break;
          case 80:
            { return token(yytext(),"Inst_TST",yyline,yycolumn);
            }
            // fall through
          case 232: break;
          case 81:
            { return token(yytext(),"Inst_TSX",yyline,yycolumn);
            }
            // fall through
          case 233: break;
          case 82:
            { return token(yytext(),"Inst_TXS",yyline,yycolumn);
            }
            // fall through
          case 234: break;
          case 83:
            { return token(yytext(),"Inst_WAI",yyline,yycolumn);
            }
            // fall through
          case 235: break;
          case 84:
            { return token(yytext(),"Inst_ADCA",yyline,yycolumn);
            }
            // fall through
          case 236: break;
          case 85:
            { return token(yytext(),"Inst_ADCB",yyline,yycolumn);
            }
            // fall through
          case 237: break;
          case 86:
            { return token(yytext(),"Inst_ADDA",yyline,yycolumn);
            }
            // fall through
          case 238: break;
          case 87:
            { return token(yytext(),"Inst_ADDB",yyline,yycolumn);
            }
            // fall through
          case 239: break;
          case 88:
            { return token(yytext(),"Inst_ADDD",yyline,yycolumn);
            }
            // fall through
          case 240: break;
          case 89:
            { return token(yytext(),"Inst_ANDA",yyline,yycolumn);
            }
            // fall through
          case 241: break;
          case 90:
            { return token(yytext(),"Inst_ANDB",yyline,yycolumn);
            }
            // fall through
          case 242: break;
          case 91:
            { return token(yytext(),"Inst_ASLA",yyline,yycolumn);
            }
            // fall through
          case 243: break;
          case 92:
            { return token(yytext(),"Inst_ASLB",yyline,yycolumn);
            }
            // fall through
          case 244: break;
          case 93:
            { return token(yytext(),"Inst_ASLD",yyline,yycolumn);
            }
            // fall through
          case 245: break;
          case 94:
            { return token(yytext(),"Inst_ASRA",yyline,yycolumn);
            }
            // fall through
          case 246: break;
          case 95:
            { return token(yytext(),"Inst_ASRB",yyline,yycolumn);
            }
            // fall through
          case 247: break;
          case 96:
            { return token(yytext(),"Inst_BCLR",yyline,yycolumn);
            }
            // fall through
          case 248: break;
          case 97:
            { return token(yytext(),"Inst_BITA",yyline,yycolumn);
            }
            // fall through
          case 249: break;
          case 98:
            { return token(yytext(),"Inst_BITB",yyline,yycolumn);
            }
            // fall through
          case 250: break;
          case 99:
            { return token(yytext(),"Inst_BSET",yyline,yycolumn);
            }
            // fall through
          case 251: break;
          case 100:
            { return token(yytext(),"Inst_CLRA",yyline,yycolumn);
            }
            // fall through
          case 252: break;
          case 101:
            { return token(yytext(),"Inst_CLRB",yyline,yycolumn);
            }
            // fall through
          case 253: break;
          case 102:
            { return token(yytext(),"Inst_CMPA",yyline,yycolumn);
            }
            // fall through
          case 254: break;
          case 103:
            { return token(yytext(),"Inst_CMPB",yyline,yycolumn);
            }
            // fall through
          case 255: break;
          case 104:
            { return token(yytext(),"Inst_COMA",yyline,yycolumn);
            }
            // fall through
          case 256: break;
          case 105:
            { return token(yytext(),"Inst_COMB",yyline,yycolumn);
            }
            // fall through
          case 257: break;
          case 106:
            { return token(yytext(),"Inst_DECA",yyline,yycolumn);
            }
            // fall through
          case 258: break;
          case 107:
            { return token(yytext(),"Inst_DECB",yyline,yycolumn);
            }
            // fall through
          case 259: break;
          case 108:
            { return token(yytext(),"Inst_EORA",yyline,yycolumn);
            }
            // fall through
          case 260: break;
          case 109:
            { return token(yytext(),"Inst_EORB",yyline,yycolumn);
            }
            // fall through
          case 261: break;
          case 110:
            { return token(yytext(),"Inst_FDIV",yyline,yycolumn);
            }
            // fall through
          case 262: break;
          case 111:
            { return token(yytext(),"Inst_IDIV",yyline,yycolumn);
            }
            // fall through
          case 263: break;
          case 112:
            { return token(yytext(),"Inst_INCA",yyline,yycolumn);
            }
            // fall through
          case 264: break;
          case 113:
            { return token(yytext(),"Inst_INCB",yyline,yycolumn);
            }
            // fall through
          case 265: break;
          case 114:
            { return token(yytext(),"Inst_LDAA",yyline,yycolumn);
            }
            // fall through
          case 266: break;
          case 115:
            { return token(yytext(),"Inst_LDAB",yyline,yycolumn);
            }
            // fall through
          case 267: break;
          case 116:
            { return token(yytext(),"Inst_LSRA",yyline,yycolumn);
            }
            // fall through
          case 268: break;
          case 117:
            { return token(yytext(),"Inst_LSRB",yyline,yycolumn);
            }
            // fall through
          case 269: break;
          case 118:
            { return token(yytext(),"Inst_LSRD",yyline,yycolumn);
            }
            // fall through
          case 270: break;
          case 119:
            { return token(yytext(),"Inst_NEGA",yyline,yycolumn);
            }
            // fall through
          case 271: break;
          case 120:
            { return token(yytext(),"Inst_NEGB",yyline,yycolumn);
            }
            // fall through
          case 272: break;
          case 121:
            { return token(yytext(),"Inst_ORAA",yyline,yycolumn);
            }
            // fall through
          case 273: break;
          case 122:
            { return token(yytext(),"Inst_ORAB",yyline,yycolumn);
            }
            // fall through
          case 274: break;
          case 123:
            { return token(yytext(),"Inst_PSHA",yyline,yycolumn);
            }
            // fall through
          case 275: break;
          case 124:
            { return token(yytext(),"Inst_PSHB",yyline,yycolumn);
            }
            // fall through
          case 276: break;
          case 125:
            { return token(yytext(),"Inst_PSHX",yyline,yycolumn);
            }
            // fall through
          case 277: break;
          case 126:
            { return token(yytext(),"Inst_PSHY",yyline,yycolumn);
            }
            // fall through
          case 278: break;
          case 127:
            { return token(yytext(),"Inst_PULA",yyline,yycolumn);
            }
            // fall through
          case 279: break;
          case 128:
            { return token(yytext(),"Inst_PULB",yyline,yycolumn);
            }
            // fall through
          case 280: break;
          case 129:
            { return token(yytext(),"Inst_PULX",yyline,yycolumn);
            }
            // fall through
          case 281: break;
          case 130:
            { return token(yytext(),"Inst_PULY",yyline,yycolumn);
            }
            // fall through
          case 282: break;
          case 131:
            { return token(yytext(),"Inst_ROLA",yyline,yycolumn);
            }
            // fall through
          case 283: break;
          case 132:
            { return token(yytext(),"Inst_ROLB",yyline,yycolumn);
            }
            // fall through
          case 284: break;
          case 133:
            { return token(yytext(),"Inst_RORA",yyline,yycolumn);
            }
            // fall through
          case 285: break;
          case 134:
            { return token(yytext(),"Inst_RORB",yyline,yycolumn);
            }
            // fall through
          case 286: break;
          case 135:
            { return token(yytext(),"Inst_SBCA",yyline,yycolumn);
            }
            // fall through
          case 287: break;
          case 136:
            { return token(yytext(),"Inst_SBCB",yyline,yycolumn);
            }
            // fall through
          case 288: break;
          case 137:
            { return token(yytext(),"Inst_STAA",yyline,yycolumn);
            }
            // fall through
          case 289: break;
          case 138:
            { return token(yytext(),"Inst_STAB",yyline,yycolumn);
            }
            // fall through
          case 290: break;
          case 139:
            { return token(yytext(),"Inst_STOP",yyline,yycolumn);
            }
            // fall through
          case 291: break;
          case 140:
            { return token(yytext(),"Inst_SUBA",yyline,yycolumn);
            }
            // fall through
          case 292: break;
          case 141:
            { return token(yytext(),"Inst_SUBB",yyline,yycolumn);
            }
            // fall through
          case 293: break;
          case 142:
            { return token(yytext(),"Inst_SUBD",yyline,yycolumn);
            }
            // fall through
          case 294: break;
          case 143:
            { return token(yytext(),"Inst_TEST",yyline,yycolumn);
            }
            // fall through
          case 295: break;
          case 144:
            { return token(yytext(),"Inst_TSTA",yyline,yycolumn);
            }
            // fall through
          case 296: break;
          case 145:
            { return token(yytext(),"Inst_TSTB",yyline,yycolumn);
            }
            // fall through
          case 297: break;
          case 146:
            { return token(yytext(),"Inst_XGDX",yyline,yycolumn);
            }
            // fall through
          case 298: break;
          case 147:
            { return token(yytext(),"Inst_XGDY",yyline,yycolumn);
            }
            // fall through
          case 299: break;
          case 148:
            { return token(yytext(), "DirExt", yyline, yycolumn);
            }
            // fall through
          case 300: break;
          case 149:
            { return token(yytext(),"ERROR_6",yyline,yycolumn);
            }
            // fall through
          case 301: break;
          case 150:
            { return token(yytext(),"Inst_BRCLR",yyline,yycolumn);
            }
            // fall through
          case 302: break;
          case 151:
            { return token(yytext(),"Inst_BRSET",yyline,yycolumn);
            }
            // fall through
          case 303: break;
          case 152:
            { return token(yytext(),"ERROR_9",yyline,yycolumn);
            }
            // fall through
          case 304: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
