// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\2\0\1\5\1\6\3\0\1\7\1\10\1\11\1\0"+
    "\1\12\3\0\12\13\7\0\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\23\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\23\1\40\1\41\1\23\4\0\1\23\1\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\23"+
    "\1\51\2\23\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\23\1\65\1\66"+
    "\1\23\1\67\1\70\1\71\103\0\1\23\7\0\1\23"+
    "\3\0\1\23\3\0\1\23\1\0\1\23\6\0\1\23"+
    "\1\0\1\23\4\0\1\23\7\0\1\23\3\0\1\23"+
    "\3\0\1\23\1\0\1\23\6\0\1\23\1\0\1\23"+
    "\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\34\0\1\3\101\0\1\7\1\10\1\11\1\12\3\0"+
    "\1\13\6\0\1\14\6\0\1\15\1\0\1\16\1\17"+
    "\1\20\1\21\1\0\1\22\1\23\3\0\1\24\1\25"+
    "\1\26\4\0\1\27\2\0\1\30\2\0\1\31\7\0"+
    "\1\13\35\0\1\32\1\33\1\34\3\0\1\35\1\36"+
    "\10\0\1\37\4\0\1\40\14\0\1\41\1\0\1\42"+
    "\1\43\15\0\1\44\1\45\1\46\3\0\1\47\1\0"+
    "\1\50\1\51\1\52\1\53\4\0\1\54\3\0\1\55"+
    "\154\0\1\56\2\0\1\57\2\0\1\60\44\0\1\61"+
    "\2\0\1\62\2\0\1\63\2\0\1\64\13\0\1\65"+
    "\3\0\1\56\2\0\1\57\2\0\1\60\12\0\1\66"+
    "\2\0\1\67\11\0\1\70\2\0\1\71\1\0\1\72"+
    "\1\0\1\73\2\0\1\74\2\0\1\61\2\0\1\62"+
    "\2\0\1\63\2\0\1\64\2\0\1\75\6\0\1\76"+
    "\1\0\1\65\2\0\1\77\2\0\1\100\2\0\1\101"+
    "\2\0\1\102\1\0\1\103\4\0\1\104\1\0\1\66"+
    "\2\0\1\67\1\0\1\105\1\0\1\106\1\0\1\107"+
    "\1\0\1\110\1\0\1\70\2\0\1\71\1\0\1\72"+
    "\1\0\1\73\2\0\1\74\1\0\1\111\1\0\1\112"+
    "\1\113\1\0\1\114\2\0\1\115\1\116\1\0\1\117"+
    "\2\0\2\120\2\0\1\121\6\0\2\122\1\123\1\0"+
    "\1\124\2\0\2\125\3\0\1\126\3\0\2\127\3\0"+
    "\1\130\2\0\2\131\1\132\1\133\2\0\2\134\1\135"+
    "\1\0\1\136\1\137\1\0\1\140\2\0\2\13\2\0"+
    "\2\141\2\0\2\142\1\143\1\0\1\144\1\145\1\0"+
    "\1\146\1\0\1\147\1\0\1\150\2\0\1\151\2\0"+
    "\2\152\2\0\2\153\3\0\2\154\2\0\2\155\12\0"+
    "\2\156\1\157\1\160\1\161\2\0\2\162\2\0\2\163"+
    "\2\0\2\164\2\0\2\165\2\0\2\166\2\0\2\167"+
    "\3\0\2\170\1\171\1\0\1\172\5\0\1\173\1\174"+
    "\2\0\1\175\1\0\1\176\1\0\1\177\2\0\1\200"+
    "\1\201\1\202";

  private static int [] zzUnpackAction() {
    int [] result = new int[716];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\256\0\72\0\72\0\350"+
    "\0\72\0\u0122\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\72\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\72\0\72\0\72\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\72\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\72\0\u1a0e\0\72\0\72"+
    "\0\72\0\72\0\u1a48\0\72\0\72\0\u1a82\0\u1abc\0\u1af6"+
    "\0\72\0\72\0\72\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\72"+
    "\0\u1c18\0\u1c52\0\72\0\u1c8c\0\u1cc6\0\72\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\72\0\72\0\72\0\u2562\0\u259c"+
    "\0\u25d6\0\72\0\72\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8"+
    "\0\u2732\0\u276c\0\u27a6\0\72\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\72\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\72\0\u2b80\0\72"+
    "\0\72\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\72\0\72"+
    "\0\72\0\u2eac\0\u2ee6\0\u2f20\0\72\0\u2f5a\0\72\0\72"+
    "\0\72\0\72\0\u2f94\0\u2fce\0\u3008\0\u3042\0\72\0\u307c"+
    "\0\u30b6\0\u30f0\0\72\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2"+
    "\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952"+
    "\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22"+
    "\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2"+
    "\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2"+
    "\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092"+
    "\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262"+
    "\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432"+
    "\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602"+
    "\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2"+
    "\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2"+
    "\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72"+
    "\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42"+
    "\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12"+
    "\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2"+
    "\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2"+
    "\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482"+
    "\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618\0\u5652"+
    "\0\u568c\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822"+
    "\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2"+
    "\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2"+
    "\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92"+
    "\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28\0\u5f62"+
    "\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\u60be\0\u60f8\0\u6132"+
    "\0\u616c\0\u61a6\0\u61e0\0\u621a\0\u60f8\0\u6254\0\u628e\0\u62c8"+
    "\0\u6302\0\u633c\0\u6376\0\u63b0\0\u63ea\0\u6424\0\u645e\0\u6498"+
    "\0\u64d2\0\u650c\0\72\0\u6546\0\u6580\0\u65ba\0\u65f4\0\u662e"+
    "\0\u6668\0\72\0\u66a2\0\u66dc\0\u6716\0\u6750\0\72\0\u678a"+
    "\0\u67c4\0\72\0\u67fe\0\u6838\0\72\0\u6872\0\u68ac\0\72"+
    "\0\u68e6\0\72\0\u6920\0\u695a\0\u6994\0\u69ce\0\72\0\u6a08"+
    "\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\72\0\u6b64\0\72"+
    "\0\u6b9e\0\72\0\u6bd8\0\72\0\u6c12\0\u6c4c\0\u6c86\0\u6cc0"+
    "\0\u6cfa\0\u6d34\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c\0\u6e56\0\u6e90"+
    "\0\u6eca\0\72\0\u6f04\0\72\0\72\0\u6f3e\0\72\0\u6f78"+
    "\0\u6fb2\0\72\0\72\0\u6fec\0\72\0\u7026\0\u7060\0\u7026"+
    "\0\72\0\u709a\0\u70d4\0\72\0\u710e\0\u7148\0\u7182\0\u71bc"+
    "\0\u71f6\0\u7230\0\u71f6\0\72\0\72\0\u726a\0\72\0\u72a4"+
    "\0\u72de\0\u72a4\0\72\0\u7318\0\u7352\0\u738c\0\72\0\u73c6"+
    "\0\u7400\0\u743a\0\u7400\0\72\0\u7474\0\u74ae\0\u74e8\0\72"+
    "\0\u7522\0\u755c\0\u7522\0\72\0\72\0\72\0\u7596\0\u75d0"+
    "\0\u7596\0\72\0\72\0\u760a\0\72\0\72\0\u7644\0\72"+
    "\0\u767e\0\u76b8\0\u767e\0\72\0\u76f2\0\u772c\0\u76f2\0\72"+
    "\0\u7766\0\u77a0\0\u7766\0\72\0\72\0\u77da\0\72\0\72"+
    "\0\u7814\0\72\0\u784e\0\72\0\u7888\0\72\0\u78c2\0\u78fc"+
    "\0\72\0\u7936\0\u7970\0\u7936\0\72\0\u79aa\0\u79e4\0\u79aa"+
    "\0\72\0\u7a1e\0\u7a58\0\u7a92\0\u7a58\0\72\0\u7acc\0\u7b06"+
    "\0\u7acc\0\72\0\u7b40\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28\0\u7c62"+
    "\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a\0\u7d10\0\72\0\72\0\72"+
    "\0\72\0\u7d84\0\u7dbe\0\u7d84\0\72\0\u7df8\0\u7e32\0\u7df8"+
    "\0\72\0\u7e6c\0\u7ea6\0\u7e6c\0\72\0\u7ee0\0\u7f1a\0\u7ee0"+
    "\0\72\0\u7f54\0\u7f8e\0\u7f54\0\72\0\u7fc8\0\u8002\0\u7fc8"+
    "\0\72\0\u803c\0\u8076\0\u80b0\0\u8076\0\72\0\72\0\u80ea"+
    "\0\72\0\u8124\0\u815e\0\u8198\0\u81d2\0\u820c\0\72\0\72"+
    "\0\u8246\0\u8280\0\72\0\u82ba\0\72\0\u82f4\0\72\0\u832e"+
    "\0\u8368\0\72\0\72\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[716];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\0\1\20\1\21\1\22\1\23\1\24\2\0"+
    "\1\25\1\26\1\27\4\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\0\1\36\1\37\1\40\1\41\1\42"+
    "\2\0\1\43\1\44\1\45\4\0\1\4\1\0\1\46"+
    "\74\0\1\2\102\0\54\47\3\0\2\10\1\2\1\3"+
    "\66\10\15\0\1\50\1\0\1\51\7\0\1\52\4\0"+
    "\1\53\53\0\1\54\5\0\1\55\6\0\1\56\1\57"+
    "\52\0\1\60\7\0\1\61\1\62\1\0\1\63\1\64"+
    "\54\0\1\65\3\0\1\66\100\0\1\67\1\70\1\0"+
    "\1\71\55\0\1\72\1\73\71\0\1\74\7\0\1\75"+
    "\61\0\1\76\14\0\1\77\73\0\1\100\53\0\1\101"+
    "\104\0\1\102\66\0\1\103\56\0\1\104\17\0\1\105"+
    "\1\106\67\0\1\107\100\0\1\110\1\0\1\111\6\0"+
    "\1\112\4\0\1\113\54\0\1\114\4\0\1\115\6\0"+
    "\1\116\1\117\53\0\1\120\6\0\1\121\1\122\1\0"+
    "\1\123\1\124\55\0\1\125\3\0\1\126\77\0\1\127"+
    "\1\130\1\0\1\131\56\0\1\132\1\133\71\0\1\134"+
    "\6\0\1\135\62\0\1\136\13\0\1\137\73\0\1\140"+
    "\54\0\1\141\103\0\1\142\66\0\1\143\57\0\1\144"+
    "\16\0\1\145\1\146\67\0\1\147\23\0\54\150\17\0"+
    "\1\151\23\0\1\152\1\153\46\0\1\154\1\155\71\0"+
    "\1\156\77\0\1\157\5\0\1\160\63\0\1\161\101\0"+
    "\1\162\52\0\1\163\15\0\1\164\55\0\1\165\65\0"+
    "\1\166\110\0\1\167\67\0\1\170\66\0\1\171\62\0"+
    "\1\172\20\0\1\173\1\174\44\0\1\175\73\0\1\176"+
    "\15\0\1\177\3\0\1\200\1\201\47\0\1\202\105\0"+
    "\1\203\74\0\1\204\50\0\1\205\100\0\1\206\71\0"+
    "\1\207\63\0\1\210\15\0\1\211\3\0\1\212\1\213"+
    "\44\0\1\214\2\0\1\215\77\0\1\216\5\0\1\217"+
    "\63\0\1\220\66\0\1\221\63\0\1\222\5\0\1\223"+
    "\74\0\1\224\5\0\1\225\52\0\1\226\1\0\1\227"+
    "\67\0\1\230\72\0\1\231\111\0\1\232\76\0\1\151"+
    "\22\0\1\152\1\153\47\0\1\233\1\234\71\0\1\235"+
    "\76\0\1\236\5\0\1\237\63\0\1\240\101\0\1\241"+
    "\53\0\1\242\14\0\1\243\56\0\1\244\65\0\1\166"+
    "\107\0\1\245\67\0\1\246\66\0\1\247\63\0\1\172"+
    "\17\0\1\173\1\174\45\0\1\175\73\0\1\250\14\0"+
    "\1\177\3\0\1\200\1\201\50\0\1\202\104\0\1\251"+
    "\74\0\1\204\51\0\1\205\77\0\1\252\71\0\1\253"+
    "\64\0\1\210\14\0\1\211\3\0\1\212\1\213\45\0"+
    "\1\254\2\0\1\215\76\0\1\255\5\0\1\256\63\0"+
    "\1\220\67\0\1\257\63\0\1\260\5\0\1\223\73\0"+
    "\1\261\5\0\1\262\53\0\1\226\1\0\1\263\67\0"+
    "\1\264\72\0\1\265\110\0\1\266\22\0\54\267\17\0"+
    "\1\270\71\0\1\271\2\0\1\272\66\0\1\273\71\0"+
    "\1\274\1\275\1\0\1\276\53\0\2\277\1\300\1\277"+
    "\1\0\1\301\5\0\1\302\1\303\107\0\1\304\52\0"+
    "\1\305\102\0\1\306\64\0\1\307\106\0\1\310\35\0"+
    "\2\311\1\312\1\311\1\0\1\313\5\0\1\314\71\0"+
    "\1\315\56\0\2\316\1\317\1\316\1\0\1\320\5\0"+
    "\1\321\56\0\2\322\1\323\1\322\1\0\1\324\64\0"+
    "\2\325\1\326\1\325\1\0\1\327\64\0\2\330\1\331"+
    "\1\330\1\0\1\332\64\0\2\333\1\334\1\333\1\0"+
    "\1\335\5\0\1\336\71\0\1\337\114\0\1\340\71\0"+
    "\1\341\33\0\2\342\1\343\1\342\1\0\1\344\77\0"+
    "\1\345\1\346\55\0\2\347\1\350\1\347\66\0\2\351"+
    "\1\352\1\351\1\0\1\353\5\0\1\274\1\275\1\0"+
    "\1\276\53\0\2\354\1\355\1\354\1\0\1\356\5\0"+
    "\1\357\1\360\1\0\1\361\53\0\2\362\1\363\1\362"+
    "\1\0\1\364\5\0\1\365\71\0\1\366\71\0\1\367"+
    "\1\370\70\0\1\371\1\372\70\0\1\373\71\0\1\374"+
    "\1\375\73\0\1\376\66\0\1\377\117\0\1\270\71\0"+
    "\1\271\2\0\1\272\66\0\1\273\71\0\1\274\1\275"+
    "\1\0\1\276\25\0\2\277\1\300\1\277\1\0\1\301"+
    "\33\0\1\302\1\303\106\0\1\304\53\0\1\305\101\0"+
    "\1\u0100\65\0\1\u0101\105\0\1\310\10\0\2\311\1\312"+
    "\1\311\35\0\1\314\71\0\1\315\30\0\2\316\1\317"+
    "\1\316\1\0\1\320\33\0\1\321\30\0\2\333\1\334"+
    "\1\333\1\0\1\335\33\0\1\336\71\0\1\337\113\0"+
    "\1\340\71\0\1\341\47\0\1\345\1\346\27\0\2\351"+
    "\1\352\1\351\1\0\1\353\33\0\1\274\1\275\1\0"+
    "\1\276\25\0\2\354\1\355\1\354\1\0\1\356\33\0"+
    "\1\357\1\360\1\0\1\361\25\0\2\362\1\363\1\362"+
    "\1\0\1\364\33\0\1\365\71\0\1\366\71\0\1\367"+
    "\1\370\70\0\1\371\1\372\70\0\1\373\71\0\1\u0102"+
    "\1\375\73\0\1\376\66\0\1\377\42\0\54\u0103\4\0"+
    "\2\u0104\1\u0105\1\u0104\1\0\1\u0106\64\0\2\u0107\1\u0108"+
    "\1\u0107\1\0\1\u0109\64\0\2\u010a\1\u010b\1\u010a\1\0"+
    "\1\u010c\64\0\2\u010d\1\u010e\1\u010d\1\0\1\u010f\71\0"+
    "\1\u0110\65\0\1\277\3\0\1\u0110\76\0\54\u0111\4\0"+
    "\2\u0112\1\u0113\1\u0112\1\0\1\u0114\64\0\2\u0115\1\u0116"+
    "\1\u0115\120\0\1\u0117\73\0\1\u0118\35\0\2\u0119\1\u011a"+
    "\1\u0119\1\0\1\u011b\71\0\1\u011c\65\0\1\311\3\0"+
    "\1\u011c\76\0\54\u011d\4\0\2\u011e\1\u011f\1\u011e\1\0"+
    "\1\u0120\71\0\1\u0121\65\0\1\316\3\0\1\u0121\76\0"+
    "\54\u0122\10\0\1\u0123\1\u0124\65\0\1\322\2\0\1\u0123"+
    "\1\u0124\76\0\54\u0125\10\0\1\u0126\1\u0127\65\0\1\325"+
    "\2\0\1\u0126\1\u0127\76\0\54\u0128\10\0\1\u0129\1\u012a"+
    "\65\0\1\330\2\0\1\u0129\1\u012a\76\0\54\u012b\11\0"+
    "\1\u012c\65\0\1\333\3\0\1\u012c\76\0\54\u012d\4\0"+
    "\2\u012e\1\u012f\1\u012e\1\0\1\u0130\71\0\1\u0131\65\0"+
    "\1\342\3\0\1\u0131\76\0\54\u0132\4\0\2\u0133\1\u0134"+
    "\1\u0133\1\0\1\u0135\64\0\2\u0136\1\u0137\1\u0136\1\0"+
    "\1\u0138\70\0\1\u0139\66\0\1\347\2\0\1\u0139\72\0"+
    "\1\u013a\65\0\1\351\3\0\1\u013a\76\0\54\u013b\11\0"+
    "\1\u013c\65\0\1\354\3\0\1\u013c\76\0\54\u013d\11\0"+
    "\1\u013e\65\0\1\362\3\0\1\u013e\76\0\54\u013f\4\0"+
    "\2\u0140\1\u0141\1\u0140\1\0\1\u0142\64\0\2\u0143\1\u0144"+
    "\1\u0143\1\0\1\u0145\64\0\2\u0146\1\u0147\1\u0146\1\0"+
    "\1\u0148\64\0\2\u0149\1\u014a\1\u0149\1\0\1\u014b\64\0"+
    "\2\u014c\1\u014d\1\u014c\1\0\1\u014e\143\0\1\u0117\73\0"+
    "\1\u0118\10\0\2\u0146\1\u0147\1\u0146\1\0\1\u014f\70\0"+
    "\1\u0150\1\u0151\65\0\1\u0104\2\0\1\u0150\1\u0151\76\0"+
    "\54\u0152\10\0\1\u0153\1\u0154\65\0\1\u0107\2\0\1\u0153"+
    "\1\u0154\76\0\54\u0155\10\0\1\u0156\1\u0157\65\0\1\u010a"+
    "\2\0\1\u0156\1\u0157\76\0\54\u0158\10\0\1\u0159\1\u015a"+
    "\65\0\1\u010d\2\0\1\u0159\1\u015a\76\0\54\u015b\16\0"+
    "\54\u015c\16\0\54\u015d\11\0\1\u0114\65\0\1\u0112\3\0"+
    "\1\u0114\76\0\54\u015e\10\0\1\u015f\66\0\1\u0115\2\0"+
    "\1\u015f\65\0\2\u0160\1\u0161\1\u0160\1\0\1\u0162\64\0"+
    "\2\u0163\1\u0164\1\u0163\1\0\1\u0165\71\0\1\u011b\65\0"+
    "\1\u0119\3\0\1\u011b\76\0\54\u0166\16\0\54\u0167\16\0"+
    "\54\u0168\10\0\1\u0169\1\u016a\65\0\1\u011e\2\0\1\u0169"+
    "\1\u016a\76\0\54\u016b\16\0\54\u016c\16\0\54\u016d\11\0"+
    "\1\u016e\76\0\54\u016f\16\0\54\u0170\11\0\1\u0171\76\0"+
    "\54\u0172\16\0\54\u0173\11\0\1\u0174\76\0\54\u0175\16\0"+
    "\54\u0176\16\0\54\u0177\16\0\54\u0178\10\0\1\u0179\1\u017a"+
    "\65\0\1\u012e\2\0\1\u0179\1\u017a\76\0\54\u017b\16\0"+
    "\54\u017c\16\0\54\u017d\10\0\1\u017e\1\u017f\65\0\1\u0133"+
    "\2\0\1\u017e\1\u017f\76\0\54\u0180\10\0\1\u0181\1\u0182"+
    "\65\0\1\u0136\2\0\1\u0181\1\u0182\76\0\54\u0183\11\0"+
    "\1\u0184\76\0\54\u0185\16\0\54\u0186\16\0\54\u0187\16\0"+
    "\54\u0188\16\0\54\u0189\16\0\54\u018a\10\0\1\u018b\1\u018c"+
    "\65\0\1\u0140\2\0\1\u018b\1\u018c\76\0\54\u018d\10\0"+
    "\1\u018e\1\u018f\65\0\1\u0143\2\0\1\u018e\1\u018f\76\0"+
    "\54\u0190\11\0\1\u0191\65\0\1\u0146\3\0\1\u0191\76\0"+
    "\54\u0192\11\0\1\u0193\65\0\1\u0149\3\0\1\u0193\76\0"+
    "\54\u0194\10\0\1\u0195\1\u0196\65\0\1\u014c\2\0\1\u0195"+
    "\1\u0196\76\0\54\u0197\16\0\54\u0198\11\0\1\u0199\76\0"+
    "\54\u019a\16\0\54\u019b\11\0\1\u019c\76\0\54\u019d\16\0"+
    "\54\u019e\11\0\1\u019f\76\0\54\u01a0\16\0\54\u01a1\11\0"+
    "\1\u01a2\76\0\54\u01a3\16\0\54\u01a4\16\0\54\u01a5\16\0"+
    "\54\u01a6\16\0\54\u01a7\11\0\1\u01a8\71\0\1\u0162\65\0"+
    "\1\u0160\3\0\1\u0162\76\0\54\u01a9\11\0\1\u0165\65\0"+
    "\1\u0163\3\0\1\u0165\76\0\54\u01aa\16\0\54\u01ab\16\0"+
    "\54\u01ac\16\0\54\u01ad\11\0\1\u01ae\76\0\54\u01af\16\0"+
    "\54\u01b0\16\0\54\u01b1\16\0\54\u01b2\16\0\54\u01b3\16\0"+
    "\54\u01b4\16\0\54\u01b5\16\0\54\u01b6\16\0\54\u01b7\16\0"+
    "\54\u01b8\16\0\54\u01b9\16\0\54\u01ba\16\0\54\u01bb\16\0"+
    "\54\u01bc\16\0\54\u01bd\11\0\1\u01be\76\0\54\u01bf\16\0"+
    "\54\u01c0\16\0\54\u01c1\16\0\54\u01c2\11\0\1\u01c3\76\0"+
    "\54\u01c4\16\0\54\u01c5\11\0\1\u01c6\76\0\54\u01c7\16\0"+
    "\54\u01c8\16\0\54\u01c9\16\0\54\u01ca\16\0\54\u01cb\16\0"+
    "\54\u01cc\16\0\54\u01cd\16\0\54\u01ce\16\0\54\u01cf\11\0"+
    "\1\u01d0\76\0\54\u01d1\16\0\54\u01d2\11\0\1\u01d3\76\0"+
    "\54\u01d4\16\0\54\u01d5\16\0\54\u01d6\16\0\54\u01d7\16\0"+
    "\54\u01d8\16\0\54\u01d9\11\0\1\u01da\76\0\54\u01db\16\0"+
    "\54\u01dc\16\0\54\u01dd\16\0\54\u01de\16\0\54\u01df\16\0"+
    "\54\u01e0\16\0\54\u01e1\16\0\54\u01e2\16\0\54\u01e3\16\0"+
    "\54\u01e4\16\0\54\u01e5\16\0\54\u01e6\16\0\54\u01e7\16\0"+
    "\54\u01e8\16\0\54\u01e9\15\0\1\u01ea\54\u01a6\16\0\54\u01eb"+
    "\15\0\1\u01ec\72\0\54\u01ed\16\0\54\u01ee\16\0\54\u01ef"+
    "\15\0\1\u01f0\71\0\1\u01f1\54\u01ad\16\0\54\u01f2\16\0"+
    "\54\u01f3\16\0\54\u01f4\16\0\54\u01f5\15\0\1\u01f6\54\u01b2"+
    "\16\0\54\u01f7\16\0\54\u01f8\15\0\1\u01f9\54\u01b5\16\0"+
    "\54\u01fa\16\0\54\u01fb\15\0\1\u01fc\54\u01b8\16\0\54\u01fd"+
    "\16\0\54\u01fe\15\0\1\u01ff\54\u01bb\16\0\54\u0200\15\0"+
    "\1\u0201\54\u01bd\16\0\54\u0202\16\0\54\u0203\16\0\54\u0204"+
    "\16\0\54\u0205\15\0\1\u0206\54\u01c2\16\0\54\u0207\16\0"+
    "\54\u0208\16\0\54\u0209\16\0\54\u020a\16\0\54\u020b\16\0"+
    "\54\u020c\16\0\54\u020d\16\0\54\u020e\15\0\1\u020f\54\u01cb"+
    "\16\0\54\u0210\15\0\1\u0211\54\u01cd\16\0\54\u0212\15\0"+
    "\1\u0213\54\u01cf\16\0\54\u0214\16\0\54\u0215\16\0\54\u0216"+
    "\16\0\54\u0217\16\0\54\u0218\16\0\54\u0219\16\0\54\u021a"+
    "\16\0\54\u021b\16\0\54\u021c\16\0\54\u021d\16\0\54\u021e"+
    "\16\0\54\u021f\16\0\54\u0220\16\0\54\u0221\16\0\54\u0222"+
    "\15\0\1\u0223\54\u01e0\16\0\54\u0224\16\0\54\u0225\15\0"+
    "\1\u0226\54\u01e3\16\0\54\u0227\16\0\54\u0228\15\0\1\u0229"+
    "\54\u01e6\16\0\54\u022a\16\0\54\u022b\15\0\1\u022c\54\u01e9"+
    "\16\0\54\u022d\4\0\2\u022e\1\u022f\1\u0230\33\0\2\u0231"+
    "\23\0\2\u0231\1\0\1\u0231\5\0\1\u0232\1\u0233\32\0"+
    "\2\u0232\23\0\2\u0232\1\0\1\u0232\14\0\54\u0234\15\0"+
    "\1\u0235\71\0\1\u0236\63\0\1\u0237\1\u0238\32\0\2\u0237"+
    "\23\0\2\u0237\1\0\1\u0237\2\0\2\u0239\1\u023a\1\u023b"+
    "\33\0\2\u023c\23\0\2\u023c\1\0\1\u023c\14\0\54\u023d"+
    "\15\0\1\u023e\54\u01f5\16\0\54\u023f\4\0\2\u0240\1\u0241"+
    "\1\u0242\33\0\2\u0243\23\0\2\u0243\1\0\1\u0243\14\0"+
    "\54\u0244\4\0\2\u0245\1\u0246\1\u0245\7\0\53\u0247\16\0"+
    "\54\u0248\4\0\2\u0249\1\u024a\1\u024b\33\0\2\u024c\23\0"+
    "\2\u024c\1\0\1\u024c\14\0\54\u024d\4\0\2\u024e\1\u024f"+
    "\1\u024e\7\0\53\u0250\4\0\2\u0251\1\u0252\1\u0253\33\0"+
    "\2\u0254\23\0\2\u0254\1\0\1\u0254\14\0\54\u0255\15\0"+
    "\1\u020f\54\u0205\16\0\54\u0256\4\0\2\u0257\1\u0258\1\u0259"+
    "\33\0\2\u025a\23\0\2\u025a\1\0\1\u025a\14\0\54\u025b"+
    "\15\0\1\u025c\54\u020a\16\0\54\u025d\16\0\54\u025e\15\0"+
    "\1\u025f\54\u020d\16\0\54\u0260\4\0\2\u0261\1\u0262\1\u0263"+
    "\33\0\2\u0264\23\0\2\u0264\1\0\1\u0264\2\0\2\u0265"+
    "\1\u0266\1\u0267\33\0\2\u0268\23\0\2\u0268\1\0\1\u0268"+
    "\2\0\2\u0269\1\u026a\1\u026b\33\0\2\u026c\23\0\2\u026c"+
    "\1\0\1\u026c\14\0\54\u026d\15\0\1\u026e\54\u0217\16\0"+
    "\54\u026f\16\0\54\u0270\15\0\1\u0271\54\u021a\16\0\54\u0272"+
    "\15\0\1\u0273\54\u021c\16\0\54\u0274\15\0\1\u0275\54\u021e"+
    "\16\0\54\u0276\16\0\54\u0277\15\0\1\u0278\54\u0221\16\0"+
    "\54\u0279\4\0\2\u027a\1\u027b\1\u027c\33\0\2\u027d\23\0"+
    "\2\u027d\1\0\1\u027d\2\0\2\u027e\1\u027f\1\u0280\33\0"+
    "\2\u0281\23\0\2\u0281\1\0\1\u0281\14\0\54\u0282\4\0"+
    "\2\u0283\1\u0284\1\u0285\33\0\2\u0286\23\0\2\u0286\1\0"+
    "\1\u0286\2\0\2\u0287\1\u0288\1\u0289\33\0\2\u028a\23\0"+
    "\2\u028a\1\0\1\u028a\5\0\1\u0231\33\0\2\u0231\23\0"+
    "\2\u0231\1\0\1\u0231\3\0\1\u022e\1\0\1\u0231\33\0"+
    "\2\u0231\23\0\2\u0231\1\0\1\u0231\13\0\1\u028b\72\0"+
    "\54\u028c\7\0\1\u028d\1\u028e\32\0\2\u028d\23\0\2\u028d"+
    "\1\0\1\u028d\5\0\1\u028f\1\u0290\32\0\2\u028f\23\0"+
    "\2\u028f\1\0\1\u028f\13\0\1\u0291\72\0\54\u0292\7\0"+
    "\1\u023c\33\0\2\u023c\23\0\2\u023c\1\0\1\u023c\3\0"+
    "\1\u0239\1\0\1\u023c\33\0\2\u023c\23\0\2\u023c\1\0"+
    "\1\u023c\2\0\2\u0293\1\u0294\1\u0295\33\0\2\u0296\23\0"+
    "\2\u0296\1\0\1\u0296\5\0\1\u0243\33\0\2\u0243\23\0"+
    "\2\u0243\1\0\1\u0243\3\0\1\u0240\1\0\1\u0243\33\0"+
    "\2\u0243\23\0\2\u0243\1\0\1\u0243\14\0\54\u0297\7\0"+
    "\1\u0247\33\0\2\u0247\23\0\2\u0247\1\0\1\u0247\3\0"+
    "\1\u0245\1\0\1\u0247\33\0\2\u0247\23\0\2\u0247\1\0"+
    "\1\u0247\14\0\54\u0298\7\0\1\u024c\33\0\2\u024c\23\0"+
    "\2\u024c\1\0\1\u024c\3\0\1\u0249\1\0\1\u024c\33\0"+
    "\2\u024c\23\0\2\u024c\1\0\1\u024c\14\0\54\u0299\7\0"+
    "\1\u0250\33\0\2\u0250\23\0\2\u0250\1\0\1\u0250\3\0"+
    "\1\u024e\1\0\1\u0250\33\0\2\u0250\23\0\2\u0250\1\0"+
    "\1\u0250\5\0\1\u0254\33\0\2\u0254\23\0\2\u0254\1\0"+
    "\1\u0254\3\0\1\u0251\1\0\1\u0254\33\0\2\u0254\23\0"+
    "\2\u0254\1\0\1\u0254\5\0\1\u025a\33\0\2\u025a\23\0"+
    "\2\u025a\1\0\1\u025a\3\0\1\u0257\1\0\1\u025a\33\0"+
    "\2\u025a\23\0\2\u025a\1\0\1\u025a\2\0\2\u029a\1\u029b"+
    "\1\u029c\33\0\2\u029d\23\0\2\u029d\1\0\1\u029d\2\0"+
    "\2\u029e\1\u029f\1\u02a0\33\0\2\u02a1\23\0\2\u02a1\1\0"+
    "\1\u02a1\5\0\1\u0264\33\0\2\u0264\23\0\2\u0264\1\0"+
    "\1\u0264\3\0\1\u0261\1\0\1\u0264\33\0\2\u0264\23\0"+
    "\2\u0264\1\0\1\u0264\5\0\1\u0268\33\0\2\u0268\23\0"+
    "\2\u0268\1\0\1\u0268\3\0\1\u0265\1\0\1\u0268\33\0"+
    "\2\u0268\23\0\2\u0268\1\0\1\u0268\5\0\1\u026c\33\0"+
    "\2\u026c\23\0\2\u026c\1\0\1\u026c\3\0\1\u0269\1\0"+
    "\1\u026c\33\0\2\u026c\23\0\2\u026c\1\0\1\u026c\2\0"+
    "\2\u02a2\1\u02a3\1\u02a4\33\0\2\u02a5\23\0\2\u02a5\1\0"+
    "\1\u02a5\2\0\2\u02a6\1\u02a7\1\u02a8\33\0\2\u02a9\23\0"+
    "\2\u02a9\1\0\1\u02a9\2\0\2\u02aa\1\u02ab\1\u02ac\33\0"+
    "\2\u02ad\23\0\2\u02ad\1\0\1\u02ad\2\0\2\u02ae\1\u02af"+
    "\1\u02b0\33\0\2\u02b1\23\0\2\u02b1\1\0\1\u02b1\14\0"+
    "\54\u02b2\4\0\2\u02b3\1\u02b4\1\u02b5\33\0\2\u02b6\23\0"+
    "\2\u02b6\1\0\1\u02b6\5\0\1\u027d\33\0\2\u027d\23\0"+
    "\2\u027d\1\0\1\u027d\3\0\1\u027a\1\0\1\u027d\33\0"+
    "\2\u027d\23\0\2\u027d\1\0\1\u027d\5\0\1\u0281\33\0"+
    "\2\u0281\23\0\2\u0281\1\0\1\u0281\3\0\1\u027e\1\0"+
    "\1\u0281\33\0\2\u0281\23\0\2\u0281\1\0\1\u0281\14\0"+
    "\54\u02b7\7\0\1\u0286\33\0\2\u0286\23\0\2\u0286\1\0"+
    "\1\u0286\3\0\1\u0283\1\0\1\u0286\33\0\2\u0286\23\0"+
    "\2\u0286\1\0\1\u0286\5\0\1\u028a\33\0\2\u028a\23\0"+
    "\2\u028a\1\0\1\u028a\3\0\1\u0287\1\0\1\u028a\33\0"+
    "\2\u028a\23\0\2\u028a\1\0\1\u028a\6\0\1\u02b8\77\0"+
    "\54\u02b9\15\0\1\u02ba\72\0\54\u02bb\15\0\1\u02bc\72\0"+
    "\54\u02bd\10\0\1\u02be\77\0\54\u02bf\7\0\1\u0296\33\0"+
    "\2\u0296\23\0\2\u0296\1\0\1\u0296\3\0\1\u0293\1\0"+
    "\1\u0296\33\0\2\u0296\23\0\2\u0296\1\0\1\u0296\5\0"+
    "\1\u029d\33\0\2\u029d\23\0\2\u029d\1\0\1\u029d\3\0"+
    "\1\u029a\1\0\1\u029d\33\0\2\u029d\23\0\2\u029d\1\0"+
    "\1\u029d\5\0\1\u02a1\33\0\2\u02a1\23\0\2\u02a1\1\0"+
    "\1\u02a1\3\0\1\u029e\1\0\1\u02a1\33\0\2\u02a1\23\0"+
    "\2\u02a1\1\0\1\u02a1\5\0\1\u02a5\33\0\2\u02a5\23\0"+
    "\2\u02a5\1\0\1\u02a5\3\0\1\u02a2\1\0\1\u02a5\33\0"+
    "\2\u02a5\23\0\2\u02a5\1\0\1\u02a5\5\0\1\u02a9\33\0"+
    "\2\u02a9\23\0\2\u02a9\1\0\1\u02a9\3\0\1\u02a6\1\0"+
    "\1\u02a9\33\0\2\u02a9\23\0\2\u02a9\1\0\1\u02a9\5\0"+
    "\1\u02ad\33\0\2\u02ad\23\0\2\u02ad\1\0\1\u02ad\3\0"+
    "\1\u02aa\1\0\1\u02ad\33\0\2\u02ad\23\0\2\u02ad\1\0"+
    "\1\u02ad\5\0\1\u02b1\33\0\2\u02b1\23\0\2\u02b1\1\0"+
    "\1\u02b1\3\0\1\u02ae\1\0\1\u02b1\33\0\2\u02b1\23\0"+
    "\2\u02b1\1\0\1\u02b1\14\0\54\u02c0\7\0\1\u02b6\33\0"+
    "\2\u02b6\23\0\2\u02b6\1\0\1\u02b6\3\0\1\u02b3\1\0"+
    "\1\u02b6\33\0\2\u02b6\23\0\2\u02b6\1\0\1\u02b6\14\0"+
    "\54\u02c1\10\0\1\u02c2\77\0\54\u02c3\10\0\1\u02c4\77\0"+
    "\54\u02c5\16\0\54\u02c6\16\0\54\u02c7\16\0\54\u02c8\16\0"+
    "\54\u02c9\16\0\54\u02ca\16\0\54\u02cb\16\0\54\u02cc\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33698];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\34\0\1\11\101\0\1\1\3\11\3\0\1\1\6\0"+
    "\1\11\6\0\1\11\1\0\4\11\1\0\2\11\3\0"+
    "\3\11\4\0\1\11\2\0\1\11\2\0\1\11\7\0"+
    "\1\1\35\0\3\11\3\0\2\11\10\0\1\11\4\0"+
    "\1\11\14\0\1\11\1\0\2\11\15\0\3\11\3\0"+
    "\1\11\1\0\4\11\4\0\1\11\3\0\1\11\154\0"+
    "\1\1\2\0\1\1\2\0\1\1\44\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\13\0\1\1\3\0"+
    "\1\1\2\0\1\1\2\0\1\1\12\0\1\1\2\0"+
    "\1\1\11\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\11\6\0\1\11\1\0"+
    "\1\1\2\0\1\11\2\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\11\4\0\1\11\1\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\2\0\2\11\1\0\1\11\2\0\1\1\1\11"+
    "\2\0\1\11\6\0\1\1\2\11\1\0\1\11\2\0"+
    "\1\1\1\11\3\0\1\11\3\0\1\1\1\11\3\0"+
    "\1\11\2\0\1\1\3\11\2\0\1\1\2\11\1\0"+
    "\2\11\1\0\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\2\11\1\0\2\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\3\0\1\1\1\11\2\0"+
    "\1\1\1\11\12\0\1\1\4\11\2\0\1\1\1\11"+
    "\2\0\1\1\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\2\0\1\1\1\11\3\0"+
    "\1\1\2\11\1\0\1\11\5\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[716];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 131: break;
          case 2:
            { return token(yytext(),"LLAVE_A",yyline,yycolumn);
            }
            // fall through
          case 132: break;
          case 3:
            { return token(yytext(),"LLAVE_C",yyline,yycolumn);
            }
            // fall through
          case 133: break;
          case 4:
            { return token(yytext(),"PARENTESIS_A",yyline,yycolumn);
            }
            // fall through
          case 134: break;
          case 5:
            { return token(yytext(),"PARENTESIS_C",yyline,yycolumn);
            }
            // fall through
          case 135: break;
          case 6:
            { return token(yytext(),"COMA",yyline,yycolumn);
            }
            // fall through
          case 136: break;
          case 7:
            { return token(yytext(), "DirSimple", yyline, yycolumn);
            }
            // fall through
          case 137: break;
          case 8:
            { return token(yytext(),"Inst_ABA",yyline,yycolumn);
            }
            // fall through
          case 138: break;
          case 9:
            { return token(yytext(),"Inst_ABX",yyline,yycolumn);
            }
            // fall through
          case 139: break;
          case 10:
            { return token(yytext(),"Inst_ABY",yyline,yycolumn);
            }
            // fall through
          case 140: break;
          case 11:
            { return token(yytext(),"Inst_EORA_Index",yyline,yycolumn);
            }
            // fall through
          case 141: break;
          case 12:
            { return token(yytext(),"Inst_CBA",yyline,yycolumn);
            }
            // fall through
          case 142: break;
          case 13:
            { return token(yytext(),"Inst_DAA",yyline,yycolumn);
            }
            // fall through
          case 143: break;
          case 14:
            { return token(yytext(),"Inst_DES",yyline,yycolumn);
            }
            // fall through
          case 144: break;
          case 15:
            { return token(yytext(),"Inst_DEX",yyline,yycolumn);
            }
            // fall through
          case 145: break;
          case 16:
            { return token(yytext(),"Inst_DEY",yyline,yycolumn);
            }
            // fall through
          case 146: break;
          case 17:
            { return token(yytext(),"Directiva_END",yyline,yycolumn);
            }
            // fall through
          case 147: break;
          case 18:
            { return token(yytext(),"Directiva_EQU",yyline,yycolumn);
            }
            // fall through
          case 148: break;
          case 19:
            { return token(yytext(),"Directiva_FCB",yyline,yycolumn);
            }
            // fall through
          case 149: break;
          case 20:
            { return token(yytext(),"Inst_INS",yyline,yycolumn);
            }
            // fall through
          case 150: break;
          case 21:
            { return token(yytext(),"Inst_INX",yyline,yycolumn);
            }
            // fall through
          case 151: break;
          case 22:
            { return token(yytext(),"Inst_INY",yyline,yycolumn);
            }
            // fall through
          case 152: break;
          case 23:
            { return token(yytext(),"Inst_MUL",yyline,yycolumn);
            }
            // fall through
          case 153: break;
          case 24:
            { return token(yytext(),"Directiva_ORG",yyline,yycolumn);
            }
            // fall through
          case 154: break;
          case 25:
            { return token(yytext(),"Inst_SBA",yyline,yycolumn);
            }
            // fall through
          case 155: break;
          case 26:
            { return token(yytext(),"Inst_ASLA",yyline,yycolumn);
            }
            // fall through
          case 156: break;
          case 27:
            { return token(yytext(),"Inst_ASLB",yyline,yycolumn);
            }
            // fall through
          case 157: break;
          case 28:
            { return token(yytext(),"Inst_ASLD",yyline,yycolumn);
            }
            // fall through
          case 158: break;
          case 29:
            { return token(yytext(),"Inst_ASRA",yyline,yycolumn);
            }
            // fall through
          case 159: break;
          case 30:
            { return token(yytext(),"Inst_ASRB",yyline,yycolumn);
            }
            // fall through
          case 160: break;
          case 31:
            { return token(yytext(),"Inst_CLRA",yyline,yycolumn);
            }
            // fall through
          case 161: break;
          case 32:
            { return token(yytext(),"Inst_COMA",yyline,yycolumn);
            }
            // fall through
          case 162: break;
          case 33:
            { return token(yytext(),"Inst_DECA",yyline,yycolumn);
            }
            // fall through
          case 163: break;
          case 34:
            { return token(yytext(),"Inst_FDIV",yyline,yycolumn);
            }
            // fall through
          case 164: break;
          case 35:
            { return token(yytext(),"Inst_IDIV",yyline,yycolumn);
            }
            // fall through
          case 165: break;
          case 36:
            { return token(yytext(),"Inst_LSRA",yyline,yycolumn);
            }
            // fall through
          case 166: break;
          case 37:
            { return token(yytext(),"Inst_LSRB",yyline,yycolumn);
            }
            // fall through
          case 167: break;
          case 38:
            { return token(yytext(),"Inst_LSRD",yyline,yycolumn);
            }
            // fall through
          case 168: break;
          case 39:
            { return token(yytext(),"Inst_NEGA",yyline,yycolumn);
            }
            // fall through
          case 169: break;
          case 40:
            { return token(yytext(),"Inst_ROLA",yyline,yycolumn);
            }
            // fall through
          case 170: break;
          case 41:
            { return token(yytext(),"Inst_ROLB",yyline,yycolumn);
            }
            // fall through
          case 171: break;
          case 42:
            { return token(yytext(),"Inst_RORA",yyline,yycolumn);
            }
            // fall through
          case 172: break;
          case 43:
            { return token(yytext(),"Inst_RORB",yyline,yycolumn);
            }
            // fall through
          case 173: break;
          case 44:
            { return token(yytext(),"Inst_TSTA",yyline,yycolumn);
            }
            // fall through
          case 174: break;
          case 45:
            { return token(yytext(), "DirExt", yyline, yycolumn);
            }
            // fall through
          case 175: break;
          case 46:
            { return token(yytext(),"Inst_CPD_Dir",yyline,yycolumn);
            }
            // fall through
          case 176: break;
          case 47:
            { return token(yytext(),"Inst_CPX_Dir",yyline,yycolumn);
            }
            // fall through
          case 177: break;
          case 48:
            { return token(yytext(),"Inst_CPY_Dir",yyline,yycolumn);
            }
            // fall through
          case 178: break;
          case 49:
            { return token(yytext(),"Inst_ADCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 179: break;
          case 50:
            { return token(yytext(),"Inst_ADDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 180: break;
          case 51:
            { return token(yytext(),"Inst_ADDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 181: break;
          case 52:
            { return token(yytext(),"Inst_ANDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 182: break;
          case 53:
            { return token(yytext(),"Inst_CMPA_Dir",yyline,yycolumn);
            }
            // fall through
          case 183: break;
          case 54:
            { return token(yytext(),"Inst_LDAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 184: break;
          case 55:
            { return token(yytext(),"Inst_LDAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 185: break;
          case 56:
            { return token(yytext(),"Inst_ORAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 186: break;
          case 57:
            { return token(yytext(),"Inst_SBCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 187: break;
          case 58:
            { return token(yytext(),"Inst_STAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 188: break;
          case 59:
            { return token(yytext(),"Inst_STAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 189: break;
          case 60:
            { return token(yytext(),"Inst_SUBD_Dir",yyline,yycolumn);
            }
            // fall through
          case 190: break;
          case 61:
            { return token(yytext(),"Inst_ASR_Ext",yyline,yycolumn);
            }
            // fall through
          case 191: break;
          case 62:
            { return token(yytext(),"Inst_CLR_Ext",yyline,yycolumn);
            }
            // fall through
          case 192: break;
          case 63:
            { return token(yytext(),"Inst_COM_Ext",yyline,yycolumn);
            }
            // fall through
          case 193: break;
          case 64:
            { return token(yytext(),"Inst_CPD_Ext",yyline,yycolumn);
            }
            // fall through
          case 194: break;
          case 65:
            { return token(yytext(),"Inst_CPX_Ext",yyline,yycolumn);
            }
            // fall through
          case 195: break;
          case 66:
            { return token(yytext(),"Inst_CPY_Ext",yyline,yycolumn);
            }
            // fall through
          case 196: break;
          case 67:
            { return token(yytext(),"Inst_DEC_Ext",yyline,yycolumn);
            }
            // fall through
          case 197: break;
          case 68:
            { return token(yytext(),"Inst_INC_Ext",yyline,yycolumn);
            }
            // fall through
          case 198: break;
          case 69:
            { return token(yytext(),"Inst_LDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 199: break;
          case 70:
            { return token(yytext(),"Inst_ASL_Ext",yyline,yycolumn);
            }
            // fall through
          case 200: break;
          case 71:
            { return token(yytext(),"Inst_LSR_Ext",yyline,yycolumn);
            }
            // fall through
          case 201: break;
          case 72:
            { return token(yytext(),"Inst_NEG_Ext",yyline,yycolumn);
            }
            // fall through
          case 202: break;
          case 73:
            { return token(yytext(),"Inst_ADCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 203: break;
          case 74:
            { return token(yytext(),"Inst_ADCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 204: break;
          case 75:
            { return token(yytext(),"Inst_ADDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 205: break;
          case 76:
            { return token(yytext(),"Inst_ADDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 206: break;
          case 77:
            { return token(yytext(),"Inst_ADDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 207: break;
          case 78:
            { return token(yytext(),"Inst_ANDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 208: break;
          case 79:
            { return token(yytext(),"Inst_ANDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 209: break;
          case 80:
            { return token(yytext(),"Inst_ASR_Index",yyline,yycolumn);
            }
            // fall through
          case 210: break;
          case 81:
            { return token(yytext(),"Inst_BITA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 211: break;
          case 82:
            { return token(yytext(),"Inst_CLR_Index",yyline,yycolumn);
            }
            // fall through
          case 212: break;
          case 83:
            { return token(yytext(),"Inst_CMPA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 213: break;
          case 84:
            { return token(yytext(),"Inst_CMPA_Ext",yyline,yycolumn);
            }
            // fall through
          case 214: break;
          case 85:
            { return token(yytext(),"Inst_COM_Index",yyline,yycolumn);
            }
            // fall through
          case 215: break;
          case 86:
            { return token(yytext(),"Inst_CPD_Index",yyline,yycolumn);
            }
            // fall through
          case 216: break;
          case 87:
            { return token(yytext(),"Inst_CPX_Index",yyline,yycolumn);
            }
            // fall through
          case 217: break;
          case 88:
            { return token(yytext(),"Inst_CPY_Index",yyline,yycolumn);
            }
            // fall through
          case 218: break;
          case 89:
            { return token(yytext(),"Inst_DEC_Index",yyline,yycolumn);
            }
            // fall through
          case 219: break;
          case 90:
            { return token(yytext(),"Inst_EORA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 220: break;
          case 91:
            { return token(yytext(),"Inst_EORA_Ext",yyline,yycolumn);
            }
            // fall through
          case 221: break;
          case 92:
            { return token(yytext(),"Inst_INC_Index",yyline,yycolumn);
            }
            // fall through
          case 222: break;
          case 93:
            { return token(yytext(),"Inst_LDAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 223: break;
          case 94:
            { return token(yytext(),"Inst_LDAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 224: break;
          case 95:
            { return token(yytext(),"Inst_LDAB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 225: break;
          case 96:
            { return token(yytext(),"Inst_LDAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 226: break;
          case 97:
            { return token(yytext(),"Inst_LSR_Index",yyline,yycolumn);
            }
            // fall through
          case 227: break;
          case 98:
            { return token(yytext(),"Inst_NEG_Index",yyline,yycolumn);
            }
            // fall through
          case 228: break;
          case 99:
            { return token(yytext(),"Inst_ORAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 229: break;
          case 100:
            { return token(yytext(),"Inst_ORAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 230: break;
          case 101:
            { return token(yytext(),"Inst_SBCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 231: break;
          case 102:
            { return token(yytext(),"Inst_SBCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 232: break;
          case 103:
            { return token(yytext(),"Inst_STAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 233: break;
          case 104:
            { return token(yytext(),"Inst_STAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 234: break;
          case 105:
            { return token(yytext(),"Inst_SUBD_Ext",yyline,yycolumn);
            }
            // fall through
          case 235: break;
          case 106:
            { return token(yytext(),"Inst_ADCA_Index",yyline,yycolumn);
            }
            // fall through
          case 236: break;
          case 107:
            { return token(yytext(),"Inst_ADDA_Index",yyline,yycolumn);
            }
            // fall through
          case 237: break;
          case 108:
            { return token(yytext(),"Inst_ADDD_Index",yyline,yycolumn);
            }
            // fall through
          case 238: break;
          case 109:
            { return token(yytext(),"Inst_ANDA_Index",yyline,yycolumn);
            }
            // fall through
          case 239: break;
          case 110:
            { return token(yytext(),"Inst_CMPA_Index",yyline,yycolumn);
            }
            // fall through
          case 240: break;
          case 111:
            { return token(yytext(),"Inst_CPD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 241: break;
          case 112:
            { return token(yytext(),"Inst_CPX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 242: break;
          case 113:
            { return token(yytext(),"Inst_CPY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 243: break;
          case 114:
            { return token(yytext(),"Inst_LDAA_Index",yyline,yycolumn);
            }
            // fall through
          case 244: break;
          case 115:
            { return token(yytext(),"Inst_LDAB_Index",yyline,yycolumn);
            }
            // fall through
          case 245: break;
          case 116:
            { return token(yytext(),"Inst_ORAA_Index",yyline,yycolumn);
            }
            // fall through
          case 246: break;
          case 117:
            { return token(yytext(),"Inst_SBCA_Index",yyline,yycolumn);
            }
            // fall through
          case 247: break;
          case 118:
            { return token(yytext(),"Inst_STAA_Index",yyline,yycolumn);
            }
            // fall through
          case 248: break;
          case 119:
            { return token(yytext(),"Inst_STAB_Index",yyline,yycolumn);
            }
            // fall through
          case 249: break;
          case 120:
            { return token(yytext(),"Inst_SUBD_Index",yyline,yycolumn);
            }
            // fall through
          case 250: break;
          case 121:
            { return token(yytext(),"Inst_ADDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 251: break;
          case 122:
            { return token(yytext(),"Inst_BCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 252: break;
          case 123:
            { return token(yytext(),"Inst_BSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 253: break;
          case 124:
            { return token(yytext(),"Inst_SUBD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 254: break;
          case 125:
            { return token(yytext(),"Inst_BRCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 255: break;
          case 126:
            { return token(yytext(),"Inst_BRSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 256: break;
          case 127:
            { return token(yytext(),"Inst_BCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 257: break;
          case 128:
            { return token(yytext(),"Inst_BSET_Index",yyline,yycolumn);
            }
            // fall through
          case 258: break;
          case 129:
            { return token(yytext(),"Inst_BRCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 259: break;
          case 130:
            { return token(yytext(),"Inst_BRSET_Index",yyline,yycolumn);
            }
            // fall through
          case 260: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
