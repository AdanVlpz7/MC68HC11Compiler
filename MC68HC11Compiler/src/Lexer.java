// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u1f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u1f00\1\u4900\1\u1f00\1\u4a00\1\u4b00\2\u1f00\3\u0100\1\u4c00"+
    "\1\u4d00\1\u4e00\12\u1f00\4\u0100\1\u4f00\17\u1f00\2\u0100\1\u5000"+
    "\41\u1f00\2\u0100\1\u5100\1\u5200\3\u1f00\1\u5300\27\u0100\1\u5400"+
    "\2\u0100\1\u5500\45\u1f00\1\u0100\1\u5600\1\u5700\11\u1f00\1\u5800"+
    "\24\u1f00\1\u5900\1\u5a00\1\u1f00\1\u5b00\1\u5c00\1\u5d00\1\u5e00"+
    "\2\u1f00\1\u5f00\5\u1f00\1\u6000\7\u1f00\1\u6100\1\u6200\4\u1f00"+
    "\1\u6300\21\u1f00\246\u0100\1\u6400\20\u0100\1\u6500\1\u6600\25\u0100"+
    "\1\u6700\34\u0100\1\u6800\14\u1f00\2\u0100\1\u6900\u0b05\u1f00\1\u6a00"+
    "\1\u6b00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\2\0\1\4\1\5\5\0\1\6\1\0\1\7\3\0"+
    "\12\10\7\0\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\23\4\0\1\23\1\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\23\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\23\106\0\1\23\7\0\1\23\3\0\1\23\3\0"+
    "\1\23\1\0\1\23\6\0\1\23\1\0\1\23\4\0"+
    "\1\23\7\0\1\23\3\0\1\23\3\0\1\23\1\0"+
    "\1\23\6\0\1\23\1\0\1\23\u6b03\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\2\1\5\230\6"+
    "\1\7\1\10\1\11\1\12\3\7\1\13\1\14\1\15"+
    "\1\7\1\16\1\17\1\20\1\21\1\7\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\7\1\31\2\7"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\7"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\7\1\53\1\54\2\7\1\55\1\7"+
    "\1\56\1\57\1\60\1\61\1\62\1\7\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\7\1\73"+
    "\2\7\1\74\1\75\1\76\1\77\1\100\1\7\1\101"+
    "\1\102\1\103\1\7\1\104\1\7\1\105\1\106\1\107"+
    "\1\7\1\110\1\111\1\112\1\113\1\7\1\114\1\115"+
    "\1\116\1\117\1\120\4\7\1\13\1\14\5\7\1\37"+
    "\1\7\1\41\1\46\3\7\1\55\2\7\1\67\1\71"+
    "\3\7\1\74\1\75\5\7\1\115\1\7\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\2\7\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\1\155\1\156\1\157\1\7\1\160"+
    "\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\170"+
    "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\200"+
    "\1\201\1\202\1\203\1\204\1\205\1\206\1\207\1\210"+
    "\1\211\1\212\1\213\1\214\1\215\1\216\1\217\1\220"+
    "\1\221\3\7\1\121\1\222\1\223\2\7\1\224";

  private static int [] zzUnpackAction() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\72\0\256\0\350\0\72"+
    "\0\u0122\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\72"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e"+
    "\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde"+
    "\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u09f8\0\u247a\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u24b4"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u24ee"+
    "\0\u09f8\0\u2528\0\u2562\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u259c\0\u09f8\0\u25d6\0\u2610\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u264a\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u2684\0\u09f8\0\u09f8"+
    "\0\u26be\0\u26f8\0\u2732\0\u276c\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u27a6\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u27e0\0\u09f8"+
    "\0\u281a\0\u09f8\0\u2854\0\u09f8\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u2976\0\u09f8\0\u09f8\0\u09f8\0\u29b0"+
    "\0\u09f8\0\u29ea\0\u09f8\0\u09f8\0\u09f8\0\u2a24\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u2a5e\0\u09f8\0\u2a98\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68"+
    "\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38"+
    "\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008"+
    "\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8"+
    "\0\u3212\0\u324c\0\u3286\0\u32c0\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u32fa\0\u3334\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u336e\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8"+
    "\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u09f8\0\u33a8"+
    "\0\u33e2\0\u341c\0\72\0\u09f8\0\u09f8\0\u3456\0\u3490\0\u09f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\2\20"+
    "\1\21\1\22\1\20\1\23\1\24\1\25\1\26\1\27"+
    "\1\20\1\30\1\31\1\32\2\20\1\33\1\34\1\20"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\20\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\20\1\52"+
    "\1\53\1\54\2\20\1\55\1\56\1\20\74\0\1\3"+
    "\77\0\62\57\2\7\1\3\1\4\66\7\10\0\62\60"+
    "\10\0\2\61\1\62\1\61\1\63\11\61\1\64\4\61"+
    "\1\65\36\61\10\0\3\61\1\66\1\61\1\67\1\61"+
    "\1\70\1\71\1\72\2\61\1\73\1\74\1\75\1\61"+
    "\1\76\1\61\1\77\1\100\2\61\1\101\33\61\10\0"+
    "\2\61\1\102\11\61\1\103\1\104\1\61\1\105\1\106"+
    "\41\61\10\0\1\61\1\107\3\61\1\110\54\61\10\0"+
    "\16\61\1\111\1\112\1\61\1\113\40\61\10\0\3\61"+
    "\1\114\1\115\55\61\10\0\62\61\10\0\4\61\1\116"+
    "\11\61\1\117\43\61\10\0\15\61\1\120\5\61\1\121"+
    "\36\61\10\0\4\61\1\122\16\61\1\123\36\61\10\0"+
    "\25\61\1\124\34\61\10\0\5\61\1\125\11\61\1\126"+
    "\42\61\10\0\22\61\1\127\37\61\10\0\23\61\1\130"+
    "\1\61\1\131\34\61\10\0\17\61\1\132\4\61\1\133"+
    "\35\61\10\0\2\61\1\134\2\61\1\135\16\61\1\136"+
    "\1\137\1\61\1\140\32\61\10\0\1\61\1\141\1\142"+
    "\2\61\1\143\12\61\1\144\2\61\1\145\4\61\1\146"+
    "\31\61\10\0\1\61\1\147\60\61\10\0\7\61\1\150"+
    "\52\61\10\0\33\61\1\151\1\61\1\152\10\61\1\153"+
    "\4\61\1\154\6\61\10\0\34\61\1\155\1\61\1\156"+
    "\1\61\1\157\1\160\1\161\1\61\1\162\1\163\1\164"+
    "\1\61\1\165\1\61\1\166\1\167\2\61\1\170\3\61"+
    "\10\0\33\61\1\171\10\61\1\172\1\173\1\61\1\174"+
    "\1\175\11\61\10\0\32\61\1\176\3\61\1\177\23\61"+
    "\10\0\46\61\1\200\1\201\1\61\1\202\10\61\10\0"+
    "\34\61\1\203\1\204\24\61\10\0\35\61\1\205\10\61"+
    "\1\206\13\61\10\0\45\61\1\207\5\61\1\210\6\61"+
    "\10\0\35\61\1\211\15\61\1\212\6\61\10\0\55\61"+
    "\1\213\4\61\10\0\36\61\1\214\10\61\1\215\12\61"+
    "\10\0\52\61\1\216\7\61\10\0\53\61\1\217\1\61"+
    "\1\220\4\61\10\0\47\61\1\221\4\61\1\222\5\61"+
    "\10\0\33\61\1\223\2\61\1\224\15\61\1\225\1\226"+
    "\1\61\1\227\2\61\10\0\32\61\1\230\1\231\2\61"+
    "\1\232\11\61\1\233\2\61\1\234\4\61\1\235\1\61"+
    "\10\0\32\61\1\236\27\61\10\0\40\61\1\237\21\61"+
    "\10\0\62\240\10\0\62\241\10\0\1\241\1\242\26\241"+
    "\1\243\1\244\30\241\10\0\3\241\1\245\1\246\55\241"+
    "\10\0\4\241\1\247\55\241\10\0\14\241\1\250\5\241"+
    "\1\251\37\241\10\0\3\241\1\252\10\241\1\253\6\241"+
    "\1\252\36\241\10\0\21\241\1\254\40\241\10\0\5\241"+
    "\1\255\16\241\1\256\35\241\10\0\11\241\1\257\11\241"+
    "\1\252\36\241\10\0\24\241\1\260\35\241\10\0\5\241"+
    "\1\261\11\241\1\252\3\241\1\262\1\263\35\241\10\0"+
    "\11\241\1\264\50\241\10\0\5\241\1\265\54\241\10\0"+
    "\14\241\1\266\45\241\10\0\1\241\1\267\1\241\1\270"+
    "\12\241\1\271\4\241\1\272\36\241\10\0\5\241\1\273"+
    "\14\241\1\261\37\241\10\0\3\241\1\274\17\241\1\275"+
    "\36\241\10\0\1\241\1\276\60\241\10\0\3\241\1\277"+
    "\5\241\1\300\10\241\1\301\3\241\1\302\33\241\10\0"+
    "\20\241\1\303\41\241\10\0\15\241\1\304\44\241\10\0"+
    "\4\241\1\305\23\241\1\306\1\307\30\241\10\0\1\241"+
    "\1\310\60\241\10\0\3\241\1\311\17\241\1\312\4\241"+
    "\1\313\1\314\30\241\10\0\4\241\1\315\55\241\10\0"+
    "\22\241\1\316\37\241\10\0\25\241\1\317\34\241\10\0"+
    "\2\241\1\320\57\241\10\0\11\241\1\321\50\241\10\0"+
    "\11\241\1\322\50\241\10\0\3\241\1\323\5\241\1\324"+
    "\11\241\1\325\4\241\1\326\1\327\30\241\10\0\20\241"+
    "\1\330\41\241\10\0\22\241\1\331\37\241\10\0\1\241"+
    "\1\332\2\241\1\333\16\241\1\334\4\241\1\335\1\336"+
    "\30\241\10\0\14\241\1\250\5\241\1\337\37\241\10\0"+
    "\14\241\1\340\45\241\10\0\7\241\1\341\52\241\10\0"+
    "\20\241\1\342\41\241\10\0\1\241\1\343\5\241\1\344"+
    "\52\241\10\0\10\241\1\345\51\241\10\0\14\241\1\346"+
    "\45\241\10\0\14\241\1\347\5\241\1\350\37\241\10\0"+
    "\11\241\1\351\11\241\1\352\36\241\10\0\1\241\1\353"+
    "\1\241\1\354\56\241\10\0\3\241\1\355\5\241\1\356"+
    "\14\241\1\357\33\241\10\0\1\241\1\360\2\241\1\361"+
    "\12\241\1\362\3\241\1\363\4\241\1\364\1\365\30\241"+
    "\10\0\2\241\1\366\57\241\10\0\11\241\1\367\50\241"+
    "\10\0\2\241\1\370\15\241\1\371\41\241\10\0\1\241"+
    "\1\372\60\241\10\0\23\241\1\373\36\241\10\0\1\241"+
    "\1\374\60\241\10\0\24\241\1\375\3\241\1\376\31\241"+
    "\10\0\23\241\1\377\36\241\10\0\11\241\1\u0100\50\241"+
    "\10\0\4\241\1\u0101\55\241\10\0\32\241\1\242\25\241"+
    "\1\243\1\244\10\0\34\241\1\u0102\1\u0103\24\241\10\0"+
    "\35\241\1\u0104\24\241\10\0\44\241\1\u0105\5\241\1\u0106"+
    "\7\241\10\0\34\241\1\252\7\241\1\u0107\6\241\1\252"+
    "\6\241\10\0\51\241\1\254\10\241\10\0\36\241\1\255"+
    "\15\241\1\256\5\241\10\0\42\241\1\257\10\241\1\252"+
    "\6\241\10\0\54\241\1\u0108\5\241\10\0\36\241\1\261"+
    "\10\241\1\252\3\241\1\262\1\263\5\241\10\0\42\241"+
    "\1\264\17\241\10\0\36\241\1\265\23\241\10\0\44\241"+
    "\1\266\15\241\10\0\32\241\1\267\1\241\1\u0109\11\241"+
    "\1\271\4\241\1\u010a\6\241\10\0\36\241\1\u010b\13\241"+
    "\1\261\7\241\10\0\34\241\1\274\16\241\1\275\6\241"+
    "\10\0\32\241\1\276\27\241\10\0\34\241\1\277\5\241"+
    "\1\300\7\241\1\u010c\3\241\1\302\3\241\10\0\50\241"+
    "\1\u010d\11\241\10\0\45\241\1\u010e\14\241\10\0\35\241"+
    "\1\305\22\241\1\306\1\307\10\0\32\241\1\310\27\241"+
    "\10\0\34\241\1\u010f\16\241\1\312\4\241\1\313\1\314"+
    "\10\0\35\241\1\315\24\241\10\0\52\241\1\u0110\7\241"+
    "\10\0\55\241\1\317\4\241\10\0\33\241\1\320\26\241"+
    "\10\0\42\241\1\u0111\17\241\10\0\42\241\1\u0112\17\241"+
    "\10\0\34\241\1\u0113\5\241\1\u0114\10\241\1\325\4\241"+
    "\1\326\1\327\10\0\50\241\1\330\11\241\10\0\52\241"+
    "\1\331\7\241\10\0\32\241\1\u0115\2\241\1\333\15\241"+
    "\1\334\4\241\1\335\1\336\10\0\44\241\1\u0105\5\241"+
    "\1\u0116\7\241\10\0\44\241\1\340\15\241\10\0\40\241"+
    "\1\u0117\21\241\10\0\50\241\1\342\11\241\10\0\32\241"+
    "\1\u0118\5\241\1\344\21\241\10\0\41\241\1\u0119\20\241"+
    "\10\0\44\241\1\u011a\15\241\10\0\44\241\1\u011b\5\241"+
    "\1\u011c\7\241\10\0\42\241\1\351\10\241\1\352\6\241"+
    "\10\0\32\241\1\353\1\241\1\u011d\25\241\10\0\34\241"+
    "\1\355\5\241\1\356\13\241\1\357\3\241\10\0\32\241"+
    "\1\u011e\2\241\1\361\11\241\1\u011f\3\241\1\363\4\241"+
    "\1\364\1\365\10\0\33\241\1\u0120\26\241\10\0\42\241"+
    "\1\367\17\241\10\0\33\241\1\370\14\241\1\371\11\241"+
    "\10\0\32\241\1\372\27\241\10\0\53\241\1\u0121\6\241"+
    "\10\0\32\241\1\374\27\241\10\0\54\241\1\u0122\3\241"+
    "\1\376\1\241\10\0\53\241\1\377\6\241\10\0\42\241"+
    "\1\u0100\17\241\10\0\35\241\1\u0123\24\241\10\0\62\u0124"+
    "\10\0\1\241\1\u0125\1\u0126\57\241\10\0\1\241\1\u0127"+
    "\1\u0128\1\241\1\u0129\55\241\10\0\1\241\1\u012a\1\u012b"+
    "\57\241\10\0\1\241\1\u012c\1\u012d\1\241\1\u012e\55\241"+
    "\10\0\1\241\1\u012f\1\u0130\57\241\10\0\22\241\1\u0131"+
    "\37\241\10\0\1\241\1\u0132\1\u0133\57\241\10\0\14\241"+
    "\1\u0134\45\241\10\0\5\241\1\u0135\54\241\10\0\24\241"+
    "\1\u0136\35\241\10\0\1\241\1\u0137\1\u0138\57\241\10\0"+
    "\1\241\1\u0139\1\u013a\57\241\10\0\1\241\1\u013b\1\u013c"+
    "\57\241\10\0\1\241\1\u013d\1\u013e\57\241\10\0\1\241"+
    "\1\u013f\1\u0140\57\241\10\0\26\241\1\u0141\33\241\10\0"+
    "\26\241\1\u0142\33\241\10\0\1\241\1\u0143\1\u0144\57\241"+
    "\10\0\3\241\1\u0145\56\241\10\0\1\241\1\u0146\1\u0147"+
    "\57\241\10\0\1\241\1\u0148\1\u0149\1\241\1\u014a\55\241"+
    "\10\0\1\241\1\u014b\1\u014c\57\241\10\0\1\241\1\u014d"+
    "\1\u014e\57\241\10\0\1\241\1\u014f\1\u0150\25\241\1\u0151"+
    "\1\u0152\30\241\10\0\1\241\1\u0153\1\u0154\25\241\1\u0155"+
    "\1\u0156\30\241\10\0\1\241\1\u0157\1\u0158\57\241\10\0"+
    "\1\241\1\u0159\1\u015a\57\241\10\0\1\241\1\u015b\1\u015c"+
    "\57\241\10\0\1\241\1\u015d\1\u015e\57\241\10\0\20\241"+
    "\1\u015f\41\241\10\0\1\241\1\u0160\1\u0161\1\241\1\u0162"+
    "\55\241\10\0\24\241\1\u0163\35\241\10\0\1\241\1\u0164"+
    "\1\u0165\57\241\10\0\30\241\1\u0166\1\u0167\30\241\10\0"+
    "\32\241\1\u0125\1\u0126\26\241\10\0\32\241\1\u0127\1\u0128"+
    "\1\241\1\u0129\24\241\10\0\32\241\1\u012a\1\u012b\26\241"+
    "\10\0\32\241\1\u012c\1\u012d\1\241\1\u012e\24\241\10\0"+
    "\32\241\1\u012f\1\u0130\26\241\10\0\52\241\1\u0131\7\241"+
    "\10\0\32\241\1\u0132\1\u0133\26\241\10\0\44\241\1\u0168"+
    "\15\241\10\0\36\241\1\u0169\23\241\10\0\54\241\1\u0136"+
    "\5\241\10\0\32\241\1\u0137\1\u0138\26\241\10\0\32\241"+
    "\1\u0139\1\u013a\26\241\10\0\32\241\1\u013b\1\u013c\26\241"+
    "\10\0\32\241\1\u013d\1\u013e\26\241\10\0\32\241\1\u013f"+
    "\1\u0140\26\241\10\0\56\241\1\u0141\3\241\10\0\56\241"+
    "\1\u0142\3\241\10\0\32\241\1\u0143\1\u0144\26\241\10\0"+
    "\34\241\1\u016a\25\241\10\0\32\241\1\u0146\1\u0147\26\241"+
    "\10\0\32\241\1\u0148\1\u0149\1\241\1\u014a\24\241\10\0"+
    "\32\241\1\u014b\1\u014c\26\241\10\0\32\241\1\u014d\1\u014e"+
    "\26\241\10\0\32\241\1\u014f\1\u0150\24\241\1\u0151\1\u0152"+
    "\10\0\32\241\1\u0153\1\u0154\24\241\1\u0155\1\u0156\10\0"+
    "\32\241\1\u0157\1\u0158\26\241\10\0\32\241\1\u0159\1\u015a"+
    "\26\241\10\0\32\241\1\u015b\1\u015c\26\241\10\0\32\241"+
    "\1\u015d\1\u015e\26\241\10\0\50\241\1\u015f\11\241\10\0"+
    "\32\241\1\u0160\1\u0161\1\241\1\u0162\24\241\10\0\54\241"+
    "\1\u0163\5\241\10\0\32\241\1\u0164\1\u0165\26\241\10\0"+
    "\60\241\1\u0166\1\u0167\10\0\62\u016b\10\0\22\241\1\u016c"+
    "\37\241\10\0\24\241\1\u016d\35\241\10\0\11\241\1\u016e"+
    "\50\241\10\0\52\241\1\u016c\7\241\10\0\54\241\1\u016d"+
    "\5\241\10\0\42\241\1\u016f\17\241\10\0\17\241\1\u0170"+
    "\42\241\10\0\47\241\1\u0170\12\241";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13514];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\2\1\1\11\47\1\1\11"+
    "\u013a\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(),"TAB",yyline,yycolumn);
            }
            // fall through
          case 149: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 150: break;
          case 3:
            { return token(yytext(),"GATO",yyline,yycolumn);
            }
            // fall through
          case 151: break;
          case 4:
            { return token(yytext(),"PESOS",yyline,yycolumn);
            }
            // fall through
          case 152: break;
          case 5:
            { return token(yytext(),"COMA",yyline,yycolumn);
            }
            // fall through
          case 153: break;
          case 6:
            { return token(yytext(), "DirSimple", yyline, yycolumn);
            }
            // fall through
          case 154: break;
          case 7:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 155: break;
          case 8:
            { return token(yytext(),"Inst_ABA",yyline,yycolumn);
            }
            // fall through
          case 156: break;
          case 9:
            { return token(yytext(),"Inst_ABX",yyline,yycolumn);
            }
            // fall through
          case 157: break;
          case 10:
            { return token(yytext(),"Inst_ABY",yyline,yycolumn);
            }
            // fall through
          case 158: break;
          case 11:
            { return token(yytext(),"Inst_ASL",yyline,yycolumn);
            }
            // fall through
          case 159: break;
          case 12:
            { return token(yytext(),"Inst_ASR",yyline,yycolumn);
            }
            // fall through
          case 160: break;
          case 13:
            { return token(yytext(),"Inst_BCC",yyline,yycolumn);
            }
            // fall through
          case 161: break;
          case 14:
            { return token(yytext(),"Inst_BEQ",yyline,yycolumn);
            }
            // fall through
          case 162: break;
          case 15:
            { return token(yytext(),"Inst_BGE",yyline,yycolumn);
            }
            // fall through
          case 163: break;
          case 16:
            { return token(yytext(),"Inst_BGT",yyline,yycolumn);
            }
            // fall through
          case 164: break;
          case 17:
            { return token(yytext(),"Inst_BHI",yyline,yycolumn);
            }
            // fall through
          case 165: break;
          case 18:
            { return token(yytext(),"Inst_BLE",yyline,yycolumn);
            }
            // fall through
          case 166: break;
          case 19:
            { return token(yytext(),"Inst_BLS",yyline,yycolumn);
            }
            // fall through
          case 167: break;
          case 20:
            { return token(yytext(),"Inst_BLT",yyline,yycolumn);
            }
            // fall through
          case 168: break;
          case 21:
            { return token(yytext(),"Inst_BMI",yyline,yycolumn);
            }
            // fall through
          case 169: break;
          case 22:
            { return token(yytext(),"Inst_BNE",yyline,yycolumn);
            }
            // fall through
          case 170: break;
          case 23:
            { return token(yytext(),"Inst_BPL",yyline,yycolumn);
            }
            // fall through
          case 171: break;
          case 24:
            { return token(yytext(),"Inst_BRA",yyline,yycolumn);
            }
            // fall through
          case 172: break;
          case 25:
            { return token(yytext(),"Inst_BRN",yyline,yycolumn);
            }
            // fall through
          case 173: break;
          case 26:
            { return token(yytext(),"Inst_BVC",yyline,yycolumn);
            }
            // fall through
          case 174: break;
          case 27:
            { return token(yytext(),"Inst_BVS",yyline,yycolumn);
            }
            // fall through
          case 175: break;
          case 28:
            { return token(yytext(),"Inst_CBA",yyline,yycolumn);
            }
            // fall through
          case 176: break;
          case 29:
            { return token(yytext(),"Inst_CLC",yyline,yycolumn);
            }
            // fall through
          case 177: break;
          case 30:
            { return token(yytext(),"Inst_CLI",yyline,yycolumn);
            }
            // fall through
          case 178: break;
          case 31:
            { return token(yytext(),"Inst_CLR",yyline,yycolumn);
            }
            // fall through
          case 179: break;
          case 32:
            { return token(yytext(),"Inst_CLV",yyline,yycolumn);
            }
            // fall through
          case 180: break;
          case 33:
            { return token(yytext(),"Inst_COM",yyline,yycolumn);
            }
            // fall through
          case 181: break;
          case 34:
            { return token(yytext(),"Inst_CPD",yyline,yycolumn);
            }
            // fall through
          case 182: break;
          case 35:
            { return token(yytext(),"Inst_CPX",yyline,yycolumn);
            }
            // fall through
          case 183: break;
          case 36:
            { return token(yytext(),"Inst_CPY",yyline,yycolumn);
            }
            // fall through
          case 184: break;
          case 37:
            { return token(yytext(),"Inst_DAA",yyline,yycolumn);
            }
            // fall through
          case 185: break;
          case 38:
            { return token(yytext(),"Inst_DEC",yyline,yycolumn);
            }
            // fall through
          case 186: break;
          case 39:
            { return token(yytext(),"Inst_DES",yyline,yycolumn);
            }
            // fall through
          case 187: break;
          case 40:
            { return token(yytext(),"Inst_DEX",yyline,yycolumn);
            }
            // fall through
          case 188: break;
          case 41:
            { return token(yytext(),"Inst_DEY",yyline,yycolumn);
            }
            // fall through
          case 189: break;
          case 42:
            { return token(yytext(),"FINAL",yyline,yycolumn);
            }
            // fall through
          case 190: break;
          case 43:
            { return token(yytext(),"Directiva_EQU",yyline,yycolumn);
            }
            // fall through
          case 191: break;
          case 44:
            { return token(yytext(),"Directiva_FCB",yyline,yycolumn);
            }
            // fall through
          case 192: break;
          case 45:
            { return token(yytext(),"Inst_INC",yyline,yycolumn);
            }
            // fall through
          case 193: break;
          case 46:
            { return token(yytext(),"Inst_INS",yyline,yycolumn);
            }
            // fall through
          case 194: break;
          case 47:
            { return token(yytext(),"Inst_INX",yyline,yycolumn);
            }
            // fall through
          case 195: break;
          case 48:
            { return token(yytext(),"Inst_INY",yyline,yycolumn);
            }
            // fall through
          case 196: break;
          case 49:
            { return token(yytext(),"Inst_JMP",yyline,yycolumn);
            }
            // fall through
          case 197: break;
          case 50:
            { return token(yytext(),"Inst_JSR",yyline,yycolumn);
            }
            // fall through
          case 198: break;
          case 51:
            { return token(yytext(),"Inst_LDD",yyline,yycolumn);
            }
            // fall through
          case 199: break;
          case 52:
            { return token(yytext(),"Inst_LDS",yyline,yycolumn);
            }
            // fall through
          case 200: break;
          case 53:
            { return token(yytext(),"Inst_LDX",yyline,yycolumn);
            }
            // fall through
          case 201: break;
          case 54:
            { return token(yytext(),"Inst_LDY",yyline,yycolumn);
            }
            // fall through
          case 202: break;
          case 55:
            { return token(yytext(),"Inst_LSR",yyline,yycolumn);
            }
            // fall through
          case 203: break;
          case 56:
            { return token(yytext(),"Inst_MUL",yyline,yycolumn);
            }
            // fall through
          case 204: break;
          case 57:
            { return token(yytext(),"Inst_NEG",yyline,yycolumn);
            }
            // fall through
          case 205: break;
          case 58:
            { return token(yytext(),"Inst_NOP",yyline,yycolumn);
            }
            // fall through
          case 206: break;
          case 59:
            { return token(yytext(),"Directiva_ORG",yyline,yycolumn);
            }
            // fall through
          case 207: break;
          case 60:
            { return token(yytext(),"Inst_ROL",yyline,yycolumn);
            }
            // fall through
          case 208: break;
          case 61:
            { return token(yytext(),"Inst_ROR",yyline,yycolumn);
            }
            // fall through
          case 209: break;
          case 62:
            { return token(yytext(),"Inst_RTI",yyline,yycolumn);
            }
            // fall through
          case 210: break;
          case 63:
            { return token(yytext(),"Inst_RTS",yyline,yycolumn);
            }
            // fall through
          case 211: break;
          case 64:
            { return token(yytext(),"Inst_SBA",yyline,yycolumn);
            }
            // fall through
          case 212: break;
          case 65:
            { return token(yytext(),"Inst_SEC",yyline,yycolumn);
            }
            // fall through
          case 213: break;
          case 66:
            { return token(yytext(),"Inst_SEI",yyline,yycolumn);
            }
            // fall through
          case 214: break;
          case 67:
            { return token(yytext(),"Inst_SEV",yyline,yycolumn);
            }
            // fall through
          case 215: break;
          case 68:
            { return token(yytext(),"Inst_STD",yyline,yycolumn);
            }
            // fall through
          case 216: break;
          case 69:
            { return token(yytext(),"Inst_STS",yyline,yycolumn);
            }
            // fall through
          case 217: break;
          case 70:
            { return token(yytext(),"Inst_STX",yyline,yycolumn);
            }
            // fall through
          case 218: break;
          case 71:
            { return token(yytext(),"Inst_STY",yyline,yycolumn);
            }
            // fall through
          case 219: break;
          case 72:
            { return token(yytext(),"Inst_SWI",yyline,yycolumn);
            }
            // fall through
          case 220: break;
          case 73:
            { return token(yytext(),"Inst_TAB",yyline,yycolumn);
            }
            // fall through
          case 221: break;
          case 74:
            { return token(yytext(),"Inst_TAP",yyline,yycolumn);
            }
            // fall through
          case 222: break;
          case 75:
            { return token(yytext(),"Inst_TBA",yyline,yycolumn);
            }
            // fall through
          case 223: break;
          case 76:
            { return token(yytext(),"Inst_TPA",yyline,yycolumn);
            }
            // fall through
          case 224: break;
          case 77:
            { return token(yytext(),"Inst_TST",yyline,yycolumn);
            }
            // fall through
          case 225: break;
          case 78:
            { return token(yytext(),"Inst_TSX",yyline,yycolumn);
            }
            // fall through
          case 226: break;
          case 79:
            { return token(yytext(),"Inst_TXS",yyline,yycolumn);
            }
            // fall through
          case 227: break;
          case 80:
            { return token(yytext(),"Inst_WAI",yyline,yycolumn);
            }
            // fall through
          case 228: break;
          case 81:
            { return token(yytext(), "DirEXT", yyline, yycolumn);
            }
            // fall through
          case 229: break;
          case 82:
            { return token(yytext(),"Inst_ADCA",yyline,yycolumn);
            }
            // fall through
          case 230: break;
          case 83:
            { return token(yytext(),"Inst_ADCB",yyline,yycolumn);
            }
            // fall through
          case 231: break;
          case 84:
            { return token(yytext(),"Inst_ADDA",yyline,yycolumn);
            }
            // fall through
          case 232: break;
          case 85:
            { return token(yytext(),"Inst_ADDB",yyline,yycolumn);
            }
            // fall through
          case 233: break;
          case 86:
            { return token(yytext(),"Inst_ADDD",yyline,yycolumn);
            }
            // fall through
          case 234: break;
          case 87:
            { return token(yytext(),"Inst_ANDA",yyline,yycolumn);
            }
            // fall through
          case 235: break;
          case 88:
            { return token(yytext(),"Inst_ANDB",yyline,yycolumn);
            }
            // fall through
          case 236: break;
          case 89:
            { return token(yytext(),"Inst_ASLA",yyline,yycolumn);
            }
            // fall through
          case 237: break;
          case 90:
            { return token(yytext(),"Inst_ASLB",yyline,yycolumn);
            }
            // fall through
          case 238: break;
          case 91:
            { return token(yytext(),"Inst_ASLD",yyline,yycolumn);
            }
            // fall through
          case 239: break;
          case 92:
            { return token(yytext(),"Inst_ASRA",yyline,yycolumn);
            }
            // fall through
          case 240: break;
          case 93:
            { return token(yytext(),"Inst_ASRB",yyline,yycolumn);
            }
            // fall through
          case 241: break;
          case 94:
            { return token(yytext(),"Inst_BCLR",yyline,yycolumn);
            }
            // fall through
          case 242: break;
          case 95:
            { return token(yytext(),"Inst_BITA",yyline,yycolumn);
            }
            // fall through
          case 243: break;
          case 96:
            { return token(yytext(),"Inst_BITB",yyline,yycolumn);
            }
            // fall through
          case 244: break;
          case 97:
            { return token(yytext(),"Inst_BSET",yyline,yycolumn);
            }
            // fall through
          case 245: break;
          case 98:
            { return token(yytext(),"Inst_CLRA",yyline,yycolumn);
            }
            // fall through
          case 246: break;
          case 99:
            { return token(yytext(),"Inst_CLRB",yyline,yycolumn);
            }
            // fall through
          case 247: break;
          case 100:
            { return token(yytext(),"Inst_CMPA",yyline,yycolumn);
            }
            // fall through
          case 248: break;
          case 101:
            { return token(yytext(),"Inst_CMPB",yyline,yycolumn);
            }
            // fall through
          case 249: break;
          case 102:
            { return token(yytext(),"Inst_COMA",yyline,yycolumn);
            }
            // fall through
          case 250: break;
          case 103:
            { return token(yytext(),"Inst_COMB",yyline,yycolumn);
            }
            // fall through
          case 251: break;
          case 104:
            { return token(yytext(),"Inst_DECA",yyline,yycolumn);
            }
            // fall through
          case 252: break;
          case 105:
            { return token(yytext(),"Inst_DECB",yyline,yycolumn);
            }
            // fall through
          case 253: break;
          case 106:
            { return token(yytext(),"Inst_EORA",yyline,yycolumn);
            }
            // fall through
          case 254: break;
          case 107:
            { return token(yytext(),"Inst_EORB",yyline,yycolumn);
            }
            // fall through
          case 255: break;
          case 108:
            { return token(yytext(),"Inst_FDIV",yyline,yycolumn);
            }
            // fall through
          case 256: break;
          case 109:
            { return token(yytext(),"Inst_IDIV",yyline,yycolumn);
            }
            // fall through
          case 257: break;
          case 110:
            { return token(yytext(),"Inst_INCA",yyline,yycolumn);
            }
            // fall through
          case 258: break;
          case 111:
            { return token(yytext(),"Inst_INCB",yyline,yycolumn);
            }
            // fall through
          case 259: break;
          case 112:
            { return token(yytext(),"Inst_LDAA",yyline,yycolumn);
            }
            // fall through
          case 260: break;
          case 113:
            { return token(yytext(),"Inst_LDAB",yyline,yycolumn);
            }
            // fall through
          case 261: break;
          case 114:
            { return token(yytext(),"Inst_LSRA",yyline,yycolumn);
            }
            // fall through
          case 262: break;
          case 115:
            { return token(yytext(),"Inst_LSRB",yyline,yycolumn);
            }
            // fall through
          case 263: break;
          case 116:
            { return token(yytext(),"Inst_LSRD",yyline,yycolumn);
            }
            // fall through
          case 264: break;
          case 117:
            { return token(yytext(),"Inst_NEGA",yyline,yycolumn);
            }
            // fall through
          case 265: break;
          case 118:
            { return token(yytext(),"Inst_NEGB",yyline,yycolumn);
            }
            // fall through
          case 266: break;
          case 119:
            { return token(yytext(),"Inst_ORAA",yyline,yycolumn);
            }
            // fall through
          case 267: break;
          case 120:
            { return token(yytext(),"Inst_ORAB",yyline,yycolumn);
            }
            // fall through
          case 268: break;
          case 121:
            { return token(yytext(),"Inst_PSHA",yyline,yycolumn);
            }
            // fall through
          case 269: break;
          case 122:
            { return token(yytext(),"Inst_PSHB",yyline,yycolumn);
            }
            // fall through
          case 270: break;
          case 123:
            { return token(yytext(),"Inst_PSHX",yyline,yycolumn);
            }
            // fall through
          case 271: break;
          case 124:
            { return token(yytext(),"Inst_PSHY",yyline,yycolumn);
            }
            // fall through
          case 272: break;
          case 125:
            { return token(yytext(),"Inst_PULA",yyline,yycolumn);
            }
            // fall through
          case 273: break;
          case 126:
            { return token(yytext(),"Inst_PULB",yyline,yycolumn);
            }
            // fall through
          case 274: break;
          case 127:
            { return token(yytext(),"Inst_PULX",yyline,yycolumn);
            }
            // fall through
          case 275: break;
          case 128:
            { return token(yytext(),"Inst_PULY",yyline,yycolumn);
            }
            // fall through
          case 276: break;
          case 129:
            { return token(yytext(),"Inst_ROLA",yyline,yycolumn);
            }
            // fall through
          case 277: break;
          case 130:
            { return token(yytext(),"Inst_ROLB",yyline,yycolumn);
            }
            // fall through
          case 278: break;
          case 131:
            { return token(yytext(),"Inst_RORA",yyline,yycolumn);
            }
            // fall through
          case 279: break;
          case 132:
            { return token(yytext(),"Inst_RORB",yyline,yycolumn);
            }
            // fall through
          case 280: break;
          case 133:
            { return token(yytext(),"Inst_SBCA",yyline,yycolumn);
            }
            // fall through
          case 281: break;
          case 134:
            { return token(yytext(),"Inst_SBCB",yyline,yycolumn);
            }
            // fall through
          case 282: break;
          case 135:
            { return token(yytext(),"Inst_STAA",yyline,yycolumn);
            }
            // fall through
          case 283: break;
          case 136:
            { return token(yytext(),"Inst_STAB",yyline,yycolumn);
            }
            // fall through
          case 284: break;
          case 137:
            { return token(yytext(),"Inst_STOP",yyline,yycolumn);
            }
            // fall through
          case 285: break;
          case 138:
            { return token(yytext(),"Inst_SUBA",yyline,yycolumn);
            }
            // fall through
          case 286: break;
          case 139:
            { return token(yytext(),"Inst_SUBB",yyline,yycolumn);
            }
            // fall through
          case 287: break;
          case 140:
            { return token(yytext(),"Inst_SUBD",yyline,yycolumn);
            }
            // fall through
          case 288: break;
          case 141:
            { return token(yytext(),"Inst_TEST",yyline,yycolumn);
            }
            // fall through
          case 289: break;
          case 142:
            { return token(yytext(),"Inst_TSTA",yyline,yycolumn);
            }
            // fall through
          case 290: break;
          case 143:
            { return token(yytext(),"Inst_TSTB",yyline,yycolumn);
            }
            // fall through
          case 291: break;
          case 144:
            { return token(yytext(),"Inst_XGDX",yyline,yycolumn);
            }
            // fall through
          case 292: break;
          case 145:
            { return token(yytext(),"Inst_XGDY",yyline,yycolumn);
            }
            // fall through
          case 293: break;
          case 146:
            { return token(yytext(),"Inst_BRCLR",yyline,yycolumn);
            }
            // fall through
          case 294: break;
          case 147:
            { return token(yytext(),"Inst_BRSET",yyline,yycolumn);
            }
            // fall through
          case 295: break;
          case 148:
            { return token(yytext(),"INICIO",yyline,yycolumn);
            }
            // fall through
          case 296: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
