// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\2\0\1\5\1\6\3\0\1\7\1\10\1\11\1\0"+
    "\1\12\3\0\12\13\7\0\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\26\4\0\1\26"+
    "\1\0\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\26\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\26\1\75\1\76\1\77\103\0\1\26"+
    "\7\0\1\26\3\0\1\26\3\0\1\26\1\0\1\26"+
    "\6\0\1\26\1\0\1\26\4\0\1\26\7\0\1\26"+
    "\3\0\1\26\3\0\1\26\1\0\1\26\6\0\1\26"+
    "\1\0\1\26\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\44\0\1\3\161\0\1\7\1\10\1\11\1\12\3\0"+
    "\1\13\1\0\1\14\1\0\1\15\1\16\1\17\1\20"+
    "\1\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\2\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\6\0\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\1\0\1\44\1\45\3\0\1\46\1\47\1\50"+
    "\11\0\1\51\1\0\1\52\1\0\1\53\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\60\1\61\7\0\1\62"+
    "\1\63\1\64\1\65\1\0\1\66\1\0\1\67\1\70"+
    "\1\71\4\0\1\13\46\0\1\72\1\73\1\74\3\0"+
    "\1\75\1\76\11\0\1\77\1\100\5\0\1\101\1\102"+
    "\16\0\1\103\1\104\2\0\1\105\1\106\3\0\1\107"+
    "\1\110\32\0\1\111\1\112\1\113\3\0\1\114\1\115"+
    "\2\0\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\3\0\1\126\1\127\3\0\1\130\1\131\7\0"+
    "\1\132\14\0\1\133\3\0\1\134\1\135\1\136\1\137"+
    "\3\0\1\140\272\0\1\141\2\0\1\142\2\0\1\143"+
    "\16\0\1\144\10\0\1\145\2\0\1\146\2\0\1\147"+
    "\2\0\1\150\33\0\1\151\1\0\1\152\1\0\1\153"+
    "\1\0\1\154\16\0\1\155\2\0\1\156\2\0\1\157"+
    "\2\0\1\160\2\0\1\160\2\0\1\161\2\0\1\162"+
    "\5\0\1\163\2\0\1\164\7\0\1\165\2\0\1\166"+
    "\3\0\1\141\2\0\1\142\2\0\1\143\6\0\1\167"+
    "\2\0\1\170\4\0\1\144\2\0\1\171\2\0\1\172"+
    "\1\0\1\145\2\0\1\146\2\0\1\147\2\0\1\150"+
    "\11\0\1\173\2\0\1\174\6\0\1\175\2\0\1\176"+
    "\1\0\1\177\1\0\1\200\1\151\1\0\1\152\1\153"+
    "\1\0\1\154\3\0\1\201\2\0\1\202\2\0\1\202"+
    "\4\0\1\155\2\0\1\156\2\0\1\157\2\0\1\160"+
    "\2\0\1\160\2\0\1\161\2\0\1\162\2\0\1\203"+
    "\2\0\1\163\2\0\1\164\5\0\1\204\1\0\1\165"+
    "\2\0\1\166\2\0\1\205\2\0\1\206\2\0\1\207"+
    "\2\0\1\210\2\0\1\211\1\0\1\167\2\0\1\170"+
    "\1\0\1\212\1\0\1\213\2\0\1\171\2\0\1\172"+
    "\1\0\1\214\1\0\1\215\1\216\1\0\1\217\1\220"+
    "\1\0\1\221\1\222\1\0\1\223\1\0\1\224\1\0"+
    "\1\225\1\0\1\226\1\0\1\173\2\0\1\174\2\0"+
    "\1\227\1\0\1\230\1\0\1\175\2\0\1\176\1\0"+
    "\1\177\1\0\1\200\2\0\1\231\2\0\1\232\1\0"+
    "\1\233\1\0\1\201\2\0\1\202\2\0\1\202\2\0"+
    "\1\234\1\235\1\0\1\236\1\237\1\0\1\240\1\241"+
    "\1\0\1\242\1\243\1\0\1\244\2\0\1\245\1\246"+
    "\1\0\1\247\1\250\1\0\1\251\2\0\2\252\2\0"+
    "\1\253\1\0\1\254\1\255\1\0\1\256\6\0\2\257"+
    "\1\260\1\0\1\261\1\262\1\0\1\263\2\0\2\264"+
    "\3\0\1\265\3\0\2\266\1\0\1\267\3\0\2\270"+
    "\1\271\1\272\1\273\3\0\2\274\2\0\2\275\2\0"+
    "\2\276\1\277\1\0\1\300\1\301\1\0\1\302\2\0"+
    "\2\303\2\0\2\304\2\0\2\305\2\0\2\306\2\0"+
    "\2\13\2\0\2\307\2\0\2\310\1\311\1\0\1\312"+
    "\1\313\1\0\1\314\2\0\2\315\2\0\2\316\1\317"+
    "\1\0\1\320\1\321\1\0\1\322\1\0\1\323\1\0"+
    "\1\324\2\0\2\325\2\0\2\326\2\0\2\327\2\0"+
    "\2\330\2\0\1\331\2\0\1\332\2\0\1\333\2\0"+
    "\2\334\2\0\2\335\2\0\2\336\2\0\2\337\2\0"+
    "\2\340\3\0\2\341\2\0\2\342\2\0\2\343\4\0"+
    "\2\344\2\0\2\345\10\0\2\346\2\0\2\347\1\350"+
    "\1\351\1\352\2\0\2\353\2\0\2\354\2\0\2\355"+
    "\2\0\2\356\2\0\2\357\2\0\2\360\2\0\2\361"+
    "\2\0\2\362\2\0\2\363\3\0\2\364\3\0\2\365"+
    "\3\0\2\366\1\367\1\0\1\370\5\0\1\371\1\372"+
    "\1\373\1\374\2\0\1\375\1\0\1\376\1\0\1\377"+
    "\2\0\1\u0100\1\u0101\1\u0102";

  private static int [] zzUnpackAction() {
    int [] result = new int[1265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\100\0\100\0\u0100"+
    "\0\100\0\u0140\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\100\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880"+
    "\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680"+
    "\0\100\0\100\0\100\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0"+
    "\0\100\0\u2800\0\100\0\100\0\100\0\100\0\u2840\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\u2880\0\100"+
    "\0\u28c0\0\u2900\0\100\0\100\0\100\0\100\0\100\0\u2940"+
    "\0\100\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\100"+
    "\0\u2b00\0\100\0\100\0\100\0\100\0\u2b40\0\100\0\100"+
    "\0\u2b80\0\u2bc0\0\u2c00\0\100\0\100\0\100\0\u2c40\0\u2c80"+
    "\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\100"+
    "\0\u2e80\0\100\0\u2ec0\0\100\0\u2f00\0\u2f40\0\u2f80\0\u2fc0"+
    "\0\100\0\100\0\100\0\u3000\0\100\0\100\0\100\0\u3040"+
    "\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\100\0\100"+
    "\0\100\0\100\0\u3200\0\100\0\u3240\0\100\0\100\0\100"+
    "\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640"+
    "\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840"+
    "\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40"+
    "\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40"+
    "\0\u3c80\0\u3cc0\0\u3d00\0\100\0\100\0\100\0\u3d40\0\u3d80"+
    "\0\u3dc0\0\100\0\100\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00"+
    "\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\100\0\100\0\u4040\0\u4080"+
    "\0\u40c0\0\u4100\0\u4140\0\100\0\100\0\u4180\0\u41c0\0\u4200"+
    "\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400"+
    "\0\u4440\0\u4480\0\u44c0\0\100\0\100\0\u4500\0\u4540\0\100"+
    "\0\100\0\u4580\0\u45c0\0\u4600\0\100\0\100\0\u4640\0\u4680"+
    "\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880"+
    "\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u4a80"+
    "\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\u4c80"+
    "\0\100\0\100\0\100\0\u4cc0\0\u4d00\0\u4d40\0\100\0\100"+
    "\0\u4d80\0\u4dc0\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\u4e00\0\u4e40\0\u4e80\0\100\0\100\0\u4ec0"+
    "\0\u4f00\0\u4f40\0\100\0\100\0\u4f80\0\u4fc0\0\u5000\0\u5040"+
    "\0\u5080\0\u50c0\0\u5100\0\100\0\u5140\0\u5180\0\u51c0\0\u5200"+
    "\0\u5240\0\u5280\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400"+
    "\0\100\0\u5440\0\u5480\0\u54c0\0\100\0\100\0\100\0\100"+
    "\0\u5500\0\u5540\0\u5580\0\100\0\u55c0\0\u5600\0\u5640\0\u5680"+
    "\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880"+
    "\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80"+
    "\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00\0\u5c40\0\u5c80"+
    "\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0\0\u5e00\0\u5e40\0\u5e80"+
    "\0\u5ec0\0\u5f00\0\u5f40\0\u5f80\0\u5fc0\0\u6000\0\u6040\0\u6080"+
    "\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200\0\u6240\0\u6280"+
    "\0\u62c0\0\u6300\0\u6340\0\u6380\0\u63c0\0\u6400\0\u6440\0\u6480"+
    "\0\u64c0\0\u6500\0\u6540\0\u6580\0\u65c0\0\u6600\0\u6640\0\u6680"+
    "\0\u66c0\0\u6700\0\u6740\0\u6780\0\u67c0\0\u6800\0\u6840\0\u6880"+
    "\0\u68c0\0\u6900\0\u6940\0\u6980\0\u69c0\0\u6a00\0\u6a40\0\u6a80"+
    "\0\u6ac0\0\u6b00\0\u6b40\0\u6b80\0\u6bc0\0\u6c00\0\u6c40\0\u6c80"+
    "\0\u6cc0\0\u6d00\0\u6d40\0\u6d80\0\u6dc0\0\u6e00\0\u6e40\0\u6e80"+
    "\0\u6ec0\0\u6f00\0\u6f40\0\u6f80\0\u6fc0\0\u7000\0\u7040\0\u7080"+
    "\0\u70c0\0\u7100\0\u7140\0\u7180\0\u71c0\0\u7200\0\u7240\0\u7280"+
    "\0\u72c0\0\u7300\0\u7340\0\u7380\0\u73c0\0\u7400\0\u7440\0\u7480"+
    "\0\u74c0\0\u7500\0\u7540\0\u7580\0\u75c0\0\u7600\0\u7640\0\u7680"+
    "\0\u76c0\0\u7700\0\u7740\0\u7780\0\u77c0\0\u7800\0\u7840\0\u7880"+
    "\0\u78c0\0\u7900\0\u7940\0\u7980\0\u79c0\0\u7a00\0\u7a40\0\u7a80"+
    "\0\u7ac0\0\u7b00\0\u7b40\0\u7b80\0\u7bc0\0\u7c00\0\u7c40\0\u7c80"+
    "\0\u7cc0\0\u7d00\0\u7d40\0\u7d80\0\u7dc0\0\u7e00\0\u7e40\0\u7e80"+
    "\0\u7ec0\0\u7f00\0\u7f40\0\u7f80\0\u7fc0\0\u8000\0\u8040\0\u8080"+
    "\0\u80c0\0\u8100\0\u8140\0\u8180\0\u81c0\0\u8200\0\u8240\0\u8280"+
    "\0\u82c0\0\u8300\0\u8340\0\u8380\0\u83c0\0\u8400\0\u8440\0\u8480"+
    "\0\u84c0\0\u8500\0\u8540\0\u8580\0\u85c0\0\u8600\0\u8640\0\u8680"+
    "\0\u86c0\0\u8700\0\u8740\0\u8780\0\u87c0\0\u8800\0\u8840\0\u8880"+
    "\0\u88c0\0\u8900\0\u8940\0\100\0\u8980\0\u89c0\0\u8a00\0\u8a40"+
    "\0\u8a80\0\u8ac0\0\u8b00\0\u8b40\0\u8b80\0\u8bc0\0\u8c00\0\u8c40"+
    "\0\u8c80\0\u8cc0\0\u8d00\0\u8d40\0\u8d80\0\u8dc0\0\u8e00\0\u8e40"+
    "\0\u8e80\0\u8ec0\0\u8f00\0\u8f40\0\u8f80\0\u8fc0\0\u9000\0\u9040"+
    "\0\u9080\0\u90c0\0\u9100\0\u9140\0\u9180\0\u91c0\0\u9200\0\u9240"+
    "\0\u9280\0\u92c0\0\u9300\0\u9340\0\u9380\0\u93c0\0\u9400\0\u9440"+
    "\0\u9480\0\u94c0\0\u9500\0\100\0\u9540\0\u9580\0\u95c0\0\u9600"+
    "\0\u9640\0\u9680\0\u96c0\0\u9700\0\u9740\0\u9780\0\u97c0\0\u9800"+
    "\0\u9840\0\u9880\0\u98c0\0\u9900\0\u9940\0\u9980\0\u99c0\0\u9a00"+
    "\0\u9a40\0\u9a80\0\u9ac0\0\u9b00\0\u9b40\0\u9b80\0\u9bc0\0\u9c00"+
    "\0\u9c40\0\u9c80\0\u9cc0\0\u9d00\0\u9d40\0\u9d80\0\u9dc0\0\u9e00"+
    "\0\u9e40\0\u9e80\0\u9ec0\0\u9f00\0\u9f40\0\u9f80\0\u9fc0\0\ua000"+
    "\0\ua040\0\ua080\0\ua0c0\0\ua100\0\ua140\0\ua180\0\ua1c0\0\ua200"+
    "\0\ua240\0\ua280\0\ua2c0\0\ua300\0\ua340\0\ua380\0\ua3c0\0\ua400"+
    "\0\ua440\0\ua480\0\ua4c0\0\ua500\0\ua540\0\ua580\0\ua5c0\0\ua600"+
    "\0\ua640\0\ua680\0\ua6c0\0\ua700\0\ua740\0\ua780\0\ua7c0\0\ua800"+
    "\0\100\0\ua840\0\ua880\0\ua8c0\0\ua900\0\ua940\0\ua980\0\ua9c0"+
    "\0\uaa00\0\uaa40\0\uaa80\0\uaac0\0\uab00\0\uab40\0\uab80\0\uabc0"+
    "\0\uac00\0\uac40\0\uac80\0\uacc0\0\uad00\0\uad40\0\uad80\0\uadc0"+
    "\0\uae00\0\uae40\0\uae80\0\uaec0\0\uaf00\0\uaf40\0\uaf80\0\uafc0"+
    "\0\ub000\0\ub040\0\ub080\0\ub0c0\0\ub100\0\ub140\0\ub180\0\ub1c0"+
    "\0\ub200\0\ub240\0\ub280\0\ub2c0\0\ub300\0\ub340\0\ub380\0\ub3c0"+
    "\0\ub400\0\ub440\0\ub480\0\ub4c0\0\ub500\0\ub540\0\ub580\0\ub5c0"+
    "\0\ub600\0\ub640\0\ub680\0\ub6c0\0\ub700\0\ub740\0\ub780\0\ub7c0"+
    "\0\ub800\0\ub840\0\ub880\0\ub8c0\0\ub3c0\0\ub900\0\ub940\0\ub980"+
    "\0\ub9c0\0\uba00\0\uba40\0\uba80\0\ubac0\0\ubb00\0\ubb40\0\ubb80"+
    "\0\ubbc0\0\ubc00\0\ubc40\0\ubc80\0\ubcc0\0\ubd00\0\ubd40\0\ubd80"+
    "\0\ubdc0\0\ube00\0\ube40\0\100\0\ube80\0\ubec0\0\ubf00\0\ubf40"+
    "\0\ubf80\0\ubfc0\0\uc000\0\uc040\0\uc080\0\uc0c0\0\uc100\0\100"+
    "\0\uc140\0\uc180\0\uc1c0\0\uc200\0\uc240\0\uc280\0\uc2c0\0\100"+
    "\0\uc300\0\uc340\0\100\0\uc380\0\uc3c0\0\100\0\uc400\0\uc440"+
    "\0\100\0\uc480\0\uc4c0\0\100\0\uc500\0\uc540\0\uc580\0\uc5c0"+
    "\0\uc600\0\uc640\0\100\0\uc680\0\100\0\uc6c0\0\uc700\0\uc740"+
    "\0\uc780\0\uc7c0\0\uc800\0\uc840\0\100\0\uc880\0\100\0\100"+
    "\0\uc8c0\0\100\0\100\0\uc900\0\100\0\100\0\uc940\0\100"+
    "\0\uc980\0\100\0\uc9c0\0\100\0\uca00\0\100\0\uca40\0\uca80"+
    "\0\ucac0\0\ucb00\0\ucb40\0\ucb80\0\ucbc0\0\100\0\ucc00\0\100"+
    "\0\ucc40\0\ucc80\0\uccc0\0\ucd00\0\ucd40\0\ucd80\0\ucdc0\0\uce00"+
    "\0\uce40\0\uce80\0\ucec0\0\100\0\ucf00\0\ucf40\0\100\0\ucf80"+
    "\0\100\0\ucfc0\0\ud000\0\ud040\0\ud080\0\ud0c0\0\ud100\0\ud140"+
    "\0\ud180\0\ud1c0\0\ud200\0\100\0\100\0\ud240\0\100\0\100"+
    "\0\ud280\0\100\0\100\0\ud2c0\0\100\0\100\0\ud300\0\100"+
    "\0\ud340\0\ud380\0\100\0\100\0\ud3c0\0\100\0\100\0\ud400"+
    "\0\100\0\ud440\0\ud480\0\ud440\0\100\0\ud4c0\0\ud500\0\100"+
    "\0\ud540\0\100\0\100\0\ud580\0\100\0\ud5c0\0\ud600\0\ud640"+
    "\0\ud680\0\ud6c0\0\ud700\0\ud6c0\0\100\0\100\0\ud740\0\100"+
    "\0\100\0\ud780\0\100\0\ud7c0\0\ud800\0\ud7c0\0\100\0\ud840"+
    "\0\ud880\0\ud8c0\0\100\0\ud900\0\ud940\0\ud980\0\ud940\0\100"+
    "\0\ud9c0\0\100\0\uda00\0\uda40\0\uda80\0\uda40\0\100\0\100"+
    "\0\100\0\100\0\udac0\0\udb00\0\udb40\0\udb00\0\100\0\udb80"+
    "\0\udbc0\0\udb80\0\100\0\udc00\0\udc40\0\udc00\0\100\0\100"+
    "\0\udc80\0\100\0\100\0\udcc0\0\100\0\udd00\0\udd40\0\udd00"+
    "\0\100\0\udd80\0\uddc0\0\udd80\0\100\0\ude00\0\ude40\0\ude00"+
    "\0\100\0\ude80\0\udec0\0\ude80\0\100\0\udf00\0\udf40\0\udf00"+
    "\0\100\0\udf80\0\udfc0\0\udf80\0\100\0\ue000\0\ue040\0\ue000"+
    "\0\100\0\100\0\ue080\0\100\0\100\0\ue0c0\0\100\0\ue100"+
    "\0\ue140\0\ue100\0\100\0\ue180\0\ue1c0\0\ue180\0\100\0\100"+
    "\0\ue200\0\100\0\100\0\ue240\0\100\0\ue280\0\100\0\ue2c0"+
    "\0\100\0\ue300\0\ue340\0\ue300\0\100\0\ue380\0\ue3c0\0\ue380"+
    "\0\100\0\ue400\0\ue440\0\ue400\0\100\0\ue480\0\ue4c0\0\ue480"+
    "\0\100\0\ue500\0\ue540\0\100\0\ue580\0\ue5c0\0\100\0\ue600"+
    "\0\ue640\0\100\0\ue680\0\ue6c0\0\ue680\0\100\0\ue700\0\ue740"+
    "\0\ue700\0\100\0\ue780\0\ue7c0\0\ue780\0\100\0\ue800\0\ue840"+
    "\0\ue800\0\100\0\ue880\0\ue8c0\0\ue880\0\100\0\ue900\0\ue940"+
    "\0\ue980\0\ue940\0\100\0\ue9c0\0\uea00\0\ue9c0\0\100\0\uea40"+
    "\0\uea80\0\uea40\0\100\0\ueac0\0\ueb00\0\ueb40\0\ueb80\0\ueb40"+
    "\0\100\0\uebc0\0\uec00\0\uebc0\0\100\0\uec40\0\uec80\0\uecc0"+
    "\0\ued00\0\ued40\0\ued80\0\uedc0\0\uee00\0\uedc0\0\100\0\uee40"+
    "\0\uee80\0\uee40\0\100\0\100\0\100\0\100\0\ueec0\0\uef00"+
    "\0\ueec0\0\100\0\uef40\0\uef80\0\uef40\0\100\0\uefc0\0\uf000"+
    "\0\uefc0\0\100\0\uf040\0\uf080\0\uf040\0\100\0\uf0c0\0\uf100"+
    "\0\uf0c0\0\100\0\uf140\0\uf180\0\uf140\0\100\0\uf1c0\0\uf200"+
    "\0\uf1c0\0\100\0\uf240\0\uf280\0\uf240\0\100\0\uf2c0\0\uf300"+
    "\0\uf2c0\0\100\0\uf340\0\uf380\0\uf3c0\0\uf380\0\100\0\uf400"+
    "\0\uf440\0\uf480\0\uf440\0\100\0\uf4c0\0\uf500\0\uf540\0\uf500"+
    "\0\100\0\100\0\uf580\0\100\0\uf5c0\0\uf600\0\uf640\0\uf680"+
    "\0\uf6c0\0\100\0\100\0\100\0\100\0\uf700\0\uf740\0\100"+
    "\0\uf780\0\100\0\uf7c0\0\100\0\uf800\0\uf840\0\100\0\100"+
    "\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\0\1\20\1\21\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\27\1\30\1\31\2\0\1\32"+
    "\1\33\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\0\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\0\1\51\1\52\1\53\2\0\1\54\1\55\1\0"+
    "\1\4\1\0\1\56\102\0\1\2\110\0\62\57\3\0"+
    "\2\10\1\2\1\3\74\10\15\0\1\60\1\0\1\61"+
    "\11\0\1\62\4\0\1\63\57\0\1\64\1\0\1\65"+
    "\1\0\1\66\1\67\1\70\2\0\1\71\1\72\1\73"+
    "\1\0\1\74\1\0\1\75\1\76\2\0\1\77\53\0"+
    "\1\100\11\0\1\101\1\102\1\0\1\103\1\104\3\0"+
    "\1\105\54\0\1\106\3\0\1\107\110\0\1\110\1\111"+
    "\1\0\1\112\61\0\1\113\1\114\77\0\1\115\11\0"+
    "\1\116\76\0\1\117\5\0\1\120\60\0\1\121\16\0"+
    "\1\122\101\0\1\123\57\0\1\124\11\0\1\125\102\0"+
    "\1\126\100\0\1\127\1\0\1\130\71\0\1\131\4\0"+
    "\1\132\55\0\1\133\2\0\1\134\16\0\1\135\1\136"+
    "\1\0\1\137\51\0\1\140\1\141\2\0\1\142\12\0"+
    "\1\143\2\0\1\144\4\0\1\145\50\0\1\146\105\0"+
    "\1\147\123\0\1\150\1\0\1\151\10\0\1\152\4\0"+
    "\1\153\60\0\1\154\1\0\1\155\1\0\1\156\1\157"+
    "\1\160\1\0\1\161\1\162\1\163\1\0\1\164\1\0"+
    "\1\165\1\166\2\0\1\167\54\0\1\170\10\0\1\171"+
    "\1\172\1\0\1\173\1\174\3\0\1\175\55\0\1\176"+
    "\3\0\1\177\107\0\1\200\1\201\1\0\1\202\62\0"+
    "\1\203\1\204\77\0\1\205\10\0\1\206\76\0\1\207"+
    "\5\0\1\210\61\0\1\211\15\0\1\212\101\0\1\213"+
    "\60\0\1\214\10\0\1\215\102\0\1\216\100\0\1\217"+
    "\1\0\1\220\71\0\1\221\4\0\1\222\56\0\1\223"+
    "\2\0\1\224\15\0\1\225\1\226\1\0\1\227\52\0"+
    "\1\230\1\231\2\0\1\232\11\0\1\233\2\0\1\234"+
    "\4\0\1\235\51\0\1\236\105\0\1\237\37\0\62\240"+
    "\17\0\1\241\26\0\1\242\1\243\51\0\1\244\1\245"+
    "\77\0\1\246\107\0\1\247\5\0\1\250\60\0\1\251"+
    "\10\0\1\252\6\0\1\251\75\0\1\253\63\0\1\254"+
    "\16\0\1\255\64\0\1\256\11\0\1\251\100\0\1\257"+
    "\60\0\1\260\11\0\1\251\3\0\1\261\1\262\64\0"+
    "\1\263\73\0\1\264\106\0\1\265\64\0\1\266\1\0"+
    "\1\267\12\0\1\270\4\0\1\271\61\0\1\272\14\0"+
    "\1\260\60\0\1\273\17\0\1\274\55\0\1\275\101\0"+
    "\1\276\5\0\1\277\10\0\1\300\3\0\1\301\71\0"+
    "\1\302\74\0\1\303\66\0\1\304\23\0\1\305\1\306"+
    "\77\0\1\307\47\0\1\310\101\0\1\311\17\0\1\312"+
    "\4\0\1\313\1\314\52\0\1\315\115\0\1\316\102\0"+
    "\1\317\54\0\1\320\106\0\1\321\77\0\1\322\71\0"+
    "\1\323\17\0\1\324\4\0\1\325\1\326\66\0\1\327"+
    "\101\0\1\330\56\0\1\331\2\0\1\332\16\0\1\333"+
    "\4\0\1\334\1\335\62\0\1\336\5\0\1\337\71\0"+
    "\1\340\72\0\1\341\110\0\1\342\60\0\1\343\5\0"+
    "\1\344\100\0\1\345\103\0\1\346\77\0\1\347\5\0"+
    "\1\350\66\0\1\351\11\0\1\352\55\0\1\353\1\0"+
    "\1\354\77\0\1\355\5\0\1\356\14\0\1\357\52\0"+
    "\1\360\2\0\1\361\12\0\1\362\3\0\1\363\4\0"+
    "\1\364\1\365\50\0\1\366\106\0\1\367\70\0\1\370"+
    "\15\0\1\371\60\0\1\372\121\0\1\373\55\0\1\374"+
    "\122\0\1\375\3\0\1\376\72\0\1\377\65\0\1\u0100"+
    "\72\0\1\u0101\125\0\1\241\25\0\1\242\1\243\52\0"+
    "\1\u0102\1\u0103\77\0\1\u0104\106\0\1\u0105\5\0\1\u0106"+
    "\61\0\1\251\7\0\1\u0107\6\0\1\251\75\0\1\253"+
    "\64\0\1\254\15\0\1\255\65\0\1\256\10\0\1\251"+
    "\100\0\1\u0108\61\0\1\260\10\0\1\251\3\0\1\261"+
    "\1\262\65\0\1\263\73\0\1\264\105\0\1\265\65\0"+
    "\1\266\1\0\1\u0109\11\0\1\270\4\0\1\u010a\62\0"+
    "\1\u010b\13\0\1\260\61\0\1\273\16\0\1\274\56\0"+
    "\1\275\101\0\1\276\5\0\1\277\7\0\1\u010c\3\0"+
    "\1\301\71\0\1\u010d\74\0\1\u010e\67\0\1\304\22\0"+
    "\1\305\1\306\77\0\1\307\50\0\1\310\101\0\1\u010f"+
    "\16\0\1\312\4\0\1\313\1\314\53\0\1\315\114\0"+
    "\1\u0110\102\0\1\317\55\0\1\320\106\0\1\u0111\77\0"+
    "\1\u0112\71\0\1\u0113\16\0\1\324\4\0\1\325\1\326"+
    "\66\0\1\327\101\0\1\330\57\0\1\u0114\2\0\1\332"+
    "\15\0\1\333\4\0\1\334\1\335\62\0\1\u0115\5\0"+
    "\1\u0116\71\0\1\340\73\0\1\u0117\107\0\1\342\61\0"+
    "\1\u0118\5\0\1\344\100\0\1\u0119\102\0\1\u011a\77\0"+
    "\1\u011b\5\0\1\u011c\67\0\1\351\10\0\1\352\56\0"+
    "\1\353\1\0\1\u011d\77\0\1\355\5\0\1\356\13\0"+
    "\1\357\53\0\1\u011e\2\0\1\361\11\0\1\u011f\3\0"+
    "\1\363\4\0\1\364\1\365\51\0\1\u0120\106\0\1\367"+
    "\70\0\1\370\14\0\1\371\61\0\1\372\120\0\1\u0121"+
    "\56\0\1\374\121\0\1\u0122\3\0\1\376\72\0\1\377"+
    "\66\0\1\u0100\72\0\1\u0123\42\0\62\u0124\17\0\1\u0125"+
    "\1\u0126\76\0\1\u0127\1\u0128\1\0\1\u0129\74\0\1\u012a"+
    "\1\u012b\76\0\1\u012c\1\u012d\1\0\1\u012e\61\0\2\u012f"+
    "\1\u0130\1\u012f\1\0\1\u0131\5\0\1\u0132\1\u0133\117\0"+
    "\1\u0134\56\0\1\u0135\1\u0136\111\0\1\u0137\70\0\1\u0138"+
    "\116\0\1\u0139\41\0\2\u013a\1\u013b\1\u013a\1\0\1\u013c"+
    "\5\0\1\u013d\1\u013e\76\0\1\u013f\1\u0140\63\0\2\u0141"+
    "\1\u0142\1\u0141\1\0\1\u0143\5\0\1\u0144\1\u0145\63\0"+
    "\2\u0146\1\u0147\1\u0146\1\0\1\u0148\72\0\2\u0149\1\u014a"+
    "\1\u0149\1\0\1\u014b\72\0\2\u014c\1\u014d\1\u014c\1\0"+
    "\1\u014e\72\0\2\u014f\1\u0150\1\u014f\74\0\2\u0151\1\u0152"+
    "\1\u0151\1\0\1\u0153\5\0\1\u0154\1\u0155\76\0\1\u0156"+
    "\1\u0157\123\0\1\u0158\77\0\1\u0159\37\0\2\u015a\1\u015b"+
    "\1\u015a\1\0\1\u015c\5\0\1\u015d\1\u015e\63\0\2\u015f"+
    "\1\u0160\1\u015f\1\0\1\u0161\72\0\2\u0162\1\u0163\1\u0162"+
    "\1\0\1\u0164\105\0\1\u0165\1\u0166\63\0\2\u0167\1\u0168"+
    "\1\u0167\1\0\1\u0169\72\0\2\u016a\1\u016b\1\u016a\1\0"+
    "\1\u016c\72\0\2\u016d\1\u016e\1\u016d\1\0\1\u016f\72\0"+
    "\2\u0170\1\u0171\1\u0170\1\0\1\u0172\72\0\2\u0173\1\u0174"+
    "\1\u0173\1\0\1\u0175\5\0\1\u012c\1\u012d\1\0\1\u012e"+
    "\61\0\2\u0176\1\u0177\1\u0176\1\0\1\u0178\5\0\1\u0179"+
    "\1\u017a\1\0\1\u017b\61\0\2\u017c\1\u017d\1\u017c\1\0"+
    "\1\u017e\5\0\1\u017f\1\u0180\76\0\1\u0181\1\u0182\76\0"+
    "\1\u0183\1\u0184\25\0\1\u0185\1\u0186\47\0\1\u0187\1\u0188"+
    "\25\0\1\u0189\1\u018a\34\0\2\u018b\1\u018c\1\u018b\1\0"+
    "\1\u018d\5\0\1\u018e\1\u018f\63\0\2\u0190\1\u0191\1\u0190"+
    "\1\0\1\u0192\5\0\1\u0193\1\u0194\76\0\1\u0195\1\u0196"+
    "\76\0\1\u0197\1\u0198\63\0\2\u0199\1\u019a\1\u0199\1\0"+
    "\1\u019b\124\0\1\u019c\45\0\2\u019d\1\u019e\1\u019d\1\0"+
    "\1\u019f\72\0\2\u01a0\1\u01a1\1\u01a0\1\0\1\u01a2\72\0"+
    "\2\u01a3\1\u01a4\1\u01a3\1\0\1\u01a5\105\0\1\u01a6\1\u01a7"+
    "\1\0\1\u01a8\117\0\1\u01a9\41\0\2\u01aa\1\u01ab\1\u01aa"+
    "\1\0\1\u01ac\5\0\1\u01ad\1\u01ae\125\0\1\u01af\1\u01b0"+
    "\100\0\1\u0125\1\u0126\76\0\1\u0127\1\u0128\1\0\1\u0129"+
    "\74\0\1\u012a\1\u012b\76\0\1\u012c\1\u012d\1\0\1\u012e"+
    "\30\0\2\u012f\1\u0130\1\u012f\1\0\1\u0131\36\0\1\u0132"+
    "\1\u0133\116\0\1\u0134\57\0\1\u0135\1\u0136\110\0\1\u01b1"+
    "\71\0\1\u01b2\115\0\1\u0139\11\0\2\u013a\1\u013b\1\u013a"+
    "\40\0\1\u013d\1\u013e\76\0\1\u013f\1\u0140\32\0\2\u0141"+
    "\1\u0142\1\u0141\1\0\1\u0143\36\0\1\u0144\1\u0145\32\0"+
    "\2\u0151\1\u0152\1\u0151\1\0\1\u0153\36\0\1\u0154\1\u0155"+
    "\76\0\1\u0156\1\u0157\122\0\1\u0158\77\0\1\u0159\7\0"+
    "\2\u015a\1\u015b\1\u015a\1\0\1\u015c\36\0\1\u015d\1\u015e"+
    "\76\0\1\u0165\1\u0166\32\0\2\u0173\1\u0174\1\u0173\1\0"+
    "\1\u0175\36\0\1\u012c\1\u012d\1\0\1\u012e\30\0\2\u0176"+
    "\1\u0177\1\u0176\1\0\1\u0178\36\0\1\u0179\1\u017a\1\0"+
    "\1\u017b\30\0\2\u017c\1\u017d\1\u017c\1\0\1\u017e\36\0"+
    "\1\u017f\1\u0180\76\0\1\u0181\1\u0182\76\0\1\u0183\1\u0184"+
    "\24\0\1\u0185\1\u0186\50\0\1\u0187\1\u0188\24\0\1\u0189"+
    "\1\u018a\4\0\2\u018b\1\u018c\1\u018b\1\0\1\u018d\36\0"+
    "\1\u018e\1\u018f\32\0\2\u0190\1\u0191\1\u0190\1\0\1\u0192"+
    "\36\0\1\u0193\1\u0194\76\0\1\u0195\1\u0196\76\0\1\u01b3"+
    "\1\u0198\114\0\1\u019c\61\0\1\u01a6\1\u01a7\1\0\1\u01a8"+
    "\116\0\1\u01a9\11\0\2\u01aa\1\u01ab\1\u01aa\1\0\1\u01ac"+
    "\36\0\1\u01ad\1\u01ae\124\0\1\u01af\1\u01b0\16\0\62\u01b4"+
    "\4\0\2\u01b5\1\u01b6\1\u01b5\1\0\1\u01b7\72\0\2\u01b8"+
    "\1\u01b9\1\u01b8\1\0\1\u01ba\72\0\2\u01bb\1\u01bc\1\u01bb"+
    "\1\0\1\u01bd\72\0\2\u01be\1\u01bf\1\u01be\1\0\1\u01c0"+
    "\72\0\2\u01c1\1\u01c2\1\u01c1\1\0\1\u01c3\72\0\2\u01c4"+
    "\1\u01c5\1\u01c4\1\0\1\u01c6\72\0\2\u01c7\1\u01c8\1\u01c7"+
    "\1\0\1\u01c9\77\0\1\u01ca\73\0\1\u012f\3\0\1\u01ca"+
    "\104\0\62\u01cb\4\0\2\u01cc\1\u01cd\1\u01cc\1\0\1\u01ce"+
    "\72\0\2\u01cf\1\u01d0\1\u01cf\1\0\1\u01d1\72\0\2\u01d2"+
    "\1\u01d3\1\u01d2\1\0\1\u01d4\126\0\1\u01d5\101\0\1\u01d6"+
    "\41\0\2\u01d7\1\u01d8\1\u01d7\1\0\1\u01d9\77\0\1\u01da"+
    "\73\0\1\u013a\3\0\1\u01da\104\0\62\u01db\4\0\2\u01dc"+
    "\1\u01dd\1\u01dc\1\0\1\u01de\72\0\2\u01df\1\u01e0\1\u01df"+
    "\1\0\1\u01e1\77\0\1\u01e2\73\0\1\u0141\3\0\1\u01e2"+
    "\104\0\62\u01e3\10\0\1\u01e4\1\u01e5\73\0\1\u0146\2\0"+
    "\1\u01e4\1\u01e5\104\0\62\u01e6\10\0\1\u01e7\1\u01e8\73\0"+
    "\1\u0149\2\0\1\u01e7\1\u01e8\104\0\62\u01e9\10\0\1\u01ea"+
    "\1\u01eb\73\0\1\u014c\2\0\1\u01ea\1\u01eb\104\0\62\u01ec"+
    "\11\0\1\u01ed\73\0\1\u014f\3\0\1\u01ed\77\0\1\u01ee"+
    "\73\0\1\u0151\3\0\1\u01ee\104\0\62\u01ef\4\0\2\u01f0"+
    "\1\u01f1\1\u01f0\1\0\1\u01f2\72\0\2\u01f3\1\u01f4\1\u01f3"+
    "\1\0\1\u01f5\77\0\1\u01f6\73\0\1\u015a\3\0\1\u01f6"+
    "\104\0\62\u01f7\11\0\1\u01f8\73\0\1\u015f\3\0\1\u01f8"+
    "\104\0\62\u01f9\11\0\1\u01fa\73\0\1\u0162\3\0\1\u01fa"+
    "\104\0\62\u01fb\4\0\2\u01fc\1\u01fd\1\u01fc\1\0\1\u01fe"+
    "\72\0\2\u01ff\1\u0200\1\u01ff\1\0\1\u0201\76\0\1\u0202"+
    "\1\u0203\73\0\1\u0167\2\0\1\u0202\1\u0203\104\0\62\u0204"+
    "\10\0\1\u0205\1\u0206\73\0\1\u016a\2\0\1\u0205\1\u0206"+
    "\104\0\62\u0207\10\0\1\u0208\1\u0209\73\0\1\u016d\2\0"+
    "\1\u0208\1\u0209\104\0\62\u020a\10\0\1\u020b\1\u020c\73\0"+
    "\1\u0170\2\0\1\u020b\1\u020c\104\0\62\u020d\11\0\1\u020e"+
    "\73\0\1\u0173\3\0\1\u020e\104\0\62\u020f\11\0\1\u0210"+
    "\73\0\1\u0176\3\0\1\u0210\104\0\62\u0211\11\0\1\u0212"+
    "\73\0\1\u017c\3\0\1\u0212\104\0\62\u0213\4\0\2\u0214"+
    "\1\u0215\1\u0214\1\0\1\u0216\72\0\2\u0217\1\u0218\1\u0217"+
    "\1\0\1\u0219\77\0\1\u021a\73\0\1\u018b\3\0\1\u021a"+
    "\104\0\62\u021b\11\0\1\u021c\73\0\1\u0190\3\0\1\u021c"+
    "\104\0\62\u021d\4\0\2\u021e\1\u021f\1\u021e\1\0\1\u0220"+
    "\72\0\2\u0221\1\u0222\1\u0221\1\0\1\u0223\72\0\2\u0224"+
    "\1\u0225\1\u0224\1\0\1\u0226\72\0\2\u0227\1\u0228\1\u0227"+
    "\1\0\1\u0229\77\0\1\u022a\73\0\1\u0199\3\0\1\u022a"+
    "\104\0\62\u022b\11\0\1\u022c\73\0\1\u019d\3\0\1\u022c"+
    "\104\0\62\u022d\11\0\1\u022e\73\0\1\u01a0\3\0\1\u022e"+
    "\104\0\62\u022f\11\0\1\u0230\73\0\1\u01a3\3\0\1\u0230"+
    "\104\0\62\u0231\4\0\2\u0232\1\u0233\1\u0232\1\0\1\u0234"+
    "\72\0\2\u0235\1\u0236\1\u0235\1\0\1\u0237\72\0\2\u0238"+
    "\1\u0239\1\u0238\1\0\1\u023a\77\0\1\u023b\73\0\1\u01aa"+
    "\3\0\1\u023b\104\0\62\u023c\70\0\1\u01d5\101\0\1\u01d6"+
    "\11\0\2\u0224\1\u0225\1\u0224\1\0\1\u023d\76\0\1\u023e"+
    "\1\u023f\73\0\1\u01b5\2\0\1\u023e\1\u023f\104\0\62\u0240"+
    "\10\0\1\u0241\1\u0242\73\0\1\u01b8\2\0\1\u0241\1\u0242"+
    "\104\0\62\u0243\10\0\1\u0244\1\u0245\73\0\1\u01bb\2\0"+
    "\1\u0244\1\u0245\104\0\62\u0246\10\0\1\u0247\1\u0248\73\0"+
    "\1\u01be\2\0\1\u0247\1\u0248\104\0\62\u0249\10\0\1\u024a"+
    "\1\u024b\73\0\1\u01c1\2\0\1\u024a\1\u024b\104\0\62\u024c"+
    "\10\0\1\u024d\1\u024e\73\0\1\u01c4\2\0\1\u024d\1\u024e"+
    "\104\0\62\u024f\10\0\1\u0250\1\u0251\73\0\1\u01c7\2\0"+
    "\1\u0250\1\u0251\104\0\62\u0252\16\0\62\u0253\16\0\62\u0254"+
    "\11\0\1\u01ce\73\0\1\u01cc\3\0\1\u01ce\104\0\62\u0255"+
    "\10\0\1\u0256\1\u0257\73\0\1\u01cf\2\0\1\u0256\1\u0257"+
    "\104\0\62\u0258\10\0\1\u0259\1\u025a\73\0\1\u01d2\2\0"+
    "\1\u0259\1\u025a\104\0\62\u025b\4\0\2\u025c\1\u025d\1\u025c"+
    "\1\0\1\u025e\72\0\2\u025f\1\u0260\1\u025f\1\0\1\u0261"+
    "\77\0\1\u01d9\73\0\1\u01d7\3\0\1\u01d9\104\0\62\u0262"+
    "\16\0\62\u0263\16\0\62\u0264\10\0\1\u0265\1\u0266\73\0"+
    "\1\u01dc\2\0\1\u0265\1\u0266\104\0\62\u0267\10\0\1\u0268"+
    "\1\u0269\73\0\1\u01df\2\0\1\u0268\1\u0269\104\0\62\u026a"+
    "\16\0\62\u026b\16\0\62\u026c\11\0\1\u026d\104\0\62\u026e"+
    "\16\0\62\u026f\11\0\1\u0270\104\0\62\u0271\16\0\62\u0272"+
    "\11\0\1\u0273\104\0\62\u0274\16\0\62\u0275\16\0\62\u0276"+
    "\16\0\62\u0277\16\0\62\u0278\10\0\1\u0279\1\u027a\73\0"+
    "\1\u01f0\2\0\1\u0279\1\u027a\104\0\62\u027b\10\0\1\u027c"+
    "\1\u027d\73\0\1\u01f3\2\0\1\u027c\1\u027d\104\0\62\u027e"+
    "\16\0\62\u027f\16\0\62\u0280\16\0\62\u0281\16\0\62\u0282"+
    "\16\0\62\u0283\16\0\62\u0284\10\0\1\u0285\1\u0286\73\0"+
    "\1\u01fc\2\0\1\u0285\1\u0286\104\0\62\u0287\10\0\1\u0288"+
    "\1\u0289\73\0\1\u01ff\2\0\1\u0288\1\u0289\104\0\62\u028a"+
    "\11\0\1\u028b\104\0\62\u028c\16\0\62\u028d\11\0\1\u028e"+
    "\104\0\62\u028f\16\0\62\u0290\11\0\1\u0291\104\0\62\u0292"+
    "\16\0\62\u0293\11\0\1\u0294\104\0\62\u0295\16\0\62\u0296"+
    "\16\0\62\u0297\16\0\62\u0298\16\0\62\u0299\16\0\62\u029a"+
    "\16\0\62\u029b\16\0\62\u029c\10\0\1\u029d\1\u029e\73\0"+
    "\1\u0214\2\0\1\u029d\1\u029e\104\0\62\u029f\10\0\1\u02a0"+
    "\1\u02a1\73\0\1\u0217\2\0\1\u02a0\1\u02a1\104\0\62\u02a2"+
    "\16\0\62\u02a3\16\0\62\u02a4\16\0\62\u02a5\16\0\62\u02a6"+
    "\10\0\1\u02a7\1\u02a8\73\0\1\u021e\2\0\1\u02a7\1\u02a8"+
    "\104\0\62\u02a9\10\0\1\u02aa\1\u02ab\73\0\1\u0221\2\0"+
    "\1\u02aa\1\u02ab\104\0\62\u02ac\11\0\1\u02ad\73\0\1\u0224"+
    "\3\0\1\u02ad\104\0\62\u02ae\11\0\1\u02af\73\0\1\u0227"+
    "\3\0\1\u02af\104\0\62\u02b0\16\0\62\u02b1\16\0\62\u02b2"+
    "\16\0\62\u02b3\16\0\62\u02b4\16\0\62\u02b5\16\0\62\u02b6"+
    "\16\0\62\u02b7\16\0\62\u02b8\10\0\1\u02b9\1\u02ba\73\0"+
    "\1\u0232\2\0\1\u02b9\1\u02ba\104\0\62\u02bb\10\0\1\u02bc"+
    "\1\u02bd\73\0\1\u0235\2\0\1\u02bc\1\u02bd\104\0\62\u02be"+
    "\10\0\1\u02bf\1\u02c0\73\0\1\u0238\2\0\1\u02bf\1\u02c0"+
    "\104\0\62\u02c1\16\0\62\u02c2\16\0\62\u02c3\16\0\62\u02c4"+
    "\11\0\1\u02c5\104\0\62\u02c6\16\0\62\u02c7\11\0\1\u02c8"+
    "\104\0\62\u02c9\16\0\62\u02ca\11\0\1\u02cb\104\0\62\u02cc"+
    "\16\0\62\u02cd\11\0\1\u02ce\104\0\62\u02cf\16\0\62\u02d0"+
    "\11\0\1\u02d1\104\0\62\u02d2\16\0\62\u02d3\11\0\1\u02d4"+
    "\104\0\62\u02d5\16\0\62\u02d6\11\0\1\u02d7\104\0\62\u02d8"+
    "\16\0\62\u02d9\16\0\62\u02da\16\0\62\u02db\16\0\62\u02dc"+
    "\11\0\1\u02dd\104\0\62\u02de\16\0\62\u02df\11\0\1\u02e0"+
    "\104\0\62\u02e1\16\0\62\u02e2\11\0\1\u025e\73\0\1\u025c"+
    "\3\0\1\u025e\104\0\62\u02e3\11\0\1\u0261\73\0\1\u025f"+
    "\3\0\1\u0261\104\0\62\u02e4\16\0\62\u02e5\16\0\62\u02e6"+
    "\16\0\62\u02e7\11\0\1\u02e8\104\0\62\u02e9\16\0\62\u02ea"+
    "\11\0\1\u02eb\104\0\62\u02ec\16\0\62\u02ed\16\0\62\u02ee"+
    "\16\0\62\u02ef\16\0\62\u02f0\16\0\62\u02f1\16\0\62\u02f2"+
    "\16\0\62\u02f3\16\0\62\u02f4\16\0\62\u02f5\16\0\62\u02f6"+
    "\16\0\62\u02f7\16\0\62\u02f8\16\0\62\u02f9\16\0\62\u02fa"+
    "\16\0\62\u02fb\11\0\1\u02fc\104\0\62\u02fd\16\0\62\u02fe"+
    "\11\0\1\u02ff\104\0\62\u0300\16\0\62\u0301\16\0\62\u0302"+
    "\16\0\62\u0303\16\0\62\u0304\16\0\62\u0305\16\0\62\u0306"+
    "\11\0\1\u0307\104\0\62\u0308\16\0\62\u0309\11\0\1\u030a"+
    "\104\0\62\u030b\16\0\62\u030c\16\0\62\u030d\16\0\62\u030e"+
    "\16\0\62\u030f\16\0\62\u0310\16\0\62\u0311\16\0\62\u0312"+
    "\16\0\62\u0313\16\0\62\u0314\16\0\62\u0315\16\0\62\u0316"+
    "\16\0\62\u0317\16\0\62\u0318\16\0\62\u0319\16\0\62\u031a"+
    "\16\0\62\u031b\16\0\62\u031c\16\0\62\u031d\16\0\62\u031e"+
    "\11\0\1\u031f\104\0\62\u0320\16\0\62\u0321\11\0\1\u0322"+
    "\104\0\62\u0323\16\0\62\u0324\16\0\62\u0325\16\0\62\u0326"+
    "\16\0\62\u0327\16\0\62\u0328\11\0\1\u0329\104\0\62\u032a"+
    "\16\0\62\u032b\11\0\1\u032c\104\0\62\u032d\16\0\62\u032e"+
    "\16\0\62\u032f\16\0\62\u0330\16\0\62\u0331\16\0\62\u0332"+
    "\16\0\62\u0333\16\0\62\u0334\16\0\62\u0335\16\0\62\u0336"+
    "\16\0\62\u0337\16\0\62\u0338\16\0\62\u0339\11\0\1\u033a"+
    "\104\0\62\u033b\16\0\62\u033c\11\0\1\u033d\104\0\62\u033e"+
    "\16\0\62\u033f\11\0\1\u0340\104\0\62\u0341\16\0\62\u0342"+
    "\16\0\62\u0343\16\0\62\u0344\16\0\62\u0345\16\0\62\u0346"+
    "\16\0\62\u0347\16\0\62\u0348\16\0\62\u0349\16\0\62\u034a"+
    "\16\0\62\u034b\16\0\62\u034c\16\0\62\u034d\16\0\62\u034e"+
    "\16\0\62\u034f\16\0\62\u0350\16\0\62\u0351\16\0\62\u0352"+
    "\16\0\62\u0353\16\0\62\u0354\16\0\62\u0355\16\0\62\u0356"+
    "\16\0\62\u0357\16\0\62\u0358\16\0\62\u0359\16\0\62\u035a"+
    "\15\0\1\u035b\62\u02db\16\0\62\u035c\15\0\1\u035d\100\0"+
    "\62\u035e\16\0\62\u035f\16\0\62\u0360\16\0\62\u0361\16\0"+
    "\62\u0362\16\0\62\u0363\16\0\62\u0364\16\0\62\u0365\15\0"+
    "\1\u0366\77\0\1\u0367\62\u02e7\16\0\62\u0368\16\0\62\u0369"+
    "\16\0\62\u036a\16\0\62\u036b\16\0\62\u036c\16\0\62\u036d"+
    "\16\0\62\u036e\15\0\1\u036f\62\u02ef\16\0\62\u0370\16\0"+
    "\62\u0371\15\0\1\u0372\62\u02f2\16\0\62\u0373\16\0\62\u0374"+
    "\15\0\1\u0375\62\u02f5\16\0\62\u0376\16\0\62\u0377\15\0"+
    "\1\u0378\62\u02f8\16\0\62\u0379\15\0\1\u037a\77\0\1\u037b"+
    "\62\u02fb\16\0\62\u037c\16\0\62\u037d\16\0\62\u037e\16\0"+
    "\62\u037f\16\0\62\u0380\16\0\62\u0381\15\0\1\u0382\62\u0303"+
    "\16\0\62\u0383\15\0\1\u0384\62\u0305\16\0\62\u0385\15\0"+
    "\1\u0386\100\0\62\u0387\16\0\62\u0388\16\0\62\u0389\16\0"+
    "\62\u038a\16\0\62\u038b\16\0\62\u038c\16\0\62\u038d\15\0"+
    "\1\u038e\62\u030f\16\0\62\u038f\16\0\62\u0390\15\0\1\u0391"+
    "\62\u0312\16\0\62\u0392\16\0\62\u0393\15\0\1\u0394\62\u0315"+
    "\16\0\62\u0395\16\0\62\u0396\15\0\1\u0397\62\u0318\16\0"+
    "\62\u0398\15\0\1\u0399\62\u031a\16\0\62\u039a\15\0\1\u039b"+
    "\62\u031c\16\0\62\u039c\15\0\1\u039d\62\u031e\16\0\62\u039e"+
    "\16\0\62\u039f\16\0\62\u03a0\16\0\62\u03a1\16\0\62\u03a2"+
    "\16\0\62\u03a3\16\0\62\u03a4\15\0\1\u03a5\62\u0326\16\0"+
    "\62\u03a6\15\0\1\u03a7\62\u0328\16\0\62\u03a8\16\0\62\u03a9"+
    "\16\0\62\u03aa\16\0\62\u03ab\16\0\62\u03ac\16\0\62\u03ad"+
    "\16\0\62\u03ae\16\0\62\u03af\16\0\62\u03b0\16\0\62\u03b1"+
    "\16\0\62\u03b2\15\0\1\u03b3\62\u0334\16\0\62\u03b4\15\0"+
    "\1\u03b5\77\0\1\u03b6\62\u0337\16\0\62\u03b7\15\0\1\u03b8"+
    "\62\u0339\16\0\62\u03b9\16\0\62\u03ba\16\0\62\u03bb\16\0"+
    "\62\u03bc\16\0\62\u03bd\16\0\62\u03be\16\0\62\u03bf\16\0"+
    "\62\u03c0\16\0\62\u03c1\16\0\62\u03c2\15\0\1\u03c3\62\u0344"+
    "\16\0\62\u03c4\16\0\62\u03c5\15\0\1\u03c6\62\u0348\16\0"+
    "\62\u03c7\16\0\62\u03c8\15\0\1\u03c9\62\u034b\16\0\62\u03ca"+
    "\16\0\62\u03cb\15\0\1\u03cc\62\u034e\16\0\62\u03cd\16\0"+
    "\62\u03ce\15\0\1\u03cf\62\u0351\16\0\62\u03d0\16\0\62\u03d1"+
    "\15\0\1\u03d2\62\u0354\16\0\62\u03d3\16\0\62\u03d4\15\0"+
    "\1\u03d5\62\u0357\16\0\62\u03d6\16\0\62\u03d7\15\0\1\u03d8"+
    "\62\u035a\16\0\62\u03d9\4\0\2\u03da\1\u03db\1\u03dc\36\0"+
    "\2\u03dd\26\0\2\u03dd\1\0\1\u03dd\5\0\1\u03de\1\u03df"+
    "\35\0\2\u03de\26\0\2\u03de\1\0\1\u03de\14\0\62\u03e0"+
    "\15\0\1\u03e1\62\u0360\16\0\62\u03e2\16\0\62\u03e3\15\0"+
    "\1\u03e4\62\u0363\16\0\62\u03e5\15\0\1\u03e6\77\0\1\u03e7"+
    "\71\0\1\u03e8\1\u03e9\35\0\2\u03e8\26\0\2\u03e8\1\0"+
    "\1\u03e8\2\0\2\u03ea\1\u03eb\1\u03ec\36\0\2\u03ed\26\0"+
    "\2\u03ed\1\0\1\u03ed\14\0\62\u03ee\15\0\1\u03ef\62\u036b"+
    "\16\0\62\u03f0\16\0\62\u03f1\15\0\1\u03f2\62\u036e\16\0"+
    "\62\u03f3\4\0\2\u03f4\1\u03f5\1\u03f6\36\0\2\u03f7\26\0"+
    "\2\u03f7\1\0\1\u03f7\14\0\62\u03f8\4\0\2\u03f9\1\u03fa"+
    "\1\u03f9\7\0\61\u03fb\16\0\62\u03fc\4\0\2\u03fd\1\u03fe"+
    "\1\u03ff\36\0\2\u0400\26\0\2\u0400\1\0\1\u0400\14\0"+
    "\62\u0401\7\0\1\u0402\36\0\2\u0402\26\0\2\u0402\1\0"+
    "\1\u0402\2\0\2\u0378\1\u0403\1\u0378\74\0\2\u0404\1\u0405"+
    "\1\u0406\36\0\2\u0407\26\0\2\u0407\1\0\1\u0407\14\0"+
    "\62\u0408\15\0\1\u0399\62\u037f\16\0\62\u0409\16\0\62\u040a"+
    "\15\0\1\u040b\66\0\2\u040c\1\u040d\1\u040e\36\0\2\u040f"+
    "\26\0\2\u040f\1\0\1\u040f\2\0\2\u0410\1\u0411\1\u0412"+
    "\36\0\2\u0413\26\0\2\u0413\1\0\1\u0413\2\0\2\u0414"+
    "\1\u0415\1\u0416\36\0\2\u0417\26\0\2\u0417\1\0\1\u0417"+
    "\14\0\62\u0418\15\0\1\u0419\62\u0389\16\0\62\u041a\16\0"+
    "\62\u041b\15\0\1\u041c\62\u038c\16\0\62\u041d\4\0\2\u041e"+
    "\1\u041f\1\u0420\36\0\2\u0421\26\0\2\u0421\1\0\1\u0421"+
    "\2\0\2\u0422\1\u0423\1\u0424\36\0\2\u0425\26\0\2\u0425"+
    "\1\0\1\u0425\2\0\2\u0426\1\u0427\1\u0428\36\0\2\u0429"+
    "\26\0\2\u0429\1\0\1\u0429\2\0\2\u042a\1\u042b\1\u042c"+
    "\36\0\2\u042d\26\0\2\u042d\1\0\1\u042d\2\0\2\u042e"+
    "\1\u042f\1\u0430\36\0\2\u0431\26\0\2\u0431\1\0\1\u0431"+
    "\2\0\2\u0432\1\u0433\1\u0434\36\0\2\u0435\26\0\2\u0435"+
    "\1\0\1\u0435\2\0\2\u0436\1\u0437\1\u0438\36\0\2\u0439"+
    "\26\0\2\u0439\1\0\1\u0439\14\0\62\u043a\15\0\1\u043b"+
    "\62\u03a1\16\0\62\u043c\16\0\62\u043d\15\0\1\u043e\62\u03a4"+
    "\16\0\62\u043f\4\0\2\u0440\1\u0441\1\u0442\36\0\2\u0443"+
    "\26\0\2\u0443\1\0\1\u0443\2\0\2\u0444\1\u0445\1\u0446"+
    "\36\0\2\u0447\26\0\2\u0447\1\0\1\u0447\14\0\62\u0448"+
    "\15\0\1\u0449\62\u03ab\16\0\62\u044a\16\0\62\u044b\15\0"+
    "\1\u044c\62\u03ae\16\0\62\u044d\15\0\1\u044e\62\u03b0\16\0"+
    "\62\u044f\15\0\1\u0450\62\u03b2\16\0\62\u0451\4\0\2\u0452"+
    "\1\u0453\1\u0454\36\0\2\u0455\26\0\2\u0455\1\0\1\u0455"+
    "\2\0\2\u0456\1\u0457\1\u0458\36\0\2\u0459\26\0\2\u0459"+
    "\1\0\1\u0459\2\0\2\u045a\1\u045b\1\u045c\36\0\2\u045d"+
    "\26\0\2\u045d\1\0\1\u045d\2\0\2\u045e\1\u045f\1\u0460"+
    "\36\0\2\u0461\26\0\2\u0461\1\0\1\u0461\14\0\62\u0462"+
    "\15\0\1\u0463\62\u03bc\16\0\62\u0464\16\0\62\u0465\15\0"+
    "\1\u0466\62\u03bf\16\0\62\u0467\16\0\62\u0468\15\0\1\u0469"+
    "\62\u03c2\16\0\62\u046a\4\0\2\u046b\1\u046c\1\u046d\36\0"+
    "\2\u046e\26\0\2\u046e\1\0\1\u046e\2\0\2\u046f\1\u0470"+
    "\1\u0471\36\0\2\u0472\26\0\2\u0472\1\0\1\u0472\2\0"+
    "\2\u0473\1\u0474\1\u0475\36\0\2\u0476\26\0\2\u0476\1\0"+
    "\1\u0476\2\0\2\u0477\1\u0478\1\u0479\36\0\2\u047a\26\0"+
    "\2\u047a\1\0\1\u047a\2\0\2\u047b\1\u047c\1\u047d\36\0"+
    "\2\u047e\26\0\2\u047e\1\0\1\u047e\14\0\62\u047f\4\0"+
    "\2\u0480\1\u0481\1\u0482\36\0\2\u0483\26\0\2\u0483\1\0"+
    "\1\u0483\2\0\2\u0484\1\u0485\1\u0486\36\0\2\u0487\26\0"+
    "\2\u0487\1\0\1\u0487\2\0\2\u0488\1\u0489\1\u048a\36\0"+
    "\2\u048b\26\0\2\u048b\1\0\1\u048b\5\0\1\u03dd\36\0"+
    "\2\u03dd\26\0\2\u03dd\1\0\1\u03dd\3\0\1\u03da\1\0"+
    "\1\u03dd\36\0\2\u03dd\26\0\2\u03dd\1\0\1\u03dd\13\0"+
    "\1\u048c\100\0\62\u048d\4\0\2\u048e\1\u048f\1\u0490\36\0"+
    "\2\u0491\26\0\2\u0491\1\0\1\u0491\2\0\2\u0492\1\u0493"+
    "\1\u0494\36\0\2\u0495\26\0\2\u0495\1\0\1\u0495\5\0"+
    "\1\u0496\1\u0497\35\0\2\u0496\26\0\2\u0496\1\0\1\u0496"+
    "\5\0\1\u0498\1\u0499\35\0\2\u0498\26\0\2\u0498\1\0"+
    "\1\u0498\13\0\1\u049a\100\0\62\u049b\7\0\1\u03ed\36\0"+
    "\2\u03ed\26\0\2\u03ed\1\0\1\u03ed\3\0\1\u03ea\1\0"+
    "\1\u03ed\36\0\2\u03ed\26\0\2\u03ed\1\0\1\u03ed\2\0"+
    "\2\u049c\1\u049d\1\u049e\36\0\2\u049f\26\0\2\u049f\1\0"+
    "\1\u049f\2\0\2\u04a0\1\u04a1\1\u04a2\36\0\2\u04a3\26\0"+
    "\2\u04a3\1\0\1\u04a3\5\0\1\u03f7\36\0\2\u03f7\26\0"+
    "\2\u03f7\1\0\1\u03f7\3\0\1\u03f4\1\0\1\u03f7\36\0"+
    "\2\u03f7\26\0\2\u03f7\1\0\1\u03f7\14\0\62\u04a4\7\0"+
    "\1\u03fb\36\0\2\u03fb\26\0\2\u03fb\1\0\1\u03fb\3\0"+
    "\1\u03f9\1\0\1\u03fb\36\0\2\u03fb\26\0\2\u03fb\1\0"+
    "\1\u03fb\14\0\62\u04a5\7\0\1\u0400\36\0\2\u0400\26\0"+
    "\2\u0400\1\0\1\u0400\3\0\1\u03fd\1\0\1\u0400\36\0"+
    "\2\u0400\26\0\2\u0400\1\0\1\u0400\14\0\62\u04a6\5\0"+
    "\1\u0378\1\0\1\u0402\36\0\2\u0402\26\0\2\u0402\1\0"+
    "\1\u0402\5\0\1\u0407\36\0\2\u0407\26\0\2\u0407\1\0"+
    "\1\u0407\3\0\1\u0404\1\0\1\u0407\36\0\2\u0407\26\0"+
    "\2\u0407\1\0\1\u0407\2\0\2\u04a7\1\u04a8\1\u04a9\36\0"+
    "\2\u04aa\26\0\2\u04aa\1\0\1\u04aa\5\0\1\u040f\36\0"+
    "\2\u040f\26\0\2\u040f\1\0\1\u040f\3\0\1\u040c\1\0"+
    "\1\u040f\36\0\2\u040f\26\0\2\u040f\1\0\1\u040f\5\0"+
    "\1\u0413\36\0\2\u0413\26\0\2\u0413\1\0\1\u0413\3\0"+
    "\1\u0410\1\0\1\u0413\36\0\2\u0413\26\0\2\u0413\1\0"+
    "\1\u0413\5\0\1\u0417\36\0\2\u0417\26\0\2\u0417\1\0"+
    "\1\u0417\3\0\1\u0414\1\0\1\u0417\36\0\2\u0417\26\0"+
    "\2\u0417\1\0\1\u0417\2\0\2\u04ab\1\u04ac\1\u04ad\36\0"+
    "\2\u04ae\26\0\2\u04ae\1\0\1\u04ae\2\0\2\u04af\1\u04b0"+
    "\1\u04b1\36\0\2\u04b2\26\0\2\u04b2\1\0\1\u04b2\5\0"+
    "\1\u0421\36\0\2\u0421\26\0\2\u0421\1\0\1\u0421\3\0"+
    "\1\u041e\1\0\1\u0421\36\0\2\u0421\26\0\2\u0421\1\0"+
    "\1\u0421\5\0\1\u0425\36\0\2\u0425\26\0\2\u0425\1\0"+
    "\1\u0425\3\0\1\u0422\1\0\1\u0425\36\0\2\u0425\26\0"+
    "\2\u0425\1\0\1\u0425\5\0\1\u0429\36\0\2\u0429\26\0"+
    "\2\u0429\1\0\1\u0429\3\0\1\u0426\1\0\1\u0429\36\0"+
    "\2\u0429\26\0\2\u0429\1\0\1\u0429\5\0\1\u042d\36\0"+
    "\2\u042d\26\0\2\u042d\1\0\1\u042d\3\0\1\u042a\1\0"+
    "\1\u042d\36\0\2\u042d\26\0\2\u042d\1\0\1\u042d\5\0"+
    "\1\u0431\36\0\2\u0431\26\0\2\u0431\1\0\1\u0431\3\0"+
    "\1\u042e\1\0\1\u0431\36\0\2\u0431\26\0\2\u0431\1\0"+
    "\1\u0431\5\0\1\u0435\36\0\2\u0435\26\0\2\u0435\1\0"+
    "\1\u0435\3\0\1\u0432\1\0\1\u0435\36\0\2\u0435\26\0"+
    "\2\u0435\1\0\1\u0435\5\0\1\u0439\36\0\2\u0439\26\0"+
    "\2\u0439\1\0\1\u0439\3\0\1\u0436\1\0\1\u0439\36\0"+
    "\2\u0439\26\0\2\u0439\1\0\1\u0439\2\0\2\u04b3\1\u04b4"+
    "\1\u04b5\36\0\2\u04b6\26\0\2\u04b6\1\0\1\u04b6\2\0"+
    "\2\u04b7\1\u04b8\1\u04b9\36\0\2\u04ba\26\0\2\u04ba\1\0"+
    "\1\u04ba\5\0\1\u0443\36\0\2\u0443\26\0\2\u0443\1\0"+
    "\1\u0443\3\0\1\u0440\1\0\1\u0443\36\0\2\u0443\26\0"+
    "\2\u0443\1\0\1\u0443\5\0\1\u0447\36\0\2\u0447\26\0"+
    "\2\u0447\1\0\1\u0447\3\0\1\u0444\1\0\1\u0447\36\0"+
    "\2\u0447\26\0\2\u0447\1\0\1\u0447\2\0\2\u04bb\1\u04bc"+
    "\1\u04bd\36\0\2\u04be\26\0\2\u04be\1\0\1\u04be\2\0"+
    "\2\u04bf\1\u04c0\1\u04c1\36\0\2\u04c2\26\0\2\u04c2\1\0"+
    "\1\u04c2\2\0\2\u04c3\1\u04c4\1\u04c5\36\0\2\u04c6\26\0"+
    "\2\u04c6\1\0\1\u04c6\2\0\2\u04c7\1\u04c8\1\u04c9\36\0"+
    "\2\u04ca\26\0\2\u04ca\1\0\1\u04ca\5\0\1\u0455\36\0"+
    "\2\u0455\26\0\2\u0455\1\0\1\u0455\3\0\1\u0452\1\0"+
    "\1\u0455\36\0\2\u0455\26\0\2\u0455\1\0\1\u0455\5\0"+
    "\1\u0459\36\0\2\u0459\26\0\2\u0459\1\0\1\u0459\3\0"+
    "\1\u0456\1\0\1\u0459\36\0\2\u0459\26\0\2\u0459\1\0"+
    "\1\u0459\5\0\1\u045d\36\0\2\u045d\26\0\2\u045d\1\0"+
    "\1\u045d\3\0\1\u045a\1\0\1\u045d\36\0\2\u045d\26\0"+
    "\2\u045d\1\0\1\u045d\5\0\1\u0461\36\0\2\u0461\26\0"+
    "\2\u0461\1\0\1\u0461\3\0\1\u045e\1\0\1\u0461\36\0"+
    "\2\u0461\26\0\2\u0461\1\0\1\u0461\14\0\62\u04cb\4\0"+
    "\2\u04cc\1\u04cd\1\u04ce\36\0\2\u04cf\26\0\2\u04cf\1\0"+
    "\1\u04cf\14\0\62\u04d0\4\0\2\u04d1\1\u04d2\1\u04d3\36\0"+
    "\2\u04d4\26\0\2\u04d4\1\0\1\u04d4\14\0\62\u04d5\4\0"+
    "\2\u04d6\1\u04d7\1\u04d8\36\0\2\u04d9\26\0\2\u04d9\1\0"+
    "\1\u04d9\5\0\1\u046e\36\0\2\u046e\26\0\2\u046e\1\0"+
    "\1\u046e\3\0\1\u046b\1\0\1\u046e\36\0\2\u046e\26\0"+
    "\2\u046e\1\0\1\u046e\5\0\1\u0472\36\0\2\u0472\26\0"+
    "\2\u0472\1\0\1\u0472\3\0\1\u046f\1\0\1\u0472\36\0"+
    "\2\u0472\26\0\2\u0472\1\0\1\u0472\5\0\1\u0476\36\0"+
    "\2\u0476\26\0\2\u0476\1\0\1\u0476\3\0\1\u0473\1\0"+
    "\1\u0476\36\0\2\u0476\26\0\2\u0476\1\0\1\u0476\5\0"+
    "\1\u047a\36\0\2\u047a\26\0\2\u047a\1\0\1\u047a\3\0"+
    "\1\u0477\1\0\1\u047a\36\0\2\u047a\26\0\2\u047a\1\0"+
    "\1\u047a\5\0\1\u047e\36\0\2\u047e\26\0\2\u047e\1\0"+
    "\1\u047e\3\0\1\u047b\1\0\1\u047e\36\0\2\u047e\26\0"+
    "\2\u047e\1\0\1\u047e\14\0\62\u04da\7\0\1\u0483\36\0"+
    "\2\u0483\26\0\2\u0483\1\0\1\u0483\3\0\1\u0480\1\0"+
    "\1\u0483\36\0\2\u0483\26\0\2\u0483\1\0\1\u0483\5\0"+
    "\1\u0487\36\0\2\u0487\26\0\2\u0487\1\0\1\u0487\3\0"+
    "\1\u0484\1\0\1\u0487\36\0\2\u0487\26\0\2\u0487\1\0"+
    "\1\u0487\5\0\1\u048b\36\0\2\u048b\26\0\2\u048b\1\0"+
    "\1\u048b\3\0\1\u0488\1\0\1\u048b\36\0\2\u048b\26\0"+
    "\2\u048b\1\0\1\u048b\6\0\1\u04db\105\0\62\u04dc\7\0"+
    "\1\u0491\36\0\2\u0491\26\0\2\u0491\1\0\1\u0491\3\0"+
    "\1\u048e\1\0\1\u0491\36\0\2\u0491\26\0\2\u0491\1\0"+
    "\1\u0491\5\0\1\u0495\36\0\2\u0495\26\0\2\u0495\1\0"+
    "\1\u0495\3\0\1\u0492\1\0\1\u0495\36\0\2\u0495\26\0"+
    "\2\u0495\1\0\1\u0495\13\0\1\u04dd\100\0\62\u04de\15\0"+
    "\1\u04df\100\0\62\u04e0\10\0\1\u04e1\105\0\62\u04e2\7\0"+
    "\1\u049f\36\0\2\u049f\26\0\2\u049f\1\0\1\u049f\3\0"+
    "\1\u049c\1\0\1\u049f\36\0\2\u049f\26\0\2\u049f\1\0"+
    "\1\u049f\5\0\1\u04a3\36\0\2\u04a3\26\0\2\u04a3\1\0"+
    "\1\u04a3\3\0\1\u04a0\1\0\1\u04a3\36\0\2\u04a3\26\0"+
    "\2\u04a3\1\0\1\u04a3\5\0\1\u04aa\36\0\2\u04aa\26\0"+
    "\2\u04aa\1\0\1\u04aa\3\0\1\u04a7\1\0\1\u04aa\36\0"+
    "\2\u04aa\26\0\2\u04aa\1\0\1\u04aa\5\0\1\u04ae\36\0"+
    "\2\u04ae\26\0\2\u04ae\1\0\1\u04ae\3\0\1\u04ab\1\0"+
    "\1\u04ae\36\0\2\u04ae\26\0\2\u04ae\1\0\1\u04ae\5\0"+
    "\1\u04b2\36\0\2\u04b2\26\0\2\u04b2\1\0\1\u04b2\3\0"+
    "\1\u04af\1\0\1\u04b2\36\0\2\u04b2\26\0\2\u04b2\1\0"+
    "\1\u04b2\5\0\1\u04b6\36\0\2\u04b6\26\0\2\u04b6\1\0"+
    "\1\u04b6\3\0\1\u04b3\1\0\1\u04b6\36\0\2\u04b6\26\0"+
    "\2\u04b6\1\0\1\u04b6\5\0\1\u04ba\36\0\2\u04ba\26\0"+
    "\2\u04ba\1\0\1\u04ba\3\0\1\u04b7\1\0\1\u04ba\36\0"+
    "\2\u04ba\26\0\2\u04ba\1\0\1\u04ba\5\0\1\u04be\36\0"+
    "\2\u04be\26\0\2\u04be\1\0\1\u04be\3\0\1\u04bb\1\0"+
    "\1\u04be\36\0\2\u04be\26\0\2\u04be\1\0\1\u04be\5\0"+
    "\1\u04c2\36\0\2\u04c2\26\0\2\u04c2\1\0\1\u04c2\3\0"+
    "\1\u04bf\1\0\1\u04c2\36\0\2\u04c2\26\0\2\u04c2\1\0"+
    "\1\u04c2\5\0\1\u04c6\36\0\2\u04c6\26\0\2\u04c6\1\0"+
    "\1\u04c6\3\0\1\u04c3\1\0\1\u04c6\36\0\2\u04c6\26\0"+
    "\2\u04c6\1\0\1\u04c6\5\0\1\u04ca\36\0\2\u04ca\26\0"+
    "\2\u04ca\1\0\1\u04ca\3\0\1\u04c7\1\0\1\u04ca\36\0"+
    "\2\u04ca\26\0\2\u04ca\1\0\1\u04ca\14\0\62\u04e3\7\0"+
    "\1\u04cf\36\0\2\u04cf\26\0\2\u04cf\1\0\1\u04cf\3\0"+
    "\1\u04cc\1\0\1\u04cf\36\0\2\u04cf\26\0\2\u04cf\1\0"+
    "\1\u04cf\14\0\62\u04e4\7\0\1\u04d4\36\0\2\u04d4\26\0"+
    "\2\u04d4\1\0\1\u04d4\3\0\1\u04d1\1\0\1\u04d4\36\0"+
    "\2\u04d4\26\0\2\u04d4\1\0\1\u04d4\14\0\62\u04e5\7\0"+
    "\1\u04d9\36\0\2\u04d9\26\0\2\u04d9\1\0\1\u04d9\3\0"+
    "\1\u04d6\1\0\1\u04d9\36\0\2\u04d9\26\0\2\u04d9\1\0"+
    "\1\u04d9\14\0\62\u04e6\10\0\1\u04e7\105\0\62\u04e8\10\0"+
    "\1\u04e9\105\0\62\u04ea\16\0\62\u04eb\16\0\62\u04ec\16\0"+
    "\62\u04ed\16\0\62\u04ee\16\0\62\u04ef\16\0\62\u04f0\16\0"+
    "\62\u04f1\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[63616];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\44\0\1\11\161\0\1\1\3\11\3\0\1\1\1\0"+
    "\1\11\1\0\4\11\1\0\7\11\1\0\1\11\2\0"+
    "\5\11\1\0\1\11\6\0\1\11\1\0\4\11\1\0"+
    "\2\11\3\0\3\11\11\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\3\11\1\0\3\11\7\0\4\11\1\0"+
    "\1\11\1\0\3\11\4\0\1\1\46\0\3\11\3\0"+
    "\2\11\11\0\2\11\5\0\2\11\16\0\2\11\2\0"+
    "\2\11\3\0\2\11\32\0\3\11\3\0\2\11\2\0"+
    "\10\11\3\0\2\11\3\0\2\11\7\0\1\11\14\0"+
    "\1\11\3\0\4\11\3\0\1\11\272\0\1\1\2\0"+
    "\1\1\2\0\1\1\16\0\1\11\10\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\33\0\1\1\1\0"+
    "\1\11\1\0\1\1\1\0\1\1\16\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\5\0\1\1\2\0\1\1\7\0"+
    "\1\1\2\0\1\1\3\0\1\1\2\0\1\1\2\0"+
    "\1\1\6\0\1\1\2\0\1\11\4\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\11\0\1\1\2\0\1\1\6\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\3\0\1\1\2\0\1\1\2\0"+
    "\1\1\4\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\11\2\0\1\1\2\0\1\1\5\0\1\11\1\0"+
    "\1\1\2\0\1\1\2\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\0\1\11\2\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\1\2\0\1\1\2\0\1\11\1\0"+
    "\1\11\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\2\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\1\0\1\11\2\0"+
    "\2\11\1\0\2\11\1\0\1\11\2\0\1\1\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\1\11\6\0\1\1"+
    "\2\11\1\0\2\11\1\0\1\11\2\0\1\1\1\11"+
    "\3\0\1\11\3\0\1\1\1\11\1\0\1\11\3\0"+
    "\1\1\4\11\3\0\1\1\1\11\2\0\1\1\1\11"+
    "\2\0\1\1\2\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\1\1\11\2\0\1\1\1\11\2\0\1\1\1\11"+
    "\2\0\1\1\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\2\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\1\1\11\2\0\1\1\2\11\1\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\2\0\1\1\1\11\2\0"+
    "\1\1\1\11\2\0\1\11\2\0\1\11\2\0\1\11"+
    "\2\0\1\1\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\2\0\1\1\1\11\3\0"+
    "\1\1\1\11\2\0\1\1\1\11\2\0\1\1\1\11"+
    "\4\0\1\1\1\11\2\0\1\1\1\11\10\0\1\1"+
    "\1\11\2\0\1\1\4\11\2\0\1\1\1\11\2\0"+
    "\1\1\1\11\2\0\1\1\1\11\2\0\1\1\1\11"+
    "\2\0\1\1\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\2\0\1\1\1\11\3\0"+
    "\1\1\1\11\3\0\1\1\1\11\3\0\1\1\2\11"+
    "\1\0\1\11\5\0\4\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 259: break;
          case 2:
            { return token(yytext(),"LLAVE_A",yyline,yycolumn);
            }
            // fall through
          case 260: break;
          case 3:
            { return token(yytext(),"LLAVE_C",yyline,yycolumn);
            }
            // fall through
          case 261: break;
          case 4:
            { return token(yytext(),"PARENTESIS_A",yyline,yycolumn);
            }
            // fall through
          case 262: break;
          case 5:
            { return token(yytext(),"PARENTESIS_C",yyline,yycolumn);
            }
            // fall through
          case 263: break;
          case 6:
            { return token(yytext(),"COMA",yyline,yycolumn);
            }
            // fall through
          case 264: break;
          case 7:
            { return token(yytext(), "DirSimple", yyline, yycolumn);
            }
            // fall through
          case 265: break;
          case 8:
            { return token(yytext(),"Inst_ABA",yyline,yycolumn);
            }
            // fall through
          case 266: break;
          case 9:
            { return token(yytext(),"Inst_ABX",yyline,yycolumn);
            }
            // fall through
          case 267: break;
          case 10:
            { return token(yytext(),"Inst_ABY",yyline,yycolumn);
            }
            // fall through
          case 268: break;
          case 11:
            { return token(yytext(),"Inst_EORA_Index",yyline,yycolumn);
            }
            // fall through
          case 269: break;
          case 12:
            { return token(yytext(),"Inst_BCC",yyline,yycolumn);
            }
            // fall through
          case 270: break;
          case 13:
            { return token(yytext(),"Inst_BEQ",yyline,yycolumn);
            }
            // fall through
          case 271: break;
          case 14:
            { return token(yytext(),"Inst_BGE",yyline,yycolumn);
            }
            // fall through
          case 272: break;
          case 15:
            { return token(yytext(),"Inst_BGT",yyline,yycolumn);
            }
            // fall through
          case 273: break;
          case 16:
            { return token(yytext(),"Inst_BHI",yyline,yycolumn);
            }
            // fall through
          case 274: break;
          case 17:
            { return token(yytext(),"Inst_BLE",yyline,yycolumn);
            }
            // fall through
          case 275: break;
          case 18:
            { return token(yytext(),"Inst_BLS",yyline,yycolumn);
            }
            // fall through
          case 276: break;
          case 19:
            { return token(yytext(),"Inst_BLT",yyline,yycolumn);
            }
            // fall through
          case 277: break;
          case 20:
            { return token(yytext(),"Inst_BMI",yyline,yycolumn);
            }
            // fall through
          case 278: break;
          case 21:
            { return token(yytext(),"Inst_BNE",yyline,yycolumn);
            }
            // fall through
          case 279: break;
          case 22:
            { return token(yytext(),"Inst_BPL",yyline,yycolumn);
            }
            // fall through
          case 280: break;
          case 23:
            { return token(yytext(),"Inst_BRA",yyline,yycolumn);
            }
            // fall through
          case 281: break;
          case 24:
            { return token(yytext(),"Inst_BRN",yyline,yycolumn);
            }
            // fall through
          case 282: break;
          case 25:
            { return token(yytext(),"Inst_BVC",yyline,yycolumn);
            }
            // fall through
          case 283: break;
          case 26:
            { return token(yytext(),"Inst_BVS",yyline,yycolumn);
            }
            // fall through
          case 284: break;
          case 27:
            { return token(yytext(),"Inst_CBA",yyline,yycolumn);
            }
            // fall through
          case 285: break;
          case 28:
            { return token(yytext(),"Inst_CLC",yyline,yycolumn);
            }
            // fall through
          case 286: break;
          case 29:
            { return token(yytext(),"Inst_CLI",yyline,yycolumn);
            }
            // fall through
          case 287: break;
          case 30:
            { return token(yytext(),"Inst_CLV",yyline,yycolumn);
            }
            // fall through
          case 288: break;
          case 31:
            { return token(yytext(),"Inst_DAA",yyline,yycolumn);
            }
            // fall through
          case 289: break;
          case 32:
            { return token(yytext(),"Inst_DES",yyline,yycolumn);
            }
            // fall through
          case 290: break;
          case 33:
            { return token(yytext(),"Inst_DEX",yyline,yycolumn);
            }
            // fall through
          case 291: break;
          case 34:
            { return token(yytext(),"Inst_DEY",yyline,yycolumn);
            }
            // fall through
          case 292: break;
          case 35:
            { return token(yytext(),"Directiva_END",yyline,yycolumn);
            }
            // fall through
          case 293: break;
          case 36:
            { return token(yytext(),"Directiva_EQU",yyline,yycolumn);
            }
            // fall through
          case 294: break;
          case 37:
            { return token(yytext(),"Directiva_FCB",yyline,yycolumn);
            }
            // fall through
          case 295: break;
          case 38:
            { return token(yytext(),"Inst_INS",yyline,yycolumn);
            }
            // fall through
          case 296: break;
          case 39:
            { return token(yytext(),"Inst_INX",yyline,yycolumn);
            }
            // fall through
          case 297: break;
          case 40:
            { return token(yytext(),"Inst_INY",yyline,yycolumn);
            }
            // fall through
          case 298: break;
          case 41:
            { return token(yytext(),"Inst_MUL",yyline,yycolumn);
            }
            // fall through
          case 299: break;
          case 42:
            { return token(yytext(),"Inst_NOP",yyline,yycolumn);
            }
            // fall through
          case 300: break;
          case 43:
            { return token(yytext(),"Directiva_ORG",yyline,yycolumn);
            }
            // fall through
          case 301: break;
          case 44:
            { return token(yytext(),"Inst_RTI",yyline,yycolumn);
            }
            // fall through
          case 302: break;
          case 45:
            { return token(yytext(),"Inst_RTS",yyline,yycolumn);
            }
            // fall through
          case 303: break;
          case 46:
            { return token(yytext(),"Inst_SBA",yyline,yycolumn);
            }
            // fall through
          case 304: break;
          case 47:
            { return token(yytext(),"Inst_SEC",yyline,yycolumn);
            }
            // fall through
          case 305: break;
          case 48:
            { return token(yytext(),"Inst_SEI",yyline,yycolumn);
            }
            // fall through
          case 306: break;
          case 49:
            { return token(yytext(),"Inst_SEV",yyline,yycolumn);
            }
            // fall through
          case 307: break;
          case 50:
            { return token(yytext(),"Inst_SWI",yyline,yycolumn);
            }
            // fall through
          case 308: break;
          case 51:
            { return token(yytext(),"Inst_TAB",yyline,yycolumn);
            }
            // fall through
          case 309: break;
          case 52:
            { return token(yytext(),"Inst_TAP",yyline,yycolumn);
            }
            // fall through
          case 310: break;
          case 53:
            { return token(yytext(),"Inst_TBA",yyline,yycolumn);
            }
            // fall through
          case 311: break;
          case 54:
            { return token(yytext(),"Inst_TPA",yyline,yycolumn);
            }
            // fall through
          case 312: break;
          case 55:
            { return token(yytext(),"Inst_TSX",yyline,yycolumn);
            }
            // fall through
          case 313: break;
          case 56:
            { return token(yytext(),"Inst_TXS",yyline,yycolumn);
            }
            // fall through
          case 314: break;
          case 57:
            { return token(yytext(),"Inst_WAI",yyline,yycolumn);
            }
            // fall through
          case 315: break;
          case 58:
            { return token(yytext(),"Inst_ASLA",yyline,yycolumn);
            }
            // fall through
          case 316: break;
          case 59:
            { return token(yytext(),"Inst_ASLB",yyline,yycolumn);
            }
            // fall through
          case 317: break;
          case 60:
            { return token(yytext(),"Inst_ASLD",yyline,yycolumn);
            }
            // fall through
          case 318: break;
          case 61:
            { return token(yytext(),"Inst_ASRA",yyline,yycolumn);
            }
            // fall through
          case 319: break;
          case 62:
            { return token(yytext(),"Inst_ASRB",yyline,yycolumn);
            }
            // fall through
          case 320: break;
          case 63:
            { return token(yytext(),"Inst_CLRA",yyline,yycolumn);
            }
            // fall through
          case 321: break;
          case 64:
            { return token(yytext(),"Inst_CLRB",yyline,yycolumn);
            }
            // fall through
          case 322: break;
          case 65:
            { return token(yytext(),"Inst_COMA",yyline,yycolumn);
            }
            // fall through
          case 323: break;
          case 66:
            { return token(yytext(),"Inst_COMB",yyline,yycolumn);
            }
            // fall through
          case 324: break;
          case 67:
            { return token(yytext(),"Inst_DECA",yyline,yycolumn);
            }
            // fall through
          case 325: break;
          case 68:
            { return token(yytext(),"Inst_DECB",yyline,yycolumn);
            }
            // fall through
          case 326: break;
          case 69:
            { return token(yytext(),"Inst_FDIV",yyline,yycolumn);
            }
            // fall through
          case 327: break;
          case 70:
            { return token(yytext(),"Inst_IDIV",yyline,yycolumn);
            }
            // fall through
          case 328: break;
          case 71:
            { return token(yytext(),"Inst_INCA",yyline,yycolumn);
            }
            // fall through
          case 329: break;
          case 72:
            { return token(yytext(),"Inst_INCB",yyline,yycolumn);
            }
            // fall through
          case 330: break;
          case 73:
            { return token(yytext(),"Inst_LSRA",yyline,yycolumn);
            }
            // fall through
          case 331: break;
          case 74:
            { return token(yytext(),"Inst_LSRB",yyline,yycolumn);
            }
            // fall through
          case 332: break;
          case 75:
            { return token(yytext(),"Inst_LSRD",yyline,yycolumn);
            }
            // fall through
          case 333: break;
          case 76:
            { return token(yytext(),"Inst_NEGA",yyline,yycolumn);
            }
            // fall through
          case 334: break;
          case 77:
            { return token(yytext(),"Inst_NEGB",yyline,yycolumn);
            }
            // fall through
          case 335: break;
          case 78:
            { return token(yytext(),"Inst_PSHA",yyline,yycolumn);
            }
            // fall through
          case 336: break;
          case 79:
            { return token(yytext(),"Inst_PSHB",yyline,yycolumn);
            }
            // fall through
          case 337: break;
          case 80:
            { return token(yytext(),"Inst_PSHX",yyline,yycolumn);
            }
            // fall through
          case 338: break;
          case 81:
            { return token(yytext(),"Inst_PSHY",yyline,yycolumn);
            }
            // fall through
          case 339: break;
          case 82:
            { return token(yytext(),"Inst_PULA",yyline,yycolumn);
            }
            // fall through
          case 340: break;
          case 83:
            { return token(yytext(),"Inst_PULB",yyline,yycolumn);
            }
            // fall through
          case 341: break;
          case 84:
            { return token(yytext(),"Inst_PULX",yyline,yycolumn);
            }
            // fall through
          case 342: break;
          case 85:
            { return token(yytext(),"Inst_PULY",yyline,yycolumn);
            }
            // fall through
          case 343: break;
          case 86:
            { return token(yytext(),"Inst_ROLA",yyline,yycolumn);
            }
            // fall through
          case 344: break;
          case 87:
            { return token(yytext(),"Inst_ROLB",yyline,yycolumn);
            }
            // fall through
          case 345: break;
          case 88:
            { return token(yytext(),"Inst_RORA",yyline,yycolumn);
            }
            // fall through
          case 346: break;
          case 89:
            { return token(yytext(),"Inst_RORB",yyline,yycolumn);
            }
            // fall through
          case 347: break;
          case 90:
            { return token(yytext(),"Inst_STOP",yyline,yycolumn);
            }
            // fall through
          case 348: break;
          case 91:
            { return token(yytext(),"Inst_TEST",yyline,yycolumn);
            }
            // fall through
          case 349: break;
          case 92:
            { return token(yytext(),"Inst_TSTA",yyline,yycolumn);
            }
            // fall through
          case 350: break;
          case 93:
            { return token(yytext(),"Inst_TSTB",yyline,yycolumn);
            }
            // fall through
          case 351: break;
          case 94:
            { return token(yytext(),"Inst_XGDX",yyline,yycolumn);
            }
            // fall through
          case 352: break;
          case 95:
            { return token(yytext(),"Inst_XGDY",yyline,yycolumn);
            }
            // fall through
          case 353: break;
          case 96:
            { return token(yytext(), "DirExt", yyline, yycolumn);
            }
            // fall through
          case 354: break;
          case 97:
            { return token(yytext(),"Inst_CPD_Dir",yyline,yycolumn);
            }
            // fall through
          case 355: break;
          case 98:
            { return token(yytext(),"Inst_CPX_Dir",yyline,yycolumn);
            }
            // fall through
          case 356: break;
          case 99:
            { return token(yytext(),"Inst_CPY_Dir",yyline,yycolumn);
            }
            // fall through
          case 357: break;
          case 100:
            { return token(yytext(),"Inst_JSR_Dir",yyline,yycolumn);
            }
            // fall through
          case 358: break;
          case 101:
            { return token(yytext(),"Inst_LDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 359: break;
          case 102:
            { return token(yytext(),"Inst_LDS_Dir",yyline,yycolumn);
            }
            // fall through
          case 360: break;
          case 103:
            { return token(yytext(),"Inst_LDX_Dir",yyline,yycolumn);
            }
            // fall through
          case 361: break;
          case 104:
            { return token(yytext(),"Inst_LDY_Dir",yyline,yycolumn);
            }
            // fall through
          case 362: break;
          case 105:
            { return token(yytext(),"Inst_STD_Dir",yyline,yycolumn);
            }
            // fall through
          case 363: break;
          case 106:
            { return token(yytext(),"Inst_STS_Dir",yyline,yycolumn);
            }
            // fall through
          case 364: break;
          case 107:
            { return token(yytext(),"Inst_STX_Dir",yyline,yycolumn);
            }
            // fall through
          case 365: break;
          case 108:
            { return token(yytext(),"Inst_STY_Dir",yyline,yycolumn);
            }
            // fall through
          case 366: break;
          case 109:
            { return token(yytext(),"Inst_ADCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 367: break;
          case 110:
            { return token(yytext(),"Inst_ADCD_Dir",yyline,yycolumn);
            }
            // fall through
          case 368: break;
          case 111:
            { return token(yytext(),"Inst_ADDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 369: break;
          case 112:
            { return token(yytext(),"Inst_ADDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 370: break;
          case 113:
            { return token(yytext(),"Inst_ANDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 371: break;
          case 114:
            { return token(yytext(),"Inst_ANDB_Dir",yyline,yycolumn);
            }
            // fall through
          case 372: break;
          case 115:
            { return token(yytext(),"Inst_BITA_Dir",yyline,yycolumn);
            }
            // fall through
          case 373: break;
          case 116:
            { return token(yytext(),"Inst_BITB_Dir",yyline,yycolumn);
            }
            // fall through
          case 374: break;
          case 117:
            { return token(yytext(),"Inst_CMPA_Dir",yyline,yycolumn);
            }
            // fall through
          case 375: break;
          case 118:
            { return token(yytext(),"Inst_CMPB_Dir",yyline,yycolumn);
            }
            // fall through
          case 376: break;
          case 119:
            { return token(yytext(),"Inst_EORA_Dir",yyline,yycolumn);
            }
            // fall through
          case 377: break;
          case 120:
            { return token(yytext(),"Inst_EORB_Dir",yyline,yycolumn);
            }
            // fall through
          case 378: break;
          case 121:
            { return token(yytext(),"Inst_LDAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 379: break;
          case 122:
            { return token(yytext(),"Inst_LDAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 380: break;
          case 123:
            { return token(yytext(),"Inst_ORAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 381: break;
          case 124:
            { return token(yytext(),"Inst_ORAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 382: break;
          case 125:
            { return token(yytext(),"Inst_SBCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 383: break;
          case 126:
            { return token(yytext(),"Inst_SBCD_Dir",yyline,yycolumn);
            }
            // fall through
          case 384: break;
          case 127:
            { return token(yytext(),"Inst_STAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 385: break;
          case 128:
            { return token(yytext(),"Inst_STAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 386: break;
          case 129:
            { return token(yytext(),"Inst_SUBA_Dir",yyline,yycolumn);
            }
            // fall through
          case 387: break;
          case 130:
            { return token(yytext(),"Inst_SUBD_Dir",yyline,yycolumn);
            }
            // fall through
          case 388: break;
          case 131:
            { return token(yytext(),"Inst_ASR_Ext",yyline,yycolumn);
            }
            // fall through
          case 389: break;
          case 132:
            { return token(yytext(),"Inst_CLR_Ext",yyline,yycolumn);
            }
            // fall through
          case 390: break;
          case 133:
            { return token(yytext(),"Inst_COM_Ext",yyline,yycolumn);
            }
            // fall through
          case 391: break;
          case 134:
            { return token(yytext(),"Inst_CPD_Ext",yyline,yycolumn);
            }
            // fall through
          case 392: break;
          case 135:
            { return token(yytext(),"Inst_CPX_Ext",yyline,yycolumn);
            }
            // fall through
          case 393: break;
          case 136:
            { return token(yytext(),"Inst_CPY_Ext",yyline,yycolumn);
            }
            // fall through
          case 394: break;
          case 137:
            { return token(yytext(),"Inst_DEC_Ext",yyline,yycolumn);
            }
            // fall through
          case 395: break;
          case 138:
            { return token(yytext(),"Inst_INC_Ext",yyline,yycolumn);
            }
            // fall through
          case 396: break;
          case 139:
            { return token(yytext(),"Inst_JMP_Ext",yyline,yycolumn);
            }
            // fall through
          case 397: break;
          case 140:
            { return token(yytext(),"Inst_LDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 398: break;
          case 141:
            { return token(yytext(),"Inst_LDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 399: break;
          case 142:
            { return token(yytext(),"Inst_LDS_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 400: break;
          case 143:
            { return token(yytext(),"Inst_LDS_Ext",yyline,yycolumn);
            }
            // fall through
          case 401: break;
          case 144:
            { return token(yytext(),"Inst_LDX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 402: break;
          case 145:
            { return token(yytext(),"Inst_LDX_Ext",yyline,yycolumn);
            }
            // fall through
          case 403: break;
          case 146:
            { return token(yytext(),"Inst_LDY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 404: break;
          case 147:
            { return token(yytext(),"Inst_LDY_Ext",yyline,yycolumn);
            }
            // fall through
          case 405: break;
          case 148:
            { return token(yytext(),"Inst_ASL_Ext",yyline,yycolumn);
            }
            // fall through
          case 406: break;
          case 149:
            { return token(yytext(),"Inst_LSR_Ext",yyline,yycolumn);
            }
            // fall through
          case 407: break;
          case 150:
            { return token(yytext(),"Inst_NEG_Ext",yyline,yycolumn);
            }
            // fall through
          case 408: break;
          case 151:
            { return token(yytext(),"Inst_ROL_Ext",yyline,yycolumn);
            }
            // fall through
          case 409: break;
          case 152:
            { return token(yytext(),"Inst_ROR_Ext",yyline,yycolumn);
            }
            // fall through
          case 410: break;
          case 153:
            { return token(yytext(),"Inst_STD_Ext",yyline,yycolumn);
            }
            // fall through
          case 411: break;
          case 154:
            { return token(yytext(),"Inst_STX_Ext",yyline,yycolumn);
            }
            // fall through
          case 412: break;
          case 155:
            { return token(yytext(),"Inst_STY_Ext",yyline,yycolumn);
            }
            // fall through
          case 413: break;
          case 156:
            { return token(yytext(),"Inst_TST_Ext",yyline,yycolumn);
            }
            // fall through
          case 414: break;
          case 157:
            { return token(yytext(),"Inst_ADCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 415: break;
          case 158:
            { return token(yytext(),"Inst_ADCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 416: break;
          case 159:
            { return token(yytext(),"Inst_ADCB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 417: break;
          case 160:
            { return token(yytext(),"Inst_ADCB_Ext",yyline,yycolumn);
            }
            // fall through
          case 418: break;
          case 161:
            { return token(yytext(),"Inst_ADDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 419: break;
          case 162:
            { return token(yytext(),"Inst_ADDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 420: break;
          case 163:
            { return token(yytext(),"Inst_ADDB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 421: break;
          case 164:
            { return token(yytext(),"Inst_ADDB_Ext",yyline,yycolumn);
            }
            // fall through
          case 422: break;
          case 165:
            { return token(yytext(),"Inst_ADDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 423: break;
          case 166:
            { return token(yytext(),"Inst_ANDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 424: break;
          case 167:
            { return token(yytext(),"Inst_ANDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 425: break;
          case 168:
            { return token(yytext(),"Inst_ANDB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 426: break;
          case 169:
            { return token(yytext(),"Inst_ANDB_Ext",yyline,yycolumn);
            }
            // fall through
          case 427: break;
          case 170:
            { return token(yytext(),"Inst_ASR_Index",yyline,yycolumn);
            }
            // fall through
          case 428: break;
          case 171:
            { return token(yytext(),"Inst_BITA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 429: break;
          case 172:
            { return token(yytext(),"Inst_BITA_Ext",yyline,yycolumn);
            }
            // fall through
          case 430: break;
          case 173:
            { return token(yytext(),"Inst_BITB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 431: break;
          case 174:
            { return token(yytext(),"Inst_BITB_Ext",yyline,yycolumn);
            }
            // fall through
          case 432: break;
          case 175:
            { return token(yytext(),"Inst_CLR_Index",yyline,yycolumn);
            }
            // fall through
          case 433: break;
          case 176:
            { return token(yytext(),"Inst_CMPA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 434: break;
          case 177:
            { return token(yytext(),"Inst_CMPA_Ext",yyline,yycolumn);
            }
            // fall through
          case 435: break;
          case 178:
            { return token(yytext(),"Inst_CMPB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 436: break;
          case 179:
            { return token(yytext(),"Inst_CMPB_Ext",yyline,yycolumn);
            }
            // fall through
          case 437: break;
          case 180:
            { return token(yytext(),"Inst_COM_Index",yyline,yycolumn);
            }
            // fall through
          case 438: break;
          case 181:
            { return token(yytext(),"Inst_CPD_Index",yyline,yycolumn);
            }
            // fall through
          case 439: break;
          case 182:
            { return token(yytext(),"Inst_CPX_Index",yyline,yycolumn);
            }
            // fall through
          case 440: break;
          case 183:
            { return token(yytext(),"Inst_CPY_Index",yyline,yycolumn);
            }
            // fall through
          case 441: break;
          case 184:
            { return token(yytext(),"Inst_DEC_Index",yyline,yycolumn);
            }
            // fall through
          case 442: break;
          case 185:
            { return token(yytext(),"Inst_EORA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 443: break;
          case 186:
            { return token(yytext(),"Inst_EORA_Ext",yyline,yycolumn);
            }
            // fall through
          case 444: break;
          case 187:
            { return token(yytext(),"Inst_EORB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 445: break;
          case 188:
            { return token(yytext(),"Inst_INC_Index",yyline,yycolumn);
            }
            // fall through
          case 446: break;
          case 189:
            { return token(yytext(),"Inst_JMP_Index",yyline,yycolumn);
            }
            // fall through
          case 447: break;
          case 190:
            { return token(yytext(),"Inst_JSR_Index",yyline,yycolumn);
            }
            // fall through
          case 448: break;
          case 191:
            { return token(yytext(),"Inst_LDAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 449: break;
          case 192:
            { return token(yytext(),"Inst_LDAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 450: break;
          case 193:
            { return token(yytext(),"Inst_LDAB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 451: break;
          case 194:
            { return token(yytext(),"Inst_LDAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 452: break;
          case 195:
            { return token(yytext(),"Inst_LDD_Index",yyline,yycolumn);
            }
            // fall through
          case 453: break;
          case 196:
            { return token(yytext(),"Inst_LDS_Index",yyline,yycolumn);
            }
            // fall through
          case 454: break;
          case 197:
            { return token(yytext(),"Inst_LDX_Index",yyline,yycolumn);
            }
            // fall through
          case 455: break;
          case 198:
            { return token(yytext(),"Inst_LDY_Index",yyline,yycolumn);
            }
            // fall through
          case 456: break;
          case 199:
            { return token(yytext(),"Inst_LSR_Index",yyline,yycolumn);
            }
            // fall through
          case 457: break;
          case 200:
            { return token(yytext(),"Inst_NEG_Index",yyline,yycolumn);
            }
            // fall through
          case 458: break;
          case 201:
            { return token(yytext(),"Inst_ORAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 459: break;
          case 202:
            { return token(yytext(),"Inst_ORAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 460: break;
          case 203:
            { return token(yytext(),"Inst_ORAB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 461: break;
          case 204:
            { return token(yytext(),"Inst_ORAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 462: break;
          case 205:
            { return token(yytext(),"Inst_ROL_Index",yyline,yycolumn);
            }
            // fall through
          case 463: break;
          case 206:
            { return token(yytext(),"Inst_ROR_Index",yyline,yycolumn);
            }
            // fall through
          case 464: break;
          case 207:
            { return token(yytext(),"Inst_SBCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 465: break;
          case 208:
            { return token(yytext(),"Inst_SBCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 466: break;
          case 209:
            { return token(yytext(),"Inst_SBCB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 467: break;
          case 210:
            { return token(yytext(),"Inst_SBCB_Ext",yyline,yycolumn);
            }
            // fall through
          case 468: break;
          case 211:
            { return token(yytext(),"Inst_STAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 469: break;
          case 212:
            { return token(yytext(),"Inst_STAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 470: break;
          case 213:
            { return token(yytext(),"Inst_STD_Index",yyline,yycolumn);
            }
            // fall through
          case 471: break;
          case 214:
            { return token(yytext(),"Inst_STS_Index",yyline,yycolumn);
            }
            // fall through
          case 472: break;
          case 215:
            { return token(yytext(),"Inst_STX_Index",yyline,yycolumn);
            }
            // fall through
          case 473: break;
          case 216:
            { return token(yytext(),"Inst_STY_Index",yyline,yycolumn);
            }
            // fall through
          case 474: break;
          case 217:
            { return token(yytext(),"Inst_SUBA_Ext",yyline,yycolumn);
            }
            // fall through
          case 475: break;
          case 218:
            { return token(yytext(),"Inst_SUBB_Ext",yyline,yycolumn);
            }
            // fall through
          case 476: break;
          case 219:
            { return token(yytext(),"Inst_SUBD_Ext",yyline,yycolumn);
            }
            // fall through
          case 477: break;
          case 220:
            { return token(yytext(),"Inst_TST_Index",yyline,yycolumn);
            }
            // fall through
          case 478: break;
          case 221:
            { return token(yytext(),"Inst_ADCA_Index",yyline,yycolumn);
            }
            // fall through
          case 479: break;
          case 222:
            { return token(yytext(),"Inst_ADCB_Index",yyline,yycolumn);
            }
            // fall through
          case 480: break;
          case 223:
            { return token(yytext(),"Inst_ADDA_Index",yyline,yycolumn);
            }
            // fall through
          case 481: break;
          case 224:
            { return token(yytext(),"Inst_ADDB_Index",yyline,yycolumn);
            }
            // fall through
          case 482: break;
          case 225:
            { return token(yytext(),"Inst_ADDD_Index",yyline,yycolumn);
            }
            // fall through
          case 483: break;
          case 226:
            { return token(yytext(),"Inst_ANDA_Index",yyline,yycolumn);
            }
            // fall through
          case 484: break;
          case 227:
            { return token(yytext(),"Inst_ANDB_Index",yyline,yycolumn);
            }
            // fall through
          case 485: break;
          case 228:
            { return token(yytext(),"Inst_BITA_Index",yyline,yycolumn);
            }
            // fall through
          case 486: break;
          case 229:
            { return token(yytext(),"Inst_BITB_Index",yyline,yycolumn);
            }
            // fall through
          case 487: break;
          case 230:
            { return token(yytext(),"Inst_CMPA_Index",yyline,yycolumn);
            }
            // fall through
          case 488: break;
          case 231:
            { return token(yytext(),"Inst_CMPB_Index",yyline,yycolumn);
            }
            // fall through
          case 489: break;
          case 232:
            { return token(yytext(),"Inst_CPD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 490: break;
          case 233:
            { return token(yytext(),"Inst_CPX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 491: break;
          case 234:
            { return token(yytext(),"Inst_CPY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 492: break;
          case 235:
            { return token(yytext(),"Inst_EORB_Index",yyline,yycolumn);
            }
            // fall through
          case 493: break;
          case 236:
            { return token(yytext(),"Inst_LDAA_Index",yyline,yycolumn);
            }
            // fall through
          case 494: break;
          case 237:
            { return token(yytext(),"Inst_LDAB_Index",yyline,yycolumn);
            }
            // fall through
          case 495: break;
          case 238:
            { return token(yytext(),"Inst_ORAA_Index",yyline,yycolumn);
            }
            // fall through
          case 496: break;
          case 239:
            { return token(yytext(),"Inst_ORAB_Index",yyline,yycolumn);
            }
            // fall through
          case 497: break;
          case 240:
            { return token(yytext(),"Inst_SBCA_Index",yyline,yycolumn);
            }
            // fall through
          case 498: break;
          case 241:
            { return token(yytext(),"Inst_SBCB_Index",yyline,yycolumn);
            }
            // fall through
          case 499: break;
          case 242:
            { return token(yytext(),"Inst_STAA_Index",yyline,yycolumn);
            }
            // fall through
          case 500: break;
          case 243:
            { return token(yytext(),"Inst_STAB_Index",yyline,yycolumn);
            }
            // fall through
          case 501: break;
          case 244:
            { return token(yytext(),"Inst_SUBA_Index",yyline,yycolumn);
            }
            // fall through
          case 502: break;
          case 245:
            { return token(yytext(),"Inst_SUBB_Index",yyline,yycolumn);
            }
            // fall through
          case 503: break;
          case 246:
            { return token(yytext(),"Inst_SUBD_Index",yyline,yycolumn);
            }
            // fall through
          case 504: break;
          case 247:
            { return token(yytext(),"Inst_ADDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 505: break;
          case 248:
            { return token(yytext(),"Inst_BCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 506: break;
          case 249:
            { return token(yytext(),"Inst_BSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 507: break;
          case 250:
            { return token(yytext(),"Inst_SUBA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 508: break;
          case 251:
            { return token(yytext(),"Inst_SUBB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 509: break;
          case 252:
            { return token(yytext(),"Inst_SUBD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 510: break;
          case 253:
            { return token(yytext(),"Inst_BRCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 511: break;
          case 254:
            { return token(yytext(),"Inst_BRSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 512: break;
          case 255:
            { return token(yytext(),"Inst_BCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 513: break;
          case 256:
            { return token(yytext(),"Inst_BSET_Index",yyline,yycolumn);
            }
            // fall through
          case 514: break;
          case 257:
            { return token(yytext(),"Inst_BRCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 515: break;
          case 258:
            { return token(yytext(),"Inst_BRSET_Index",yyline,yycolumn);
            }
            // fall through
          case 516: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
