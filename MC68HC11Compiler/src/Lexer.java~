// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\2\0\1\5\1\6\3\0\1\7\1\10\1\11\1\0"+
    "\1\12\3\0\12\13\7\0\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\25\1\41\1\42\1\25\4\0\1\25\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\2\25\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\25\1\67\1\70"+
    "\1\25\1\71\1\72\1\73\103\0\1\25\7\0\1\25"+
    "\3\0\1\25\3\0\1\25\1\0\1\25\6\0\1\25"+
    "\1\0\1\25\4\0\1\25\7\0\1\25\3\0\1\25"+
    "\3\0\1\25\1\0\1\25\6\0\1\25\1\0\1\25"+
    "\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\36\0\1\3\125\0\1\7\1\10\1\11\1\12\3\0"+
    "\1\13\1\0\1\14\1\0\1\15\1\0\1\16\1\17"+
    "\1\0\1\20\2\0\1\21\1\22\1\23\1\0\1\24"+
    "\5\0\1\25\1\0\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\3\0\1\34\1\35\1\36\7\0\1\37"+
    "\1\0\1\40\1\0\1\41\4\0\1\42\1\0\1\43"+
    "\1\44\1\45\3\0\1\46\1\47\1\50\1\0\1\51"+
    "\4\0\1\13\40\0\1\52\1\53\1\54\3\0\1\55"+
    "\1\56\10\0\1\57\4\0\1\60\14\0\1\61\1\0"+
    "\1\62\1\63\27\0\1\64\1\65\1\66\3\0\1\67"+
    "\1\0\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\7\0\1\104\1\105"+
    "\3\0\1\106\171\0\1\107\2\0\1\110\2\0\1\111"+
    "\17\0\1\112\2\0\1\113\2\0\1\114\2\0\1\115"+
    "\21\0\1\116\6\0\1\117\2\0\1\120\2\0\1\121"+
    "\2\0\1\122\13\0\1\123\3\0\1\107\2\0\1\110"+
    "\2\0\1\111\12\0\1\124\2\0\1\125\1\0\1\112"+
    "\2\0\1\113\2\0\1\114\2\0\1\115\11\0\1\126"+
    "\2\0\1\127\1\0\1\130\1\0\1\131\1\116\3\0"+
    "\1\132\2\0\1\117\2\0\1\120\2\0\1\121\2\0"+
    "\1\122\2\0\1\133\6\0\1\134\1\0\1\123\2\0"+
    "\1\135\2\0\1\136\2\0\1\137\2\0\1\140\1\0"+
    "\1\141\4\0\1\142\1\0\1\124\2\0\1\125\1\0"+
    "\1\143\1\0\1\144\1\145\1\0\1\146\1\147\1\0"+
    "\1\150\1\151\1\0\1\152\1\0\1\153\1\0\1\154"+
    "\1\0\1\155\1\0\1\126\2\0\1\127\1\0\1\130"+
    "\1\0\1\131\2\0\1\156\1\0\1\132\1\0\1\157"+
    "\1\0\1\160\1\161\1\0\1\162\2\0\1\163\1\164"+
    "\1\0\1\165\2\0\2\166\2\0\1\167\6\0\2\170"+
    "\1\171\1\0\1\172\2\0\2\173\3\0\1\174\3\0"+
    "\2\175\3\0\1\176\2\0\2\177\1\200\1\201\2\0"+
    "\2\202\1\203\1\0\1\204\1\205\1\0\1\206\2\0"+
    "\2\207\2\0\2\210\2\0\2\211\2\0\2\212\2\0"+
    "\2\13\2\0\2\213\2\0\2\214\1\215\1\0\1\216"+
    "\1\217\1\0\1\220\1\0\1\221\1\0\1\222\2\0"+
    "\2\223\2\0\1\224\2\0\2\225\2\0\2\226\3\0"+
    "\2\227\2\0\2\230\12\0\2\231\1\232\1\233\1\234"+
    "\2\0\2\235\2\0\2\236\2\0\2\237\2\0\2\240"+
    "\2\0\2\241\2\0\2\242\3\0\2\243\1\244\1\0"+
    "\1\245\5\0\1\246\1\247\2\0\1\250\1\0\1\251"+
    "\1\0\1\252\2\0\1\253\1\254\1\255";

  private static int [] zzUnpackAction() {
    int [] result = new int[858];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\74\0\74\0\360"+
    "\0\74\0\u012c\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\74"+
    "\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\74\0\74"+
    "\0\74\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\74\0\u1d88"+
    "\0\74\0\u1dc4\0\74\0\74\0\u1e00\0\74\0\u1e3c\0\u1e78"+
    "\0\74\0\74\0\74\0\u1eb4\0\74\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\74\0\u201c\0\74\0\74\0\74\0\74"+
    "\0\u2058\0\74\0\74\0\u2094\0\u20d0\0\u210c\0\74\0\74"+
    "\0\74\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0"+
    "\0\74\0\u22ec\0\74\0\u2328\0\74\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\74\0\u2454\0\74\0\74\0\74\0\u2490\0\u24cc"+
    "\0\u2508\0\74\0\74\0\74\0\u2544\0\74\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u2db4\0\u2df0\0\74\0\74\0\74\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\74\0\74\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0"+
    "\0\u300c\0\u3048\0\u3084\0\74\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\74\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318"+
    "\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\74\0\u3480\0\74"+
    "\0\74\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804"+
    "\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4"+
    "\0\74\0\74\0\74\0\u3a20\0\u3a5c\0\u3a98\0\74\0\u3ad4"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4"+
    "\0\u3c00\0\u3c3c\0\u3c78\0\74\0\74\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\74\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0"+
    "\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0"+
    "\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290"+
    "\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470"+
    "\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650"+
    "\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830"+
    "\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10"+
    "\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0"+
    "\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74\0\u4fb0"+
    "\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118\0\u5154\0\u5190"+
    "\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8\0\u5334\0\u5370"+
    "\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8\0\u5514\0\u5550"+
    "\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c\0\u56b8\0\u56f4\0\u5730"+
    "\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c\0\u5898\0\u58d4\0\u5910"+
    "\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0"+
    "\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0"+
    "\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74\0\u5eb0"+
    "\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc\0\u6018\0\u6054\0\u6090"+
    "\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc\0\u61f8\0\u6234\0\u6270"+
    "\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u639c\0\u63d8\0\u6414\0\u6450"+
    "\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c\0\u65b8\0\u65f4\0\u6630"+
    "\0\u666c\0\u66a8\0\u66e4\0\u6720\0\u675c\0\u6798\0\u67d4\0\u6810"+
    "\0\u684c\0\u6888\0\u68c4\0\u6900\0\u693c\0\u6978\0\u69b4\0\u69f0"+
    "\0\u6a2c\0\u6a68\0\u6aa4\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94\0\u6bd0"+
    "\0\u6c0c\0\u6c48\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38\0\u6d74\0\u6db0"+
    "\0\u6dec\0\u6e28\0\u6e64\0\u6ea0\0\u6edc\0\u6f18\0\u6f54\0\u6f90"+
    "\0\u6fcc\0\u7008\0\u7044\0\u7080\0\u70bc\0\u70f8\0\u7134\0\u7170"+
    "\0\u71ac\0\u71e8\0\u7224\0\u7260\0\u729c\0\u72d8\0\u7314\0\u7350"+
    "\0\u738c\0\u73c8\0\u7404\0\u7440\0\u747c\0\u74b8\0\u74f4\0\u7530"+
    "\0\u756c\0\u75a8\0\u75e4\0\u7620\0\u765c\0\u7698\0\u76d4\0\u7710"+
    "\0\u774c\0\u7788\0\u77c4\0\u7800\0\u783c\0\u7878\0\u78b4\0\u78f0"+
    "\0\u792c\0\u7788\0\u7968\0\u79a4\0\u79e0\0\u7a1c\0\u7a58\0\u7a94"+
    "\0\u7ad0\0\u7b0c\0\u7b48\0\u7b84\0\u7bc0\0\u7bfc\0\u7c38\0\74"+
    "\0\u7c74\0\u7cb0\0\u7cec\0\u7d28\0\u7d64\0\u7da0\0\74\0\u7ddc"+
    "\0\u7e18\0\u7e54\0\u7e90\0\74\0\u7ecc\0\u7f08\0\74\0\u7f44"+
    "\0\u7f80\0\74\0\u7fbc\0\u7ff8\0\74\0\u8034\0\74\0\u8070"+
    "\0\u80ac\0\u80e8\0\u8124\0\74\0\u8160\0\u819c\0\u81d8\0\u8214"+
    "\0\u8250\0\u828c\0\74\0\u82c8\0\74\0\74\0\u8304\0\74"+
    "\0\74\0\u8340\0\74\0\74\0\u837c\0\74\0\u83b8\0\74"+
    "\0\u83f4\0\74\0\u8430\0\74\0\u846c\0\u84a8\0\u84e4\0\u8520"+
    "\0\u855c\0\u8598\0\u85d4\0\u8610\0\u864c\0\u8688\0\u86c4\0\74"+
    "\0\u8700\0\u873c\0\u8778\0\74\0\u87b4\0\74\0\74\0\u87f0"+
    "\0\74\0\u882c\0\u8868\0\74\0\74\0\u88a4\0\74\0\u88e0"+
    "\0\u891c\0\u88e0\0\74\0\u8958\0\u8994\0\74\0\u89d0\0\u8a0c"+
    "\0\u8a48\0\u8a84\0\u8ac0\0\u8afc\0\u8ac0\0\74\0\74\0\u8b38"+
    "\0\74\0\u8b74\0\u8bb0\0\u8b74\0\74\0\u8bec\0\u8c28\0\u8c64"+
    "\0\74\0\u8ca0\0\u8cdc\0\u8d18\0\u8cdc\0\74\0\u8d54\0\u8d90"+
    "\0\u8dcc\0\74\0\u8e08\0\u8e44\0\u8e08\0\74\0\74\0\74"+
    "\0\u8e80\0\u8ebc\0\u8e80\0\74\0\74\0\u8ef8\0\74\0\74"+
    "\0\u8f34\0\74\0\u8f70\0\u8fac\0\u8f70\0\74\0\u8fe8\0\u9024"+
    "\0\u8fe8\0\74\0\u9060\0\u909c\0\u9060\0\74\0\u90d8\0\u9114"+
    "\0\u90d8\0\74\0\u9150\0\u918c\0\u9150\0\74\0\u91c8\0\u9204"+
    "\0\u91c8\0\74\0\u9240\0\u927c\0\u9240\0\74\0\74\0\u92b8"+
    "\0\74\0\74\0\u92f4\0\74\0\u9330\0\74\0\u936c\0\74"+
    "\0\u93a8\0\u93e4\0\u93a8\0\74\0\u9420\0\u945c\0\74\0\u9498"+
    "\0\u94d4\0\u9498\0\74\0\u9510\0\u954c\0\u9510\0\74\0\u9588"+
    "\0\u95c4\0\u9600\0\u95c4\0\74\0\u963c\0\u9678\0\u963c\0\74"+
    "\0\u96b4\0\u96f0\0\u972c\0\u9768\0\u97a4\0\u97e0\0\u981c\0\u9858"+
    "\0\u9894\0\u98d0\0\u9894\0\74\0\74\0\74\0\74\0\u990c"+
    "\0\u9948\0\u990c\0\74\0\u9984\0\u99c0\0\u9984\0\74\0\u99fc"+
    "\0\u9a38\0\u99fc\0\74\0\u9a74\0\u9ab0\0\u9a74\0\74\0\u9aec"+
    "\0\u9b28\0\u9aec\0\74\0\u9b64\0\u9ba0\0\u9b64\0\74\0\u9bdc"+
    "\0\u9c18\0\u9c54\0\u9c18\0\74\0\74\0\u9c90\0\74\0\u9ccc"+
    "\0\u9d08\0\u9d44\0\u9d80\0\u9dbc\0\74\0\74\0\u9df8\0\u9e34"+
    "\0\74\0\u9e70\0\74\0\u9eac\0\74\0\u9ee8\0\u9f24\0\74"+
    "\0\74\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[858];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\0\1\20\1\0\1\21\1\22\1\23\1\24"+
    "\1\25\1\0\1\26\1\27\1\30\4\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\0\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\1\46\1\47\4\0"+
    "\1\4\1\0\1\50\76\0\1\2\104\0\56\51\3\0"+
    "\2\10\1\2\1\3\70\10\15\0\1\52\1\0\1\53"+
    "\10\0\1\54\4\0\1\55\54\0\1\56\4\0\1\57"+
    "\1\60\1\0\1\61\5\0\1\62\1\63\53\0\1\64"+
    "\10\0\1\65\1\66\1\0\1\67\1\70\55\0\1\71"+
    "\3\0\1\72\103\0\1\73\1\74\1\0\1\75\56\0"+
    "\1\76\1\77\73\0\1\100\10\0\1\101\62\0\1\102"+
    "\15\0\1\103\75\0\1\104\54\0\1\105\10\0\1\106"+
    "\76\0\1\107\74\0\1\110\1\0\1\111\65\0\1\112"+
    "\57\0\1\113\2\0\1\114\15\0\1\115\1\116\50\0"+
    "\1\117\1\120\2\0\1\121\11\0\1\122\2\0\1\123"+
    "\102\0\1\124\1\0\1\125\7\0\1\126\4\0\1\127"+
    "\55\0\1\130\4\0\1\131\1\132\1\133\5\0\1\134"+
    "\1\135\54\0\1\136\7\0\1\137\1\140\1\0\1\141"+
    "\1\142\56\0\1\143\3\0\1\144\102\0\1\145\1\146"+
    "\1\0\1\147\57\0\1\150\1\151\73\0\1\152\7\0"+
    "\1\153\63\0\1\154\14\0\1\155\75\0\1\156\55\0"+
    "\1\157\7\0\1\160\76\0\1\161\74\0\1\162\1\0"+
    "\1\163\65\0\1\164\60\0\1\165\2\0\1\166\14\0"+
    "\1\167\1\170\51\0\1\171\1\172\2\0\1\173\10\0"+
    "\1\174\2\0\1\175\23\0\56\176\17\0\1\177\24\0"+
    "\1\200\1\201\47\0\1\202\1\203\73\0\1\204\102\0"+
    "\1\205\5\0\1\206\55\0\1\207\7\0\1\210\6\0"+
    "\1\207\62\0\1\211\10\0\1\207\74\0\1\212\66\0"+
    "\1\207\3\0\1\213\52\0\1\214\1\0\1\215\11\0"+
    "\1\216\4\0\1\217\56\0\1\220\67\0\1\221\75\0"+
    "\1\222\5\0\1\223\7\0\1\224\3\0\1\225\65\0"+
    "\1\226\70\0\1\227\63\0\1\230\21\0\1\231\1\232"+
    "\45\0\1\233\75\0\1\234\16\0\1\235\3\0\1\236"+
    "\1\237\50\0\1\240\110\0\1\241\76\0\1\242\51\0"+
    "\1\243\102\0\1\244\73\0\1\245\65\0\1\246\16\0"+
    "\1\247\3\0\1\250\1\251\45\0\1\252\2\0\1\253"+
    "\15\0\1\254\3\0\1\255\1\256\57\0\1\257\5\0"+
    "\1\260\65\0\1\261\67\0\1\262\103\0\1\263\55\0"+
    "\1\264\5\0\1\265\74\0\1\266\76\0\1\267\73\0"+
    "\1\270\5\0\1\271\53\0\1\272\1\0\1\273\73\0"+
    "\1\274\5\0\1\275\13\0\1\276\47\0\1\277\2\0"+
    "\1\300\71\0\1\301\73\0\1\302\14\0\1\303\55\0"+
    "\1\304\114\0\1\305\52\0\1\306\115\0\1\307\100\0"+
    "\1\177\23\0\1\200\1\201\50\0\1\310\1\311\73\0"+
    "\1\312\101\0\1\313\5\0\1\314\56\0\1\207\6\0"+
    "\1\315\6\0\1\207\63\0\1\211\7\0\1\207\74\0"+
    "\1\316\66\0\1\207\3\0\1\213\53\0\1\214\1\0"+
    "\1\317\10\0\1\216\4\0\1\320\57\0\1\321\67\0"+
    "\1\221\75\0\1\222\5\0\1\223\6\0\1\322\3\0"+
    "\1\225\65\0\1\323\70\0\1\324\64\0\1\230\20\0"+
    "\1\231\1\232\46\0\1\233\75\0\1\325\15\0\1\235"+
    "\3\0\1\236\1\237\51\0\1\240\107\0\1\326\76\0"+
    "\1\242\52\0\1\243\102\0\1\327\73\0\1\330\65\0"+
    "\1\246\15\0\1\247\3\0\1\250\1\251\46\0\1\331"+
    "\2\0\1\253\14\0\1\254\3\0\1\255\1\256\57\0"+
    "\1\332\5\0\1\333\65\0\1\261\70\0\1\334\102\0"+
    "\1\263\56\0\1\335\5\0\1\265\74\0\1\336\75\0"+
    "\1\337\73\0\1\340\5\0\1\341\54\0\1\272\1\0"+
    "\1\342\73\0\1\274\5\0\1\275\12\0\1\276\50\0"+
    "\1\343\2\0\1\300\71\0\1\344\73\0\1\302\13\0"+
    "\1\303\56\0\1\304\113\0\1\345\53\0\1\306\114\0"+
    "\1\346\22\0\56\347\17\0\1\350\73\0\1\351\2\0"+
    "\1\352\70\0\1\353\73\0\1\354\1\355\1\0\1\356"+
    "\55\0\2\357\1\360\1\357\1\0\1\361\5\0\1\362"+
    "\1\363\112\0\1\364\53\0\1\365\105\0\1\366\65\0"+
    "\1\367\111\0\1\370\36\0\2\371\1\372\1\371\1\0"+
    "\1\373\5\0\1\374\73\0\1\375\60\0\2\376\1\377"+
    "\1\376\1\0\1\u0100\5\0\1\u0101\60\0\2\u0102\1\u0103"+
    "\1\u0102\1\0\1\u0104\66\0\2\u0105\1\u0106\1\u0105\1\0"+
    "\1\u0107\66\0\2\u0108\1\u0109\1\u0108\1\0\1\u010a\66\0"+
    "\2\u010b\1\u010c\1\u010b\1\0\1\u010d\5\0\1\u010e\73\0"+
    "\1\u010f\117\0\1\u0110\73\0\1\u0111\34\0\2\u0112\1\u0113"+
    "\1\u0112\1\0\1\u0114\101\0\1\u0115\1\u0116\57\0\2\u0117"+
    "\1\u0118\1\u0117\1\0\1\u0119\66\0\2\u011a\1\u011b\1\u011a"+
    "\1\0\1\u011c\66\0\2\u011d\1\u011e\1\u011d\1\0\1\u011f"+
    "\66\0\2\u0120\1\u0121\1\u0120\1\0\1\u0122\66\0\2\u0123"+
    "\1\u0124\1\u0123\1\0\1\u0125\5\0\1\354\1\355\1\0"+
    "\1\356\55\0\2\u0126\1\u0127\1\u0126\1\0\1\u0128\5\0"+
    "\1\u0129\1\u012a\1\0\1\u012b\55\0\2\u012c\1\u012d\1\u012c"+
    "\1\0\1\u012e\5\0\1\u012f\73\0\1\u0130\73\0\1\u0131"+
    "\1\u0132\23\0\1\u0133\1\u0134\45\0\1\u0135\1\u0136\23\0"+
    "\1\u0137\1\u0138\45\0\1\u0139\1\u013a\72\0\1\u013b\1\u013c"+
    "\72\0\1\u013d\73\0\1\u013e\1\u013f\57\0\2\u0140\1\u0141"+
    "\1\u0140\1\0\1\u0142\104\0\1\u0143\112\0\1\u0144\51\0"+
    "\1\u0145\122\0\1\350\73\0\1\351\2\0\1\352\70\0"+
    "\1\353\73\0\1\354\1\355\1\0\1\356\26\0\2\357"+
    "\1\360\1\357\1\0\1\361\34\0\1\362\1\363\111\0"+
    "\1\364\54\0\1\365\104\0\1\u0146\66\0\1\u0147\110\0"+
    "\1\370\10\0\2\371\1\372\1\371\36\0\1\374\73\0"+
    "\1\375\31\0\2\376\1\377\1\376\1\0\1\u0100\34\0"+
    "\1\u0101\31\0\2\u010b\1\u010c\1\u010b\1\0\1\u010d\34\0"+
    "\1\u010e\73\0\1\u010f\116\0\1\u0110\73\0\1\u0111\50\0"+
    "\1\u0115\1\u0116\30\0\2\u0123\1\u0124\1\u0123\1\0\1\u0125"+
    "\34\0\1\354\1\355\1\0\1\356\26\0\2\u0126\1\u0127"+
    "\1\u0126\1\0\1\u0128\34\0\1\u0129\1\u012a\1\0\1\u012b"+
    "\26\0\2\u012c\1\u012d\1\u012c\1\0\1\u012e\34\0\1\u012f"+
    "\73\0\1\u0130\73\0\1\u0131\1\u0132\22\0\1\u0133\1\u0134"+
    "\46\0\1\u0135\1\u0136\22\0\1\u0137\1\u0138\46\0\1\u0139"+
    "\1\u013a\72\0\1\u013b\1\u013c\72\0\1\u013d\73\0\1\u0148"+
    "\1\u013f\75\0\1\u0143\111\0\1\u0144\52\0\1\u0145\43\0"+
    "\56\u0149\4\0\2\u014a\1\u014b\1\u014a\1\0\1\u014c\66\0"+
    "\2\u014d\1\u014e\1\u014d\1\0\1\u014f\66\0\2\u0150\1\u0151"+
    "\1\u0150\1\0\1\u0152\66\0\2\u0153\1\u0154\1\u0153\1\0"+
    "\1\u0155\73\0\1\u0156\67\0\1\357\3\0\1\u0156\100\0"+
    "\56\u0157\4\0\2\u0158\1\u0159\1\u0158\1\0\1\u015a\66\0"+
    "\2\u015b\1\u015c\1\u015b\123\0\1\u015d\75\0\1\u015e\36\0"+
    "\2\u015f\1\u0160\1\u015f\1\0\1\u0161\73\0\1\u0162\67\0"+
    "\1\371\3\0\1\u0162\100\0\56\u0163\4\0\2\u0164\1\u0165"+
    "\1\u0164\1\0\1\u0166\73\0\1\u0167\67\0\1\376\3\0"+
    "\1\u0167\100\0\56\u0168\10\0\1\u0169\1\u016a\67\0\1\u0102"+
    "\2\0\1\u0169\1\u016a\100\0\56\u016b\10\0\1\u016c\1\u016d"+
    "\67\0\1\u0105\2\0\1\u016c\1\u016d\100\0\56\u016e\10\0"+
    "\1\u016f\1\u0170\67\0\1\u0108\2\0\1\u016f\1\u0170\100\0"+
    "\56\u0171\11\0\1\u0172\67\0\1\u010b\3\0\1\u0172\100\0"+
    "\56\u0173\4\0\2\u0174\1\u0175\1\u0174\1\0\1\u0176\73\0"+
    "\1\u0177\67\0\1\u0112\3\0\1\u0177\100\0\56\u0178\4\0"+
    "\2\u0179\1\u017a\1\u0179\1\0\1\u017b\66\0\2\u017c\1\u017d"+
    "\1\u017c\1\0\1\u017e\72\0\1\u017f\1\u0180\67\0\1\u0117"+
    "\2\0\1\u017f\1\u0180\100\0\56\u0181\10\0\1\u0182\1\u0183"+
    "\67\0\1\u011a\2\0\1\u0182\1\u0183\100\0\56\u0184\10\0"+
    "\1\u0185\1\u0186\67\0\1\u011d\2\0\1\u0185\1\u0186\100\0"+
    "\56\u0187\10\0\1\u0188\1\u0189\67\0\1\u0120\2\0\1\u0188"+
    "\1\u0189\100\0\56\u018a\11\0\1\u018b\67\0\1\u0123\3\0"+
    "\1\u018b\100\0\56\u018c\11\0\1\u018d\67\0\1\u0126\3\0"+
    "\1\u018d\100\0\56\u018e\11\0\1\u018f\67\0\1\u012c\3\0"+
    "\1\u018f\100\0\56\u0190\4\0\2\u0191\1\u0192\1\u0191\1\0"+
    "\1\u0193\66\0\2\u0194\1\u0195\1\u0194\1\0\1\u0196\66\0"+
    "\2\u0197\1\u0198\1\u0197\1\0\1\u0199\66\0\2\u019a\1\u019b"+
    "\1\u019a\1\0\1\u019c\73\0\1\u019d\67\0\1\u0140\3\0"+
    "\1\u019d\100\0\56\u019e\4\0\2\u019f\1\u01a0\1\u019f\1\0"+
    "\1\u01a1\147\0\1\u015d\75\0\1\u015e\10\0\2\u0197\1\u0198"+
    "\1\u0197\1\0\1\u01a2\72\0\1\u01a3\1\u01a4\67\0\1\u014a"+
    "\2\0\1\u01a3\1\u01a4\100\0\56\u01a5\10\0\1\u01a6\1\u01a7"+
    "\67\0\1\u014d\2\0\1\u01a6\1\u01a7\100\0\56\u01a8\10\0"+
    "\1\u01a9\1\u01aa\67\0\1\u0150\2\0\1\u01a9\1\u01aa\100\0"+
    "\56\u01ab\10\0\1\u01ac\1\u01ad\67\0\1\u0153\2\0\1\u01ac"+
    "\1\u01ad\100\0\56\u01ae\16\0\56\u01af\16\0\56\u01b0\11\0"+
    "\1\u015a\67\0\1\u0158\3\0\1\u015a\100\0\56\u01b1\10\0"+
    "\1\u01b2\70\0\1\u015b\2\0\1\u01b2\67\0\2\u01b3\1\u01b4"+
    "\1\u01b3\1\0\1\u01b5\66\0\2\u01b6\1\u01b7\1\u01b6\1\0"+
    "\1\u01b8\73\0\1\u0161\67\0\1\u015f\3\0\1\u0161\100\0"+
    "\56\u01b9\16\0\56\u01ba\16\0\56\u01bb\10\0\1\u01bc\1\u01bd"+
    "\67\0\1\u0164\2\0\1\u01bc\1\u01bd\100\0\56\u01be\16\0"+
    "\56\u01bf\16\0\56\u01c0\11\0\1\u01c1\100\0\56\u01c2\16\0"+
    "\56\u01c3\11\0\1\u01c4\100\0\56\u01c5\16\0\56\u01c6\11\0"+
    "\1\u01c7\100\0\56\u01c8\16\0\56\u01c9\16\0\56\u01ca\16\0"+
    "\56\u01cb\10\0\1\u01cc\1\u01cd\67\0\1\u0174\2\0\1\u01cc"+
    "\1\u01cd\100\0\56\u01ce\16\0\56\u01cf\16\0\56\u01d0\10\0"+
    "\1\u01d1\1\u01d2\67\0\1\u0179\2\0\1\u01d1\1\u01d2\100\0"+
    "\56\u01d3\10\0\1\u01d4\1\u01d5\67\0\1\u017c\2\0\1\u01d4"+
    "\1\u01d5\100\0\56\u01d6\11\0\1\u01d7\100\0\56\u01d8\16\0"+
    "\56\u01d9\11\0\1\u01da\100\0\56\u01db\16\0\56\u01dc\11\0"+
    "\1\u01dd\100\0\56\u01de\16\0\56\u01df\11\0\1\u01e0\100\0"+
    "\56\u01e1\16\0\56\u01e2\16\0\56\u01e3\16\0\56\u01e4\16\0"+
    "\56\u01e5\16\0\56\u01e6\16\0\56\u01e7\16\0\56\u01e8\10\0"+
    "\1\u01e9\1\u01ea\67\0\1\u0191\2\0\1\u01e9\1\u01ea\100\0"+
    "\56\u01eb\10\0\1\u01ec\1\u01ed\67\0\1\u0194\2\0\1\u01ec"+
    "\1\u01ed\100\0\56\u01ee\11\0\1\u01ef\67\0\1\u0197\3\0"+
    "\1\u01ef\100\0\56\u01f0\11\0\1\u01f1\67\0\1\u019a\3\0"+
    "\1\u01f1\100\0\56\u01f2\16\0\56\u01f3\16\0\56\u01f4\10\0"+
    "\1\u01f5\1\u01f6\67\0\1\u019f\2\0\1\u01f5\1\u01f6\100\0"+
    "\56\u01f7\16\0\56\u01f8\11\0\1\u01f9\100\0\56\u01fa\16\0"+
    "\56\u01fb\11\0\1\u01fc\100\0\56\u01fd\16\0\56\u01fe\11\0"+
    "\1\u01ff\100\0\56\u0200\16\0\56\u0201\11\0\1\u0202\100\0"+
    "\56\u0203\16\0\56\u0204\16\0\56\u0205\16\0\56\u0206\16\0"+
    "\56\u0207\11\0\1\u0208\73\0\1\u01b5\67\0\1\u01b3\3\0"+
    "\1\u01b5\100\0\56\u0209\11\0\1\u01b8\67\0\1\u01b6\3\0"+
    "\1\u01b8\100\0\56\u020a\16\0\56\u020b\16\0\56\u020c\16\0"+
    "\56\u020d\11\0\1\u020e\100\0\56\u020f\16\0\56\u0210\16\0"+
    "\56\u0211\16\0\56\u0212\16\0\56\u0213\16\0\56\u0214\16\0"+
    "\56\u0215\16\0\56\u0216\16\0\56\u0217\16\0\56\u0218\16\0"+
    "\56\u0219\16\0\56\u021a\16\0\56\u021b\16\0\56\u021c\16\0"+
    "\56\u021d\11\0\1\u021e\100\0\56\u021f\16\0\56\u0220\16\0"+
    "\56\u0221\16\0\56\u0222\11\0\1\u0223\100\0\56\u0224\16\0"+
    "\56\u0225\11\0\1\u0226\100\0\56\u0227\16\0\56\u0228\16\0"+
    "\56\u0229\16\0\56\u022a\16\0\56\u022b\16\0\56\u022c\16\0"+
    "\56\u022d\16\0\56\u022e\16\0\56\u022f\16\0\56\u0230\16\0"+
    "\56\u0231\16\0\56\u0232\16\0\56\u0233\16\0\56\u0234\16\0"+
    "\56\u0235\16\0\56\u0236\16\0\56\u0237\16\0\56\u0238\16\0"+
    "\56\u0239\16\0\56\u023a\11\0\1\u023b\100\0\56\u023c\16\0"+
    "\56\u023d\11\0\1\u023e\100\0\56\u023f\16\0\56\u0240\16\0"+
    "\56\u0241\16\0\56\u0242\16\0\56\u0243\16\0\56\u0244\16\0"+
    "\56\u0245\16\0\56\u0246\11\0\1\u0247\100\0\56\u0248\16\0"+
    "\56\u0249\16\0\56\u024a\16\0\56\u024b\16\0\56\u024c\16\0"+
    "\56\u024d\16\0\56\u024e\16\0\56\u024f\16\0\56\u0250\16\0"+
    "\56\u0251\16\0\56\u0252\16\0\56\u0253\16\0\56\u0254\16\0"+
    "\56\u0255\16\0\56\u0256\15\0\1\u0257\56\u0206\16\0\56\u0258"+
    "\15\0\1\u0259\74\0\56\u025a\16\0\56\u025b\16\0\56\u025c"+
    "\15\0\1\u025d\73\0\1\u025e\56\u020d\16\0\56\u025f\16\0"+
    "\56\u0260\16\0\56\u0261\16\0\56\u0262\15\0\1\u0263\56\u0212"+
    "\16\0\56\u0264\16\0\56\u0265\15\0\1\u0266\56\u0215\16\0"+
    "\56\u0267\16\0\56\u0268\15\0\1\u0269\56\u0218\16\0\56\u026a"+
    "\16\0\56\u026b\15\0\1\u026c\56\u021b\16\0\56\u026d\15\0"+
    "\1\u026e\56\u021d\16\0\56\u026f\16\0\56\u0270\16\0\56\u0271"+
    "\16\0\56\u0272\15\0\1\u0273\56\u0222\16\0\56\u0274\16\0"+
    "\56\u0275\16\0\56\u0276\16\0\56\u0277\16\0\56\u0278\16\0"+
    "\56\u0279\16\0\56\u027a\16\0\56\u027b\15\0\1\u027c\56\u022b"+
    "\16\0\56\u027d\16\0\56\u027e\15\0\1\u027f\56\u022e\16\0"+
    "\56\u0280\16\0\56\u0281\15\0\1\u0282\56\u0231\16\0\56\u0283"+
    "\16\0\56\u0284\15\0\1\u0285\56\u0234\16\0\56\u0286\15\0"+
    "\1\u0287\56\u0236\16\0\56\u0288\15\0\1\u0289\56\u0238\16\0"+
    "\56\u028a\15\0\1\u028b\56\u023a\16\0\56\u028c\16\0\56\u028d"+
    "\16\0\56\u028e\16\0\56\u028f\16\0\56\u0290\16\0\56\u0291"+
    "\16\0\56\u0292\16\0\56\u0293\16\0\56\u0294\16\0\56\u0295"+
    "\16\0\56\u0296\15\0\1\u0297\56\u0246\16\0\56\u0298\16\0"+
    "\56\u0299\16\0\56\u029a\16\0\56\u029b\16\0\56\u029c\15\0"+
    "\1\u029d\56\u024d\16\0\56\u029e\16\0\56\u029f\15\0\1\u02a0"+
    "\56\u0250\16\0\56\u02a1\16\0\56\u02a2\15\0\1\u02a3\56\u0253"+
    "\16\0\56\u02a4\16\0\56\u02a5\15\0\1\u02a6\56\u0256\16\0"+
    "\56\u02a7\4\0\2\u02a8\1\u02a9\1\u02aa\34\0\2\u02ab\24\0"+
    "\2\u02ab\1\0\1\u02ab\5\0\1\u02ac\1\u02ad\33\0\2\u02ac"+
    "\24\0\2\u02ac\1\0\1\u02ac\14\0\56\u02ae\15\0\1\u02af"+
    "\73\0\1\u02b0\65\0\1\u02b1\1\u02b2\33\0\2\u02b1\24\0"+
    "\2\u02b1\1\0\1\u02b1\2\0\2\u02b3\1\u02b4\1\u02b5\34\0"+
    "\2\u02b6\24\0\2\u02b6\1\0\1\u02b6\14\0\56\u02b7\15\0"+
    "\1\u02b8\56\u0262\16\0\56\u02b9\4\0\2\u02ba\1\u02bb\1\u02bc"+
    "\34\0\2\u02bd\24\0\2\u02bd\1\0\1\u02bd\14\0\56\u02be"+
    "\4\0\2\u02bf\1\u02c0\1\u02bf\7\0\55\u02c1\16\0\56\u02c2"+
    "\4\0\2\u02c3\1\u02c4\1\u02c5\34\0\2\u02c6\24\0\2\u02c6"+
    "\1\0\1\u02c6\14\0\56\u02c7\4\0\2\u02c8\1\u02c9\1\u02c8"+
    "\7\0\55\u02ca\4\0\2\u02cb\1\u02cc\1\u02cd\34\0\2\u02ce"+
    "\24\0\2\u02ce\1\0\1\u02ce\14\0\56\u02cf\15\0\1\u0287"+
    "\56\u0272\16\0\56\u02d0\4\0\2\u02d1\1\u02d2\1\u02d3\34\0"+
    "\2\u02d4\24\0\2\u02d4\1\0\1\u02d4\14\0\56\u02d5\15\0"+
    "\1\u02d6\56\u0277\16\0\56\u02d7\16\0\56\u02d8\15\0\1\u02d9"+
    "\56\u027a\16\0\56\u02da\4\0\2\u02db\1\u02dc\1\u02dd\34\0"+
    "\2\u02de\24\0\2\u02de\1\0\1\u02de\2\0\2\u02df\1\u02e0"+
    "\1\u02e1\34\0\2\u02e2\24\0\2\u02e2\1\0\1\u02e2\2\0"+
    "\2\u02e3\1\u02e4\1\u02e5\34\0\2\u02e6\24\0\2\u02e6\1\0"+
    "\1\u02e6\2\0\2\u02e7\1\u02e8\1\u02e9\34\0\2\u02ea\24\0"+
    "\2\u02ea\1\0\1\u02ea\2\0\2\u02eb\1\u02ec\1\u02ed\34\0"+
    "\2\u02ee\24\0\2\u02ee\1\0\1\u02ee\2\0\2\u02ef\1\u02f0"+
    "\1\u02f1\34\0\2\u02f2\24\0\2\u02f2\1\0\1\u02f2\2\0"+
    "\2\u02f3\1\u02f4\1\u02f5\34\0\2\u02f6\24\0\2\u02f6\1\0"+
    "\1\u02f6\14\0\56\u02f7\15\0\1\u02f8\56\u028f\16\0\56\u02f9"+
    "\16\0\56\u02fa\15\0\1\u02fb\56\u0292\16\0\56\u02fc\15\0"+
    "\1\u02fd\56\u0294\16\0\56\u02fe\15\0\1\u02ff\56\u0296\16\0"+
    "\56\u0300\4\0\2\u0301\1\u0302\1\u0303\34\0\2\u0304\24\0"+
    "\2\u0304\1\0\1\u0304\14\0\56\u0305\15\0\1\u0306\56\u029b"+
    "\16\0\56\u0307\4\0\2\u0308\1\u0309\1\u030a\34\0\2\u030b"+
    "\24\0\2\u030b\1\0\1\u030b\2\0\2\u030c\1\u030d\1\u030e"+
    "\34\0\2\u030f\24\0\2\u030f\1\0\1\u030f\14\0\56\u0310"+
    "\4\0\2\u0311\1\u0312\1\u0313\34\0\2\u0314\24\0\2\u0314"+
    "\1\0\1\u0314\2\0\2\u0315\1\u0316\1\u0317\34\0\2\u0318"+
    "\24\0\2\u0318\1\0\1\u0318\5\0\1\u02ab\34\0\2\u02ab"+
    "\24\0\2\u02ab\1\0\1\u02ab\3\0\1\u02a8\1\0\1\u02ab"+
    "\34\0\2\u02ab\24\0\2\u02ab\1\0\1\u02ab\13\0\1\u0319"+
    "\74\0\56\u031a\7\0\1\u031b\1\u031c\33\0\2\u031b\24\0"+
    "\2\u031b\1\0\1\u031b\5\0\1\u031d\1\u031e\33\0\2\u031d"+
    "\24\0\2\u031d\1\0\1\u031d\13\0\1\u031f\74\0\56\u0320"+
    "\7\0\1\u02b6\34\0\2\u02b6\24\0\2\u02b6\1\0\1\u02b6"+
    "\3\0\1\u02b3\1\0\1\u02b6\34\0\2\u02b6\24\0\2\u02b6"+
    "\1\0\1\u02b6\2\0\2\u0321\1\u0322\1\u0323\34\0\2\u0324"+
    "\24\0\2\u0324\1\0\1\u0324\5\0\1\u02bd\34\0\2\u02bd"+
    "\24\0\2\u02bd\1\0\1\u02bd\3\0\1\u02ba\1\0\1\u02bd"+
    "\34\0\2\u02bd\24\0\2\u02bd\1\0\1\u02bd\14\0\56\u0325"+
    "\7\0\1\u02c1\34\0\2\u02c1\24\0\2\u02c1\1\0\1\u02c1"+
    "\3\0\1\u02bf\1\0\1\u02c1\34\0\2\u02c1\24\0\2\u02c1"+
    "\1\0\1\u02c1\14\0\56\u0326\7\0\1\u02c6\34\0\2\u02c6"+
    "\24\0\2\u02c6\1\0\1\u02c6\3\0\1\u02c3\1\0\1\u02c6"+
    "\34\0\2\u02c6\24\0\2\u02c6\1\0\1\u02c6\14\0\56\u0327"+
    "\7\0\1\u02ca\34\0\2\u02ca\24\0\2\u02ca\1\0\1\u02ca"+
    "\3\0\1\u02c8\1\0\1\u02ca\34\0\2\u02ca\24\0\2\u02ca"+
    "\1\0\1\u02ca\5\0\1\u02ce\34\0\2\u02ce\24\0\2\u02ce"+
    "\1\0\1\u02ce\3\0\1\u02cb\1\0\1\u02ce\34\0\2\u02ce"+
    "\24\0\2\u02ce\1\0\1\u02ce\5\0\1\u02d4\34\0\2\u02d4"+
    "\24\0\2\u02d4\1\0\1\u02d4\3\0\1\u02d1\1\0\1\u02d4"+
    "\34\0\2\u02d4\24\0\2\u02d4\1\0\1\u02d4\2\0\2\u0328"+
    "\1\u0329\1\u032a\34\0\2\u032b\24\0\2\u032b\1\0\1\u032b"+
    "\2\0\2\u032c\1\u032d\1\u032e\34\0\2\u032f\24\0\2\u032f"+
    "\1\0\1\u032f\5\0\1\u02de\34\0\2\u02de\24\0\2\u02de"+
    "\1\0\1\u02de\3\0\1\u02db\1\0\1\u02de\34\0\2\u02de"+
    "\24\0\2\u02de\1\0\1\u02de\5\0\1\u02e2\34\0\2\u02e2"+
    "\24\0\2\u02e2\1\0\1\u02e2\3\0\1\u02df\1\0\1\u02e2"+
    "\34\0\2\u02e2\24\0\2\u02e2\1\0\1\u02e2\5\0\1\u02e6"+
    "\34\0\2\u02e6\24\0\2\u02e6\1\0\1\u02e6\3\0\1\u02e3"+
    "\1\0\1\u02e6\34\0\2\u02e6\24\0\2\u02e6\1\0\1\u02e6"+
    "\5\0\1\u02ea\34\0\2\u02ea\24\0\2\u02ea\1\0\1\u02ea"+
    "\3\0\1\u02e7\1\0\1\u02ea\34\0\2\u02ea\24\0\2\u02ea"+
    "\1\0\1\u02ea\5\0\1\u02ee\34\0\2\u02ee\24\0\2\u02ee"+
    "\1\0\1\u02ee\3\0\1\u02eb\1\0\1\u02ee\34\0\2\u02ee"+
    "\24\0\2\u02ee\1\0\1\u02ee\5\0\1\u02f2\34\0\2\u02f2"+
    "\24\0\2\u02f2\1\0\1\u02f2\3\0\1\u02ef\1\0\1\u02f2"+
    "\34\0\2\u02f2\24\0\2\u02f2\1\0\1\u02f2\5\0\1\u02f6"+
    "\34\0\2\u02f6\24\0\2\u02f6\1\0\1\u02f6\3\0\1\u02f3"+
    "\1\0\1\u02f6\34\0\2\u02f6\24\0\2\u02f6\1\0\1\u02f6"+
    "\2\0\2\u0330\1\u0331\1\u0332\34\0\2\u0333\24\0\2\u0333"+
    "\1\0\1\u0333\2\0\2\u0334\1\u0335\1\u0336\34\0\2\u0337"+
    "\24\0\2\u0337\1\0\1\u0337\2\0\2\u0338\1\u0339\1\u033a"+
    "\34\0\2\u033b\24\0\2\u033b\1\0\1\u033b\2\0\2\u033c"+
    "\1\u033d\1\u033e\34\0\2\u033f\24\0\2\u033f\1\0\1\u033f"+
    "\5\0\1\u0304\34\0\2\u0304\24\0\2\u0304\1\0\1\u0304"+
    "\3\0\1\u0301\1\0\1\u0304\34\0\2\u0304\24\0\2\u0304"+
    "\1\0\1\u0304\14\0\56\u0340\4\0\2\u0341\1\u0342\1\u0343"+
    "\34\0\2\u0344\24\0\2\u0344\1\0\1\u0344\5\0\1\u030b"+
    "\34\0\2\u030b\24\0\2\u030b\1\0\1\u030b\3\0\1\u0308"+
    "\1\0\1\u030b\34\0\2\u030b\24\0\2\u030b\1\0\1\u030b"+
    "\5\0\1\u030f\34\0\2\u030f\24\0\2\u030f\1\0\1\u030f"+
    "\3\0\1\u030c\1\0\1\u030f\34\0\2\u030f\24\0\2\u030f"+
    "\1\0\1\u030f\14\0\56\u0345\7\0\1\u0314\34\0\2\u0314"+
    "\24\0\2\u0314\1\0\1\u0314\3\0\1\u0311\1\0\1\u0314"+
    "\34\0\2\u0314\24\0\2\u0314\1\0\1\u0314\5\0\1\u0318"+
    "\34\0\2\u0318\24\0\2\u0318\1\0\1\u0318\3\0\1\u0315"+
    "\1\0\1\u0318\34\0\2\u0318\24\0\2\u0318\1\0\1\u0318"+
    "\6\0\1\u0346\101\0\56\u0347\15\0\1\u0348\74\0\56\u0349"+
    "\15\0\1\u034a\74\0\56\u034b\10\0\1\u034c\101\0\56\u034d"+
    "\7\0\1\u0324\34\0\2\u0324\24\0\2\u0324\1\0\1\u0324"+
    "\3\0\1\u0321\1\0\1\u0324\34\0\2\u0324\24\0\2\u0324"+
    "\1\0\1\u0324\5\0\1\u032b\34\0\2\u032b\24\0\2\u032b"+
    "\1\0\1\u032b\3\0\1\u0328\1\0\1\u032b\34\0\2\u032b"+
    "\24\0\2\u032b\1\0\1\u032b\5\0\1\u032f\34\0\2\u032f"+
    "\24\0\2\u032f\1\0\1\u032f\3\0\1\u032c\1\0\1\u032f"+
    "\34\0\2\u032f\24\0\2\u032f\1\0\1\u032f\5\0\1\u0333"+
    "\34\0\2\u0333\24\0\2\u0333\1\0\1\u0333\3\0\1\u0330"+
    "\1\0\1\u0333\34\0\2\u0333\24\0\2\u0333\1\0\1\u0333"+
    "\5\0\1\u0337\34\0\2\u0337\24\0\2\u0337\1\0\1\u0337"+
    "\3\0\1\u0334\1\0\1\u0337\34\0\2\u0337\24\0\2\u0337"+
    "\1\0\1\u0337\5\0\1\u033b\34\0\2\u033b\24\0\2\u033b"+
    "\1\0\1\u033b\3\0\1\u0338\1\0\1\u033b\34\0\2\u033b"+
    "\24\0\2\u033b\1\0\1\u033b\5\0\1\u033f\34\0\2\u033f"+
    "\24\0\2\u033f\1\0\1\u033f\3\0\1\u033c\1\0\1\u033f"+
    "\34\0\2\u033f\24\0\2\u033f\1\0\1\u033f\14\0\56\u034e"+
    "\7\0\1\u0344\34\0\2\u0344\24\0\2\u0344\1\0\1\u0344"+
    "\3\0\1\u0341\1\0\1\u0344\34\0\2\u0344\24\0\2\u0344"+
    "\1\0\1\u0344\14\0\56\u034f\10\0\1\u0350\101\0\56\u0351"+
    "\10\0\1\u0352\101\0\56\u0353\16\0\56\u0354\16\0\56\u0355"+
    "\16\0\56\u0356\16\0\56\u0357\16\0\56\u0358\16\0\56\u0359"+
    "\16\0\56\u035a\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\36\0\1\11\125\0\1\1\3\11\3\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0"+
    "\3\11\1\0\1\11\5\0\1\11\1\0\4\11\1\0"+
    "\2\11\3\0\3\11\7\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\1\11\1\0\3\11\3\0\3\11\1\0"+
    "\1\11\4\0\1\1\40\0\3\11\3\0\2\11\10\0"+
    "\1\11\4\0\1\11\14\0\1\11\1\0\2\11\27\0"+
    "\3\11\3\0\1\11\1\0\14\11\7\0\2\11\3\0"+
    "\1\11\171\0\1\1\2\0\1\1\2\0\1\1\17\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\21\0"+
    "\1\1\6\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\1\13\0\1\1\3\0\1\1\2\0\1\1\2\0"+
    "\1\1\12\0\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\11\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\2\1\3\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\2\0\1\1\2\0"+
    "\1\11\6\0\1\11\1\0\1\1\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\0\1\11\4\0"+
    "\1\11\1\0\1\1\2\0\1\1\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\11\1\0"+
    "\1\1\1\0\1\11\1\0\2\11\1\0\1\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\1\1\11\2\0\1\11"+
    "\6\0\1\1\2\11\1\0\1\11\2\0\1\1\1\11"+
    "\3\0\1\11\3\0\1\1\1\11\3\0\1\11\2\0"+
    "\1\1\3\11\2\0\1\1\2\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\1\1\11\2\0\1\1\1\11\2\0"+
    "\1\1\1\11\2\0\1\1\1\11\2\0\1\1\1\11"+
    "\2\0\1\1\1\11\2\0\1\1\2\11\1\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\1"+
    "\1\11\2\0\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\1\11\3\0\1\1\1\11\2\0\1\1\1\11\12\0"+
    "\1\1\4\11\2\0\1\1\1\11\2\0\1\1\1\11"+
    "\2\0\1\1\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\3\0\1\1\2\11\1\0"+
    "\1\11\5\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[858];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 174: break;
          case 2:
            { return token(yytext(),"LLAVE_A",yyline,yycolumn);
            }
            // fall through
          case 175: break;
          case 3:
            { return token(yytext(),"LLAVE_C",yyline,yycolumn);
            }
            // fall through
          case 176: break;
          case 4:
            { return token(yytext(),"PARENTESIS_A",yyline,yycolumn);
            }
            // fall through
          case 177: break;
          case 5:
            { return token(yytext(),"PARENTESIS_C",yyline,yycolumn);
            }
            // fall through
          case 178: break;
          case 6:
            { return token(yytext(),"COMA",yyline,yycolumn);
            }
            // fall through
          case 179: break;
          case 7:
            { return token(yytext(), "DirSimple", yyline, yycolumn);
            }
            // fall through
          case 180: break;
          case 8:
            { return token(yytext(),"Inst_ABA",yyline,yycolumn);
            }
            // fall through
          case 181: break;
          case 9:
            { return token(yytext(),"Inst_ABX",yyline,yycolumn);
            }
            // fall through
          case 182: break;
          case 10:
            { return token(yytext(),"Inst_ABY",yyline,yycolumn);
            }
            // fall through
          case 183: break;
          case 11:
            { return token(yytext(),"Inst_EORA_Index",yyline,yycolumn);
            }
            // fall through
          case 184: break;
          case 12:
            { return token(yytext(),"Inst_BCC",yyline,yycolumn);
            }
            // fall through
          case 185: break;
          case 13:
            { return token(yytext(),"Inst_BHI",yyline,yycolumn);
            }
            // fall through
          case 186: break;
          case 14:
            { return token(yytext(),"Inst_BLS",yyline,yycolumn);
            }
            // fall through
          case 187: break;
          case 15:
            { return token(yytext(),"Inst_BRA",yyline,yycolumn);
            }
            // fall through
          case 188: break;
          case 16:
            { return token(yytext(),"Inst_BRN",yyline,yycolumn);
            }
            // fall through
          case 189: break;
          case 17:
            { return token(yytext(),"Inst_CBA",yyline,yycolumn);
            }
            // fall through
          case 190: break;
          case 18:
            { return token(yytext(),"Inst_CLC",yyline,yycolumn);
            }
            // fall through
          case 191: break;
          case 19:
            { return token(yytext(),"Inst_CLI",yyline,yycolumn);
            }
            // fall through
          case 192: break;
          case 20:
            { return token(yytext(),"Inst_CLV",yyline,yycolumn);
            }
            // fall through
          case 193: break;
          case 21:
            { return token(yytext(),"Inst_DAA",yyline,yycolumn);
            }
            // fall through
          case 194: break;
          case 22:
            { return token(yytext(),"Inst_DES",yyline,yycolumn);
            }
            // fall through
          case 195: break;
          case 23:
            { return token(yytext(),"Inst_DEX",yyline,yycolumn);
            }
            // fall through
          case 196: break;
          case 24:
            { return token(yytext(),"Inst_DEY",yyline,yycolumn);
            }
            // fall through
          case 197: break;
          case 25:
            { return token(yytext(),"Directiva_END",yyline,yycolumn);
            }
            // fall through
          case 198: break;
          case 26:
            { return token(yytext(),"Directiva_EQU",yyline,yycolumn);
            }
            // fall through
          case 199: break;
          case 27:
            { return token(yytext(),"Directiva_FCB",yyline,yycolumn);
            }
            // fall through
          case 200: break;
          case 28:
            { return token(yytext(),"Inst_INS",yyline,yycolumn);
            }
            // fall through
          case 201: break;
          case 29:
            { return token(yytext(),"Inst_INX",yyline,yycolumn);
            }
            // fall through
          case 202: break;
          case 30:
            { return token(yytext(),"Inst_INY",yyline,yycolumn);
            }
            // fall through
          case 203: break;
          case 31:
            { return token(yytext(),"Inst_MUL",yyline,yycolumn);
            }
            // fall through
          case 204: break;
          case 32:
            { return token(yytext(),"Inst_NOP",yyline,yycolumn);
            }
            // fall through
          case 205: break;
          case 33:
            { return token(yytext(),"Directiva_ORG",yyline,yycolumn);
            }
            // fall through
          case 206: break;
          case 34:
            { return token(yytext(),"Inst_SBA",yyline,yycolumn);
            }
            // fall through
          case 207: break;
          case 35:
            { return token(yytext(),"Inst_SEC",yyline,yycolumn);
            }
            // fall through
          case 208: break;
          case 36:
            { return token(yytext(),"Inst_SEI",yyline,yycolumn);
            }
            // fall through
          case 209: break;
          case 37:
            { return token(yytext(),"Inst_SEV",yyline,yycolumn);
            }
            // fall through
          case 210: break;
          case 38:
            { return token(yytext(),"Inst_TAB",yyline,yycolumn);
            }
            // fall through
          case 211: break;
          case 39:
            { return token(yytext(),"Inst_TAP",yyline,yycolumn);
            }
            // fall through
          case 212: break;
          case 40:
            { return token(yytext(),"Inst_TBA",yyline,yycolumn);
            }
            // fall through
          case 213: break;
          case 41:
            { return token(yytext(),"Inst_TPA",yyline,yycolumn);
            }
            // fall through
          case 214: break;
          case 42:
            { return token(yytext(),"Inst_ASLA",yyline,yycolumn);
            }
            // fall through
          case 215: break;
          case 43:
            { return token(yytext(),"Inst_ASLB",yyline,yycolumn);
            }
            // fall through
          case 216: break;
          case 44:
            { return token(yytext(),"Inst_ASLD",yyline,yycolumn);
            }
            // fall through
          case 217: break;
          case 45:
            { return token(yytext(),"Inst_ASRA",yyline,yycolumn);
            }
            // fall through
          case 218: break;
          case 46:
            { return token(yytext(),"Inst_ASRB",yyline,yycolumn);
            }
            // fall through
          case 219: break;
          case 47:
            { return token(yytext(),"Inst_CLRA",yyline,yycolumn);
            }
            // fall through
          case 220: break;
          case 48:
            { return token(yytext(),"Inst_COMA",yyline,yycolumn);
            }
            // fall through
          case 221: break;
          case 49:
            { return token(yytext(),"Inst_DECA",yyline,yycolumn);
            }
            // fall through
          case 222: break;
          case 50:
            { return token(yytext(),"Inst_FDIV",yyline,yycolumn);
            }
            // fall through
          case 223: break;
          case 51:
            { return token(yytext(),"Inst_IDIV",yyline,yycolumn);
            }
            // fall through
          case 224: break;
          case 52:
            { return token(yytext(),"Inst_LSRA",yyline,yycolumn);
            }
            // fall through
          case 225: break;
          case 53:
            { return token(yytext(),"Inst_LSRB",yyline,yycolumn);
            }
            // fall through
          case 226: break;
          case 54:
            { return token(yytext(),"Inst_LSRD",yyline,yycolumn);
            }
            // fall through
          case 227: break;
          case 55:
            { return token(yytext(),"Inst_NEGA",yyline,yycolumn);
            }
            // fall through
          case 228: break;
          case 56:
            { return token(yytext(),"Inst_PSHA",yyline,yycolumn);
            }
            // fall through
          case 229: break;
          case 57:
            { return token(yytext(),"Inst_PSHB",yyline,yycolumn);
            }
            // fall through
          case 230: break;
          case 58:
            { return token(yytext(),"Inst_PSHX",yyline,yycolumn);
            }
            // fall through
          case 231: break;
          case 59:
            { return token(yytext(),"Inst_PSHY",yyline,yycolumn);
            }
            // fall through
          case 232: break;
          case 60:
            { return token(yytext(),"Inst_PULA",yyline,yycolumn);
            }
            // fall through
          case 233: break;
          case 61:
            { return token(yytext(),"Inst_PULB",yyline,yycolumn);
            }
            // fall through
          case 234: break;
          case 62:
            { return token(yytext(),"Inst_PULX",yyline,yycolumn);
            }
            // fall through
          case 235: break;
          case 63:
            { return token(yytext(),"Inst_PULY",yyline,yycolumn);
            }
            // fall through
          case 236: break;
          case 64:
            { return token(yytext(),"Inst_ROLA",yyline,yycolumn);
            }
            // fall through
          case 237: break;
          case 65:
            { return token(yytext(),"Inst_ROLB",yyline,yycolumn);
            }
            // fall through
          case 238: break;
          case 66:
            { return token(yytext(),"Inst_RORA",yyline,yycolumn);
            }
            // fall through
          case 239: break;
          case 67:
            { return token(yytext(),"Inst_RORB",yyline,yycolumn);
            }
            // fall through
          case 240: break;
          case 68:
            { return token(yytext(),"Inst_TEST",yyline,yycolumn);
            }
            // fall through
          case 241: break;
          case 69:
            { return token(yytext(),"Inst_TSTA",yyline,yycolumn);
            }
            // fall through
          case 242: break;
          case 70:
            { return token(yytext(), "DirExt", yyline, yycolumn);
            }
            // fall through
          case 243: break;
          case 71:
            { return token(yytext(),"Inst_CPD_Dir",yyline,yycolumn);
            }
            // fall through
          case 244: break;
          case 72:
            { return token(yytext(),"Inst_CPX_Dir",yyline,yycolumn);
            }
            // fall through
          case 245: break;
          case 73:
            { return token(yytext(),"Inst_CPY_Dir",yyline,yycolumn);
            }
            // fall through
          case 246: break;
          case 74:
            { return token(yytext(),"Inst_LDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 247: break;
          case 75:
            { return token(yytext(),"Inst_LDS_Dir",yyline,yycolumn);
            }
            // fall through
          case 248: break;
          case 76:
            { return token(yytext(),"Inst_LDX_Dir",yyline,yycolumn);
            }
            // fall through
          case 249: break;
          case 77:
            { return token(yytext(),"Inst_LDY_Dir",yyline,yycolumn);
            }
            // fall through
          case 250: break;
          case 78:
            { return token(yytext(),"Inst_STD_Dir",yyline,yycolumn);
            }
            // fall through
          case 251: break;
          case 79:
            { return token(yytext(),"Inst_ADCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 252: break;
          case 80:
            { return token(yytext(),"Inst_ADDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 253: break;
          case 81:
            { return token(yytext(),"Inst_ADDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 254: break;
          case 82:
            { return token(yytext(),"Inst_ANDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 255: break;
          case 83:
            { return token(yytext(),"Inst_CMPA_Dir",yyline,yycolumn);
            }
            // fall through
          case 256: break;
          case 84:
            { return token(yytext(),"Inst_LDAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 257: break;
          case 85:
            { return token(yytext(),"Inst_LDAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 258: break;
          case 86:
            { return token(yytext(),"Inst_ORAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 259: break;
          case 87:
            { return token(yytext(),"Inst_SBCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 260: break;
          case 88:
            { return token(yytext(),"Inst_STAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 261: break;
          case 89:
            { return token(yytext(),"Inst_STAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 262: break;
          case 90:
            { return token(yytext(),"Inst_SUBD_Dir",yyline,yycolumn);
            }
            // fall through
          case 263: break;
          case 91:
            { return token(yytext(),"Inst_ASR_Ext",yyline,yycolumn);
            }
            // fall through
          case 264: break;
          case 92:
            { return token(yytext(),"Inst_CLR_Ext",yyline,yycolumn);
            }
            // fall through
          case 265: break;
          case 93:
            { return token(yytext(),"Inst_COM_Ext",yyline,yycolumn);
            }
            // fall through
          case 266: break;
          case 94:
            { return token(yytext(),"Inst_CPD_Ext",yyline,yycolumn);
            }
            // fall through
          case 267: break;
          case 95:
            { return token(yytext(),"Inst_CPX_Ext",yyline,yycolumn);
            }
            // fall through
          case 268: break;
          case 96:
            { return token(yytext(),"Inst_CPY_Ext",yyline,yycolumn);
            }
            // fall through
          case 269: break;
          case 97:
            { return token(yytext(),"Inst_DEC_Ext",yyline,yycolumn);
            }
            // fall through
          case 270: break;
          case 98:
            { return token(yytext(),"Inst_INC_Ext",yyline,yycolumn);
            }
            // fall through
          case 271: break;
          case 99:
            { return token(yytext(),"Inst_LDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 272: break;
          case 100:
            { return token(yytext(),"Inst_LDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 273: break;
          case 101:
            { return token(yytext(),"Inst_LDS_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 274: break;
          case 102:
            { return token(yytext(),"Inst_LDS_Ext",yyline,yycolumn);
            }
            // fall through
          case 275: break;
          case 103:
            { return token(yytext(),"Inst_LDX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 276: break;
          case 104:
            { return token(yytext(),"Inst_LDX_Ext",yyline,yycolumn);
            }
            // fall through
          case 277: break;
          case 105:
            { return token(yytext(),"Inst_LDY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 278: break;
          case 106:
            { return token(yytext(),"Inst_LDY_Ext",yyline,yycolumn);
            }
            // fall through
          case 279: break;
          case 107:
            { return token(yytext(),"Inst_ASL_Ext",yyline,yycolumn);
            }
            // fall through
          case 280: break;
          case 108:
            { return token(yytext(),"Inst_LSR_Ext",yyline,yycolumn);
            }
            // fall through
          case 281: break;
          case 109:
            { return token(yytext(),"Inst_NEG_Ext",yyline,yycolumn);
            }
            // fall through
          case 282: break;
          case 110:
            { return token(yytext(),"Inst_STD_Ext",yyline,yycolumn);
            }
            // fall through
          case 283: break;
          case 111:
            { return token(yytext(),"Inst_ADCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 284: break;
          case 112:
            { return token(yytext(),"Inst_ADCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 285: break;
          case 113:
            { return token(yytext(),"Inst_ADDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 286: break;
          case 114:
            { return token(yytext(),"Inst_ADDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 287: break;
          case 115:
            { return token(yytext(),"Inst_ADDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 288: break;
          case 116:
            { return token(yytext(),"Inst_ANDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 289: break;
          case 117:
            { return token(yytext(),"Inst_ANDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 290: break;
          case 118:
            { return token(yytext(),"Inst_ASR_Index",yyline,yycolumn);
            }
            // fall through
          case 291: break;
          case 119:
            { return token(yytext(),"Inst_BITA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 292: break;
          case 120:
            { return token(yytext(),"Inst_CLR_Index",yyline,yycolumn);
            }
            // fall through
          case 293: break;
          case 121:
            { return token(yytext(),"Inst_CMPA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 294: break;
          case 122:
            { return token(yytext(),"Inst_CMPA_Ext",yyline,yycolumn);
            }
            // fall through
          case 295: break;
          case 123:
            { return token(yytext(),"Inst_COM_Index",yyline,yycolumn);
            }
            // fall through
          case 296: break;
          case 124:
            { return token(yytext(),"Inst_CPD_Index",yyline,yycolumn);
            }
            // fall through
          case 297: break;
          case 125:
            { return token(yytext(),"Inst_CPX_Index",yyline,yycolumn);
            }
            // fall through
          case 298: break;
          case 126:
            { return token(yytext(),"Inst_CPY_Index",yyline,yycolumn);
            }
            // fall through
          case 299: break;
          case 127:
            { return token(yytext(),"Inst_DEC_Index",yyline,yycolumn);
            }
            // fall through
          case 300: break;
          case 128:
            { return token(yytext(),"Inst_EORA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 301: break;
          case 129:
            { return token(yytext(),"Inst_EORA_Ext",yyline,yycolumn);
            }
            // fall through
          case 302: break;
          case 130:
            { return token(yytext(),"Inst_INC_Index",yyline,yycolumn);
            }
            // fall through
          case 303: break;
          case 131:
            { return token(yytext(),"Inst_LDAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 304: break;
          case 132:
            { return token(yytext(),"Inst_LDAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 305: break;
          case 133:
            { return token(yytext(),"Inst_LDAB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 306: break;
          case 134:
            { return token(yytext(),"Inst_LDAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 307: break;
          case 135:
            { return token(yytext(),"Inst_LDD_Index",yyline,yycolumn);
            }
            // fall through
          case 308: break;
          case 136:
            { return token(yytext(),"Inst_LDS_Index",yyline,yycolumn);
            }
            // fall through
          case 309: break;
          case 137:
            { return token(yytext(),"Inst_LDX_Index",yyline,yycolumn);
            }
            // fall through
          case 310: break;
          case 138:
            { return token(yytext(),"Inst_LDY_Index",yyline,yycolumn);
            }
            // fall through
          case 311: break;
          case 139:
            { return token(yytext(),"Inst_LSR_Index",yyline,yycolumn);
            }
            // fall through
          case 312: break;
          case 140:
            { return token(yytext(),"Inst_NEG_Index",yyline,yycolumn);
            }
            // fall through
          case 313: break;
          case 141:
            { return token(yytext(),"Inst_ORAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 314: break;
          case 142:
            { return token(yytext(),"Inst_ORAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 315: break;
          case 143:
            { return token(yytext(),"Inst_SBCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 316: break;
          case 144:
            { return token(yytext(),"Inst_SBCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 317: break;
          case 145:
            { return token(yytext(),"Inst_STAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 318: break;
          case 146:
            { return token(yytext(),"Inst_STAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 319: break;
          case 147:
            { return token(yytext(),"Inst_STD_Index",yyline,yycolumn);
            }
            // fall through
          case 320: break;
          case 148:
            { return token(yytext(),"Inst_SUBD_Ext",yyline,yycolumn);
            }
            // fall through
          case 321: break;
          case 149:
            { return token(yytext(),"Inst_ADCA_Index",yyline,yycolumn);
            }
            // fall through
          case 322: break;
          case 150:
            { return token(yytext(),"Inst_ADDA_Index",yyline,yycolumn);
            }
            // fall through
          case 323: break;
          case 151:
            { return token(yytext(),"Inst_ADDD_Index",yyline,yycolumn);
            }
            // fall through
          case 324: break;
          case 152:
            { return token(yytext(),"Inst_ANDA_Index",yyline,yycolumn);
            }
            // fall through
          case 325: break;
          case 153:
            { return token(yytext(),"Inst_CMPA_Index",yyline,yycolumn);
            }
            // fall through
          case 326: break;
          case 154:
            { return token(yytext(),"Inst_CPD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 327: break;
          case 155:
            { return token(yytext(),"Inst_CPX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 328: break;
          case 156:
            { return token(yytext(),"Inst_CPY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 329: break;
          case 157:
            { return token(yytext(),"Inst_LDAA_Index",yyline,yycolumn);
            }
            // fall through
          case 330: break;
          case 158:
            { return token(yytext(),"Inst_LDAB_Index",yyline,yycolumn);
            }
            // fall through
          case 331: break;
          case 159:
            { return token(yytext(),"Inst_ORAA_Index",yyline,yycolumn);
            }
            // fall through
          case 332: break;
          case 160:
            { return token(yytext(),"Inst_SBCA_Index",yyline,yycolumn);
            }
            // fall through
          case 333: break;
          case 161:
            { return token(yytext(),"Inst_STAA_Index",yyline,yycolumn);
            }
            // fall through
          case 334: break;
          case 162:
            { return token(yytext(),"Inst_STAB_Index",yyline,yycolumn);
            }
            // fall through
          case 335: break;
          case 163:
            { return token(yytext(),"Inst_SUBD_Index",yyline,yycolumn);
            }
            // fall through
          case 336: break;
          case 164:
            { return token(yytext(),"Inst_ADDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 337: break;
          case 165:
            { return token(yytext(),"Inst_BCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 338: break;
          case 166:
            { return token(yytext(),"Inst_BSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 339: break;
          case 167:
            { return token(yytext(),"Inst_SUBD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 340: break;
          case 168:
            { return token(yytext(),"Inst_BRCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 341: break;
          case 169:
            { return token(yytext(),"Inst_BRSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 342: break;
          case 170:
            { return token(yytext(),"Inst_BCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 343: break;
          case 171:
            { return token(yytext(),"Inst_BSET_Index",yyline,yycolumn);
            }
            // fall through
          case 344: break;
          case 172:
            { return token(yytext(),"Inst_BRCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 345: break;
          case 173:
            { return token(yytext(),"Inst_BRSET_Index",yyline,yycolumn);
            }
            // fall through
          case 346: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
