// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\2\0\1\5\1\6\3\0\1\7\1\10\1\11\1\0"+
    "\1\12\3\0\1\13\11\14\7\0\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\27\4\0"+
    "\1\27\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\27\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\27\1\76\1\77\1\100\103\0"+
    "\1\27\7\0\1\27\3\0\1\27\3\0\1\27\1\0"+
    "\1\27\6\0\1\27\1\0\1\27\4\0\1\27\7\0"+
    "\1\27\3\0\1\27\3\0\1\27\1\0\1\27\6\0"+
    "\1\27\1\0\1\27\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\44\0\1\3\161\0\1\7\1\10\1\11\1\12\3\0"+
    "\1\13\1\0\1\14\1\0\1\15\1\16\1\17\1\20"+
    "\1\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\2\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\6\0\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\1\0\1\44\1\45\3\0\1\46\1\47\1\50"+
    "\11\0\1\51\1\0\1\52\6\0\1\53\1\54\1\55"+
    "\1\0\1\56\1\57\1\60\7\0\1\61\1\62\1\63"+
    "\1\64\1\0\1\65\1\0\1\66\1\67\1\70\1\0"+
    "\1\10\1\11\1\12\3\0\1\13\11\0\1\37\1\0"+
    "\1\40\1\41\1\42\4\0\1\46\1\47\1\50\3\0"+
    "\1\51\6\0\1\55\17\0\1\71\1\72\1\73\3\0"+
    "\1\74\1\75\14\0\1\76\1\77\4\0\1\100\1\101"+
    "\17\0\1\102\1\103\2\0\1\104\1\105\2\0\1\106"+
    "\1\107\21\0\1\71\1\72\1\73\2\0\1\110\1\111"+
    "\1\112\2\0\1\113\1\114\5\0\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\2\0\1\125\1\126"+
    "\2\0\1\127\1\130\10\0\1\131\11\0\1\132\2\0"+
    "\1\133\1\134\1\135\1\136\3\0\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\113"+
    "\1\114\1\137\40\0\3\140\63\0\1\140\102\0\1\141"+
    "\2\0\1\141\2\0\1\141\73\0\1\141\2\0\1\142"+
    "\4\0\1\143\2\0\1\141\20\0\1\140\10\0\1\144"+
    "\2\0\1\145\1\0\1\146\7\0\1\141\2\0\1\147"+
    "\5\0\1\150\1\141\1\0\1\151\1\0\1\152\1\0"+
    "\1\153\21\0\1\154\2\0\1\155\1\156\1\157\1\160"+
    "\4\0\1\161\4\0\1\162\1\0\1\142\2\0\1\163"+
    "\1\0\1\143\2\0\1\143\1\0\1\164\1\0\1\165"+
    "\6\0\1\166\1\0\1\167\7\0\1\141\1\0\1\170"+
    "\1\0\1\171\17\0\1\172\1\0\1\173\7\0\1\174"+
    "\1\0\1\175\1\176\2\0\1\177\2\0\1\200\2\0"+
    "\1\201\11\0\1\202\1\0\1\203\1\204\10\0\1\205"+
    "\1\0\1\154\1\0\1\206\1\207\11\0\1\210\1\0"+
    "\1\161\2\0\1\161\2\0\1\211\1\0\1\212\1\0"+
    "\1\213\1\214\2\0\1\215\1\0\1\216\3\0\1\217"+
    "\2\0\1\220\4\0\2\221\1\222\3\0\1\223\2\0"+
    "\1\224\7\0\2\225\1\226\1\227\2\0\1\230\4\0"+
    "\2\231\1\232\3\0\1\233\1\234\3\0\2\235\1\236"+
    "\1\0\1\237\1\240\3\0\2\241\1\242\1\243\1\0"+
    "\1\244\3\0\2\245\1\246\2\0\2\247\1\250\2\0"+
    "\2\251\1\252\1\253\2\0\1\254\4\0\2\255\1\256"+
    "\2\0\2\257\1\260\2\0\2\261\1\262\2\0\2\263"+
    "\1\264\2\0\2\13\1\265\2\0\2\266\1\267\2\0"+
    "\2\270\1\271\1\272\2\0\1\273\4\0\2\274\1\275"+
    "\2\0\2\276\1\277\2\0\1\140\1\0\1\300\2\0"+
    "\1\301\1\0\1\302\6\0\2\303\1\304\2\0\2\305"+
    "\1\306\2\0\2\307\1\310\2\0\2\311\1\312\5\0"+
    "\1\313\4\0\2\314\1\315\1\316\2\0\2\317\2\0"+
    "\2\320\1\321\2\0\2\322\3\0\1\323\2\0\2\324"+
    "\1\325\2\0\2\326\1\327\6\0\2\330\1\331\2\0"+
    "\2\332\1\333\6\0\2\334\1\335\2\0\2\336\1\337"+
    "\1\340\1\341\1\342\1\343\2\0\2\344\2\0\2\345"+
    "\1\346\2\0\2\347\1\350\2\0\2\351\1\352\2\0"+
    "\2\353\1\354\5\0\1\355\2\0\2\356\2\0\2\357"+
    "\1\360\2\0\2\361\1\362\3\0\1\363\3\0\2\364"+
    "\1\0\1\365\1\366\1\367\13\0\1\370\1\371\1\372"+
    "\1\373\1\374\1\0\1\375\6\0\1\376\5\0\1\377"+
    "\1\0\1\u0100\3\0\1\u0101\3\0\1\u0102\1\0\1\u0103"+
    "\1\u0104\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\303\0\101\0\101\0\u0104"+
    "\0\101\0\u0145\0\u0186\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb"+
    "\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3"+
    "\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\101\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2"+
    "\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102"+
    "\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512"+
    "\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a"+
    "\0\101\0\101\0\101\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f"+
    "\0\101\0\u28a0\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u2922\0\u28e1"+
    "\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u2963\0\u28e1"+
    "\0\u29a4\0\u29e5\0\u2a26\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u2a67"+
    "\0\u28e1\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\101"+
    "\0\u2c2e\0\101\0\101\0\101\0\101\0\u2c6f\0\101\0\101"+
    "\0\u2cb0\0\u2cf1\0\u2d32\0\101\0\101\0\101\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\101"+
    "\0\u2fbc\0\u28e1\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142"+
    "\0\u3183\0\u2a26\0\101\0\u31c4\0\u28e1\0\u28e1\0\u28e1\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u3183\0\u28e1"+
    "\0\u28e1\0\u28e1\0\u33cc\0\u28e1\0\u340d\0\u28e1\0\u28e1\0\u3183"+
    "\0\u344e\0\u28e1\0\u28e1\0\u28e1\0\u348f\0\u34d0\0\u3511\0\u3552"+
    "\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a"+
    "\0\u379b\0\u28e1\0\u37dc\0\u28e1\0\u28e1\0\u28e1\0\u381d\0\u385e"+
    "\0\u389f\0\u38e0\0\u28e1\0\u28e1\0\u28e1\0\u3921\0\u3962\0\u39a3"+
    "\0\u28e1\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u28e1"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31"+
    "\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\101"+
    "\0\101\0\101\0\u3f39\0\u3f7a\0\u3fbb\0\u28e1\0\u28e1\0\u3ffc"+
    "\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204"+
    "\0\u4245\0\u4286\0\u42c7\0\101\0\101\0\u4308\0\u4349\0\u438a"+
    "\0\u43cb\0\101\0\101\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510"+
    "\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718"+
    "\0\u4759\0\u479a\0\101\0\101\0\u47db\0\u481c\0\101\0\101"+
    "\0\u485d\0\u489e\0\101\0\101\0\u48df\0\u4920\0\u4961\0\u49a2"+
    "\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa"+
    "\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u28e1\0\u28e1\0\u28e1"+
    "\0\u4d30\0\u4d71\0\u28e1\0\u28e1\0\u28e1\0\u4db2\0\u4df3\0\101"+
    "\0\101\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u28e1\0\u28e1"+
    "\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u4f79\0\u4fba"+
    "\0\u28e1\0\u28e1\0\u4ffb\0\u503c\0\u28e1\0\u28e1\0\u507d\0\u50be"+
    "\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244\0\u28e1\0\u5285"+
    "\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c\0\u548d"+
    "\0\u28e1\0\u54ce\0\u550f\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u5550"+
    "\0\u5591\0\u55d2\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1"+
    "\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\u28e1\0\101\0\u5613"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23"+
    "\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u5bea\0\u5c2b"+
    "\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\101"+
    "\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9\0\u5ffa"+
    "\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u61c1\0\u6202"+
    "\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u6388\0\u63c9\0\u640a"+
    "\0\u644b\0\u648c\0\u64cd\0\u650e\0\u654f\0\u6590\0\u65d1\0\u6612"+
    "\0\u6653\0\u6694\0\u66d5\0\u6716\0\u6757\0\u6798\0\u67d9\0\u681a"+
    "\0\u685b\0\u689c\0\u68dd\0\u691e\0\u695f\0\u69a0\0\u69e1\0\u6a22"+
    "\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67\0\u6ba8\0\u6be9\0\u6c2a"+
    "\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0\0\u6df1\0\u6e32"+
    "\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9\0\u703a"+
    "\0\u707b\0\u70bc\0\u70fd\0\u713e\0\u717f\0\u71c0\0\u7201\0\u7242"+
    "\0\u7283\0\u72c4\0\u7305\0\u7346\0\u7387\0\u73c8\0\u7409\0\u744a"+
    "\0\u748b\0\u74cc\0\u750d\0\u754e\0\u758f\0\u75d0\0\u7611\0\u7652"+
    "\0\u7693\0\u76d4\0\u7715\0\u7756\0\u7797\0\u77d8\0\u7819\0\u785a"+
    "\0\u789b\0\u78dc\0\u791d\0\u795e\0\u799f\0\u79e0\0\u7a21\0\u7a62"+
    "\0\u7aa3\0\u7ae4\0\u7b25\0\u7b66\0\u7ba7\0\u7be8\0\u7c29\0\u7c6a"+
    "\0\u7cab\0\u7cec\0\u7d2d\0\u7aa3\0\u7d6e\0\u7daf\0\u76d4\0\u7df0"+
    "\0\u7e31\0\u7e72\0\u7eb3\0\u7ef4\0\u7f35\0\u7f76\0\u7fb7\0\u7ff8"+
    "\0\u8039\0\u807a\0\u80bb\0\u80fc\0\u813d\0\u817e\0\u81bf\0\u8200"+
    "\0\u8241\0\u8282\0\u82c3\0\u8304\0\u8345\0\u8386\0\u83c7\0\u8408"+
    "\0\u8449\0\u848a\0\u84cb\0\u850c\0\u854d\0\u858e\0\u85cf\0\u8610"+
    "\0\u8651\0\u8692\0\u86d3\0\u8714\0\u8755\0\u8796\0\u87d7\0\u8818"+
    "\0\u8859\0\u889a\0\u88db\0\u891c\0\u895d\0\u899e\0\u89df\0\u8a20"+
    "\0\u8a61\0\u8aa2\0\u8ae3\0\u8b24\0\u8b65\0\u8ba6\0\u8be7\0\u8c28"+
    "\0\u8c69\0\u8caa\0\u6757\0\u8ceb\0\u8d2c\0\u8d6d\0\u8dae\0\u8def"+
    "\0\u8e30\0\u8e71\0\u8eb2\0\u8ef3\0\u8f34\0\u8f75\0\u8fb6\0\u8ff7"+
    "\0\u9038\0\u9079\0\u90ba\0\u90fb\0\u913c\0\u917d\0\u91be\0\u91ff"+
    "\0\u9240\0\u9281\0\u92c2\0\u9303\0\u9344\0\u9385\0\u93c6\0\u9407"+
    "\0\u9448\0\u9489\0\u94ca\0\u950b\0\u954c\0\u958d\0\u95ce\0\u960f"+
    "\0\u9650\0\u9691\0\u96d2\0\u9713\0\u9754\0\u9795\0\u97d6\0\u9817"+
    "\0\u9858\0\u9899\0\u98da\0\u991b\0\u8c28\0\u995c\0\u999d\0\u99de"+
    "\0\u9a1f\0\u9a60\0\u9aa1\0\u9ae2\0\u9b23\0\u9b64\0\101\0\u9ba5"+
    "\0\u9be6\0\u9c27\0\u9c68\0\u9ca9\0\u9cea\0\u9d2b\0\u9d6c\0\u9dad"+
    "\0\u9dee\0\u9e2f\0\u9e70\0\u9eb1\0\u9ef2\0\u9f33\0\u9f74\0\u9fb5"+
    "\0\u9ff6\0\ua037\0\ua078\0\ua0b9\0\ua0fa\0\ua13b\0\ua17c\0\ua1bd"+
    "\0\ua1fe\0\ua23f\0\ua280\0\ua2c1\0\ua302\0\ua343\0\ua384\0\ua3c5"+
    "\0\ua406\0\ua447\0\ua488\0\ua4c9\0\ua50a\0\ua54b\0\ua58c\0\ua5cd"+
    "\0\ua60e\0\ua64f\0\ua690\0\ua6d1\0\ua712\0\ua753\0\ua794\0\ua7d5"+
    "\0\ua816\0\ua857\0\ua898\0\ua8d9\0\ua91a\0\ua95b\0\ua99c\0\ua9dd"+
    "\0\uaa1e\0\uaa5f\0\uaaa0\0\uaae1\0\uab22\0\uab63\0\uaba4\0\uabe5"+
    "\0\uac26\0\uac67\0\uaca8\0\uace9\0\uad2a\0\u90fb\0\uad6b\0\uadac"+
    "\0\uaded\0\uae2e\0\uae6f\0\uaeb0\0\uaef1\0\uaf32\0\uaf73\0\uafb4"+
    "\0\uaff5\0\ub036\0\ub077\0\ub0b8\0\ub0f9\0\ub13a\0\ub17b\0\ub1bc"+
    "\0\ub1fd\0\ub23e\0\ub27f\0\ub2c0\0\ub301\0\ub342\0\ub383\0\ub3c4"+
    "\0\ub405\0\ub446\0\ub487\0\ub4c8\0\ub509\0\ub54a\0\101\0\ub58b"+
    "\0\ub5cc\0\101\0\ub60d\0\ub64e\0\101\0\ub68f\0\ub6d0\0\101"+
    "\0\ub711\0\ub752\0\ub793\0\ub7d4\0\ub815\0\ub856\0\ub897\0\ub8d8"+
    "\0\ub919\0\ub95a\0\ub99b\0\ub9dc\0\101\0\uba1d\0\uba5e\0\uba9f"+
    "\0\ubae0\0\ubb21\0\ubb62\0\ubba3\0\ubbe4\0\ubc25\0\ubc66\0\ubca7"+
    "\0\ubce8\0\ubd29\0\ubd6a\0\ubdab\0\ubdec\0\ube2d\0\ube6e\0\ubeaf"+
    "\0\ubef0\0\ubf31\0\ubf72\0\ubfb3\0\ubff4\0\uc035\0\uc076\0\uc0b7"+
    "\0\uc0f8\0\uc139\0\uc17a\0\uc1bb\0\101\0\uc1fc\0\101\0\uc23d"+
    "\0\101\0\101\0\uc27e\0\uc2bf\0\101\0\uc300\0\101\0\uc341"+
    "\0\uc382\0\uc3c3\0\101\0\uc404\0\uc445\0\101\0\uc486\0\uc4c7"+
    "\0\uc508\0\uc549\0\uc508\0\101\0\101\0\uc58a\0\uc5cb\0\uc60c"+
    "\0\101\0\uc64d\0\uc68e\0\101\0\uc6cf\0\uc710\0\uc751\0\uc792"+
    "\0\uc7d3\0\uc814\0\uc855\0\uc814\0\101\0\101\0\101\0\uc896"+
    "\0\uc8d7\0\101\0\uc918\0\uc959\0\uc99a\0\uc9db\0\uc99a\0\101"+
    "\0\101\0\uca1c\0\uca5d\0\uca9e\0\101\0\101\0\ucadf\0\ucb20"+
    "\0\ucb61\0\ucb20\0\101\0\101\0\ucba2\0\101\0\101\0\ucbe3"+
    "\0\ucc24\0\ucc65\0\ucc24\0\101\0\101\0\101\0\ucca6\0\101"+
    "\0\ucce7\0\ucd28\0\ucd69\0\ucd28\0\101\0\101\0\ucdaa\0\ucdeb"+
    "\0\ucdaa\0\101\0\101\0\uce2c\0\uce6d\0\uce2c\0\101\0\101"+
    "\0\101\0\uceae\0\uceef\0\101\0\ucf30\0\ucf71\0\ucfb2\0\ucff3"+
    "\0\ucfb2\0\101\0\101\0\ud034\0\ud075\0\ud034\0\101\0\101"+
    "\0\ud0b6\0\ud0f7\0\ud0b6\0\101\0\101\0\ud138\0\ud179\0\ud138"+
    "\0\101\0\101\0\ud1ba\0\ud1fb\0\ud1ba\0\101\0\101\0\ud23c"+
    "\0\ud27d\0\ud23c\0\101\0\101\0\ud2be\0\ud2ff\0\ud2be\0\101"+
    "\0\101\0\101\0\ud340\0\ud381\0\101\0\ud3c2\0\ud403\0\ud444"+
    "\0\ud485\0\ud444\0\101\0\101\0\ud4c6\0\ud507\0\ud4c6\0\101"+
    "\0\101\0\ud548\0\ud589\0\ud5ca\0\ud60b\0\101\0\ud64c\0\ud68d"+
    "\0\101\0\ud6ce\0\101\0\ud70f\0\ud750\0\ud791\0\ud7d2\0\ud813"+
    "\0\ud854\0\ud813\0\101\0\101\0\ud895\0\ud8d6\0\ud895\0\101"+
    "\0\101\0\ud917\0\ud958\0\ud917\0\101\0\101\0\ud999\0\ud9da"+
    "\0\ud999\0\101\0\101\0\uda1b\0\uda5c\0\uda9d\0\udade\0\udb1f"+
    "\0\101\0\udb60\0\udba1\0\udbe2\0\udc23\0\udbe2\0\101\0\101"+
    "\0\101\0\udc64\0\udca5\0\udc64\0\101\0\udce6\0\udd27\0\udce6"+
    "\0\101\0\101\0\udd68\0\udda9\0\udd68\0\101\0\uddea\0\ude2b"+
    "\0\ude6c\0\101\0\udead\0\udeee\0\udead\0\101\0\101\0\udf2f"+
    "\0\udf70\0\udf2f\0\101\0\101\0\udfb1\0\udff2\0\ue033\0\ue074"+
    "\0\ue0b5\0\ue0f6\0\ue0b5\0\101\0\101\0\ue137\0\ue178\0\ue137"+
    "\0\101\0\101\0\ue1b9\0\ue1fa\0\ue23b\0\ue27c\0\ue2bd\0\ue2fe"+
    "\0\ue2bd\0\101\0\101\0\ue33f\0\ue380\0\ue33f\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\ue3c1\0\ue402\0\ue3c1\0\101"+
    "\0\ue443\0\ue484\0\ue443\0\101\0\101\0\ue4c5\0\ue506\0\ue4c5"+
    "\0\101\0\101\0\ue547\0\ue588\0\ue547\0\101\0\101\0\ue5c9"+
    "\0\ue60a\0\ue5c9\0\101\0\101\0\ue64b\0\ue68c\0\ue6cd\0\ue70e"+
    "\0\ue74f\0\101\0\ue790\0\ue7d1\0\ue790\0\101\0\ue812\0\ue853"+
    "\0\ue812\0\101\0\101\0\ue894\0\ue8d5\0\ue894\0\101\0\101"+
    "\0\ue916\0\ue957\0\ue998\0\101\0\ue9d9\0\uea1a\0\uea5b\0\uea1a"+
    "\0\101\0\uea9c\0\101\0\101\0\101\0\ueadd\0\ueb1e\0\ueb5f"+
    "\0\ueba0\0\uebe1\0\uec22\0\uec63\0\ueca4\0\uece5\0\ued26\0\ued67"+
    "\0\101\0\101\0\101\0\101\0\101\0\ueda8\0\101\0\uede9"+
    "\0\uee2a\0\uee6b\0\ueeac\0\ueeed\0\uef2e\0\101\0\uef6f\0\uefb0"+
    "\0\ueff1\0\uf032\0\uf073\0\101\0\uf0b4\0\101\0\uf0f5\0\uf136"+
    "\0\uf177\0\101\0\uf1b8\0\uf1f9\0\uf23a\0\101\0\uf27b\0\101"+
    "\0\101\0\uf2bc\0\uf2fd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\0\1\20\1\21\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\27\1\30\1\31\2\0\1\32"+
    "\1\33\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\0\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\0\1\51\1\52\1\53\2\0\1\54\1\55\1\0"+
    "\1\4\1\0\1\56\103\0\1\2\111\0\63\57\3\0"+
    "\2\10\1\2\1\3\75\10\16\0\1\60\1\0\1\61"+
    "\11\0\1\62\4\0\1\63\60\0\1\64\1\0\1\65"+
    "\1\0\1\66\1\67\1\70\2\0\1\71\1\72\1\73"+
    "\1\0\1\74\1\0\1\75\1\76\2\0\1\77\54\0"+
    "\1\100\11\0\1\101\1\102\1\0\1\103\1\104\3\0"+
    "\1\105\55\0\1\106\3\0\1\107\111\0\1\110\1\111"+
    "\1\0\1\112\62\0\1\113\1\114\100\0\1\115\11\0"+
    "\1\116\77\0\1\117\5\0\1\120\61\0\1\121\16\0"+
    "\1\122\102\0\1\123\60\0\1\124\11\0\1\125\103\0"+
    "\1\126\101\0\1\127\1\0\1\130\72\0\1\131\4\0"+
    "\1\132\56\0\1\133\2\0\1\134\16\0\1\135\1\136"+
    "\1\0\1\137\52\0\1\140\1\141\2\0\1\142\12\0"+
    "\1\143\2\0\1\144\4\0\1\145\51\0\1\146\106\0"+
    "\1\147\124\0\1\150\1\0\1\151\10\0\1\152\4\0"+
    "\1\153\61\0\1\154\1\0\1\155\1\0\1\156\1\157"+
    "\1\160\1\0\1\161\1\162\1\163\1\0\1\164\1\0"+
    "\1\165\1\166\2\0\1\167\55\0\1\170\10\0\1\171"+
    "\1\172\1\0\1\173\1\174\3\0\1\175\56\0\1\176"+
    "\3\0\1\177\110\0\1\200\1\201\1\0\1\202\63\0"+
    "\1\203\1\204\100\0\1\205\10\0\1\206\77\0\1\207"+
    "\5\0\1\210\62\0\1\211\15\0\1\212\102\0\1\213"+
    "\61\0\1\214\10\0\1\215\103\0\1\216\101\0\1\217"+
    "\1\0\1\220\72\0\1\221\4\0\1\222\57\0\1\223"+
    "\2\0\1\224\15\0\1\225\1\226\1\0\1\227\53\0"+
    "\1\230\1\231\2\0\1\232\11\0\1\233\2\0\1\234"+
    "\4\0\1\235\52\0\1\236\106\0\1\237\37\0\63\240"+
    "\20\0\1\241\26\0\1\242\1\243\52\0\1\244\1\245"+
    "\100\0\1\246\110\0\1\247\5\0\1\250\61\0\1\251"+
    "\10\0\1\252\6\0\1\251\76\0\1\253\64\0\1\254"+
    "\16\0\1\255\65\0\1\256\11\0\1\251\101\0\1\257"+
    "\61\0\1\260\11\0\1\251\3\0\1\261\1\262\65\0"+
    "\1\263\74\0\1\264\107\0\1\265\65\0\1\266\1\0"+
    "\1\267\12\0\1\270\4\0\1\271\62\0\1\272\14\0"+
    "\1\260\61\0\1\273\17\0\1\274\56\0\1\275\102\0"+
    "\1\276\5\0\1\277\10\0\1\300\3\0\1\301\72\0"+
    "\1\302\75\0\1\303\67\0\1\304\23\0\1\305\1\306"+
    "\100\0\1\307\50\0\1\310\102\0\1\311\17\0\1\312"+
    "\4\0\1\313\1\314\53\0\1\315\116\0\1\316\103\0"+
    "\1\317\55\0\1\320\107\0\1\321\100\0\1\322\72\0"+
    "\1\323\17\0\1\324\4\0\1\325\1\326\67\0\1\327"+
    "\102\0\1\330\57\0\1\331\2\0\1\332\16\0\1\333"+
    "\4\0\1\334\1\335\63\0\1\336\5\0\1\337\72\0"+
    "\1\340\73\0\1\341\111\0\1\342\61\0\1\343\5\0"+
    "\1\344\101\0\1\345\104\0\1\346\100\0\1\347\5\0"+
    "\1\350\67\0\1\351\11\0\1\352\56\0\1\353\1\0"+
    "\1\354\100\0\1\355\5\0\1\356\14\0\1\357\53\0"+
    "\1\360\2\0\1\361\12\0\1\362\3\0\1\363\4\0"+
    "\1\364\1\365\51\0\1\366\107\0\1\367\71\0\1\370"+
    "\15\0\1\371\61\0\1\372\122\0\1\373\56\0\1\374"+
    "\123\0\1\375\3\0\1\376\73\0\1\377\66\0\1\u0100"+
    "\73\0\1\u0101\126\0\1\u0102\25\0\1\u0103\1\u0104\53\0"+
    "\1\u0105\1\u0106\100\0\1\u0107\107\0\1\u0108\5\0\1\u0109"+
    "\62\0\1\251\7\0\1\u010a\6\0\1\251\76\0\1\253"+
    "\65\0\1\254\15\0\1\255\66\0\1\256\10\0\1\251"+
    "\101\0\1\u010b\62\0\1\260\10\0\1\251\3\0\1\261"+
    "\1\262\66\0\1\263\74\0\1\264\106\0\1\265\66\0"+
    "\1\266\1\0\1\u010c\11\0\1\270\4\0\1\u010d\63\0"+
    "\1\u010e\13\0\1\260\62\0\1\273\16\0\1\274\57\0"+
    "\1\275\102\0\1\276\5\0\1\277\7\0\1\u010f\3\0"+
    "\1\301\72\0\1\u0110\75\0\1\u0111\70\0\1\304\22\0"+
    "\1\305\1\306\100\0\1\307\51\0\1\u0112\102\0\1\u0113"+
    "\16\0\1\u0114\4\0\1\u0115\1\u0116\54\0\1\315\115\0"+
    "\1\u0117\103\0\1\317\56\0\1\320\107\0\1\u0118\100\0"+
    "\1\u0119\72\0\1\u011a\16\0\1\u011b\4\0\1\u011c\1\u011d"+
    "\67\0\1\327\102\0\1\330\60\0\1\u011e\2\0\1\332"+
    "\15\0\1\333\4\0\1\334\1\335\63\0\1\u011f\5\0"+
    "\1\u0120\72\0\1\u0121\74\0\1\u0122\110\0\1\342\62\0"+
    "\1\u0123\5\0\1\344\101\0\1\u0124\103\0\1\u0125\100\0"+
    "\1\u0126\5\0\1\u0127\70\0\1\351\10\0\1\352\57\0"+
    "\1\u0128\1\0\1\u0129\100\0\1\355\5\0\1\356\13\0"+
    "\1\357\54\0\1\u012a\2\0\1\361\11\0\1\u012b\3\0"+
    "\1\363\4\0\1\364\1\365\52\0\1\u012c\107\0\1\367"+
    "\71\0\1\370\14\0\1\371\62\0\1\372\121\0\1\u012d"+
    "\57\0\1\374\122\0\1\u012e\3\0\1\376\73\0\1\377"+
    "\67\0\1\u0100\73\0\1\u012f\42\0\63\u0130\20\0\1\u0131"+
    "\1\u0132\77\0\1\u0133\1\u0134\1\0\1\u0135\75\0\1\u0136"+
    "\1\u0137\77\0\1\u0138\1\u0139\1\0\1\u013a\61\0\2\u013b"+
    "\1\u013c\1\u013b\1\0\1\u013d\6\0\1\u013e\1\u013f\120\0"+
    "\1\u0140\63\0\1\u0141\74\0\1\u0142\1\u0143\112\0\1\u0144"+
    "\71\0\1\u0145\117\0\1\u0146\41\0\2\u0147\1\u0148\1\u0147"+
    "\75\0\2\u0149\1\u014a\1\u0149\1\0\1\u014b\6\0\1\u014c"+
    "\1\u014d\77\0\1\u014e\1\u014f\63\0\2\u0150\1\u0151\1\u0150"+
    "\1\0\1\u014b\6\0\1\u0152\1\u0153\63\0\2\u0154\1\u0155"+
    "\1\u0154\1\u0156\1\u0157\73\0\2\u0158\1\u0159\1\u0158\1\u0156"+
    "\1\u015a\73\0\2\u015b\1\u015c\1\u015b\1\u0156\1\u015d\73\0"+
    "\2\u015e\1\u015f\1\u015e\1\0\1\u0160\73\0\2\u0161\1\u0162"+
    "\1\u0161\1\0\1\u014b\6\0\1\u0163\1\u0164\77\0\1\u0165"+
    "\1\u0166\124\0\1\u0167\100\0\1\u0168\37\0\2\u0169\1\u016a"+
    "\1\u0169\1\0\1\u014b\6\0\1\u016b\1\u016c\63\0\2\u016d"+
    "\1\u016e\1\u016d\1\0\1\u013d\73\0\2\u016f\1\u0170\1\u016f"+
    "\1\0\1\u015a\107\0\1\u0171\1\u0172\63\0\2\u0173\1\u0174"+
    "\1\u0173\1\u0175\1\u015a\73\0\2\u0176\1\u0177\1\u0176\1\u0175"+
    "\1\u015a\73\0\2\u0178\1\u0179\1\u0178\1\u0175\1\u015a\73\0"+
    "\2\u017a\1\u017b\1\u017a\1\u0175\1\u015a\73\0\2\u017c\1\u017d"+
    "\1\u017c\1\0\1\u014b\6\0\1\u017e\1\u017f\1\0\1\u0180"+
    "\61\0\2\u0181\1\u0182\1\u0181\1\0\1\u013d\6\0\1\u0183"+
    "\1\u0184\1\0\1\u0185\61\0\2\u0186\1\u0187\1\u0186\1\0"+
    "\1\u014b\6\0\1\u0188\1\u0189\77\0\1\u018a\1\u018b\63\0"+
    "\2\u018c\1\u018d\1\u018c\6\0\63\u018e\20\0\1\u018f\1\u0190"+
    "\25\0\1\u0191\1\u0192\50\0\1\u0193\1\u0194\25\0\1\u0195"+
    "\1\u0196\34\0\2\u0197\1\u0198\1\u0197\1\0\1\u013d\6\0"+
    "\1\u0199\1\u019a\63\0\2\u019b\1\u019c\1\u019b\1\0\1\u013d"+
    "\6\0\1\u019d\1\u019e\63\0\2\u019f\1\u01a0\1\u019f\111\0"+
    "\1\u01a1\1\u01a2\77\0\1\u01a3\1\u01a4\63\0\2\u01a5\1\u01a6"+
    "\1\u01a5\1\0\1\u015a\126\0\1\u01a7\45\0\2\u01a8\1\u01a9"+
    "\1\u01a8\1\0\1\u015a\73\0\2\u01aa\1\u01ab\1\u01aa\1\0"+
    "\1\u015a\73\0\2\u01ac\1\u01ad\1\u01ac\1\0\1\u015a\107\0"+
    "\1\u01ae\1\u01af\1\0\1\u01b0\120\0\1\u01b1\41\0\2\u01b2"+
    "\1\u01b3\1\u01b2\1\0\1\u014b\6\0\1\u01b4\1\u01b5\126\0"+
    "\1\u01b6\1\u01b7\101\0\1\u0131\1\u0132\77\0\1\u0133\1\u0134"+
    "\1\0\1\u0135\75\0\1\u0136\1\u0137\77\0\1\u0138\1\u0139"+
    "\1\0\1\u013a\30\0\2\u013b\1\u013c\1\u013b\1\0\1\u013d"+
    "\37\0\1\u013e\1\u013f\117\0\1\u0140\60\0\1\u0142\1\u0143"+
    "\111\0\1\u01b8\72\0\1\u01b9\116\0\1\u0146\11\0\2\u0149"+
    "\1\u014a\1\u0149\1\0\1\u01ba\37\0\1\u01bb\1\u01bc\77\0"+
    "\1\u014e\1\u014f\32\0\2\u0150\1\u0151\1\u0150\1\0\1\u014b"+
    "\37\0\1\u01bd\1\u01be\32\0\2\u0161\1\u0162\1\u0161\1\0"+
    "\1\u014b\37\0\1\u01bf\1\u01c0\77\0\1\u0165\1\u0166\123\0"+
    "\1\u01c1\100\0\1\u01c2\7\0\2\u0169\1\u016a\1\u0169\1\0"+
    "\1\u014b\37\0\1\u01c3\1\u01c4\77\0\1\u0171\1\u0172\32\0"+
    "\2\u017c\1\u017d\1\u017c\1\0\1\u014b\37\0\1\u017e\1\u017f"+
    "\1\0\1\u0180\30\0\2\u0181\1\u0182\1\u0181\1\0\1\u013d"+
    "\37\0\1\u0183\1\u0184\1\0\1\u0185\30\0\2\u0186\1\u0187"+
    "\1\u0186\1\0\1\u014b\37\0\1\u01c5\1\u01c6\77\0\1\u018a"+
    "\1\u018b\77\0\1\u018f\1\u0190\24\0\1\u0191\1\u0192\51\0"+
    "\1\u0193\1\u0194\24\0\1\u0195\1\u0196\4\0\2\u0197\1\u0198"+
    "\1\u0197\1\0\1\u013d\37\0\1\u0199\1\u019a\32\0\2\u019b"+
    "\1\u019c\1\u019b\1\0\1\u013d\37\0\1\u019d\1\u019e\77\0"+
    "\1\u01a1\1\u01a2\77\0\1\u01a3\1\u01a4\115\0\1\u01a7\62\0"+
    "\1\u01ae\1\u01af\1\0\1\u01b0\117\0\1\u01b1\11\0\2\u01b2"+
    "\1\u01b3\1\u01b2\1\0\1\u014b\37\0\1\u01b4\1\u01b5\125\0"+
    "\1\u01b6\1\u01b7\16\0\63\u01c7\4\0\2\u01c8\1\u01c9\1\u01c8"+
    "\1\u0175\1\u01ca\73\0\2\u01cb\1\u01cc\1\u01cb\1\u0175\1\u01cd"+
    "\73\0\2\u01ce\1\u01cf\1\u01ce\1\u0175\1\u015a\73\0\2\u01d0"+
    "\1\u01d1\1\u01d0\1\u0175\1\u01d2\73\0\2\u01d3\1\u01d4\1\u01d3"+
    "\1\u0156\1\u01d5\73\0\2\u01d6\1\u01d7\1\u01d6\1\u0175\1\u015a"+
    "\73\0\2\u01d8\1\u01d9\1\u01d8\1\u0175\1\u015a\100\0\1\u01da"+
    "\74\0\1\u013b\3\0\1\u01da\105\0\63\u01db\4\0\2\u01dc"+
    "\1\u01dd\1\u01dc\1\0\1\u01de\161\0\1\u01df\12\0\2\u01e0"+
    "\1\u01e1\1\u01e0\1\u0175\1\u015a\73\0\2\u01e2\1\u01e3\1\u01e2"+
    "\1\u0175\1\u015a\130\0\1\u01e4\102\0\1\u01e5\41\0\2\u01e6"+
    "\1\u01e7\1\u01e6\1\0\1\u01de\76\0\2\u01e8\1\u01e9\3\0"+
    "\2\u01e8\1\u01ea\61\u01e8\1\0\1\u01e8\3\0\1\u0147\1\0"+
    "\2\u01e8\1\u01e9\3\0\2\u01e8\1\u01ea\61\u01e8\1\0\1\u01e8"+
    "\7\0\1\u01eb\74\0\1\u0149\3\0\1\u01eb\105\0\63\u01ec"+
    "\4\0\2\u01ed\1\u01ee\1\u01ed\1\u0175\1\u015a\73\0\2\u01ef"+
    "\1\u01f0\1\u01ef\1\u0175\1\u015a\100\0\1\u01f1\74\0\1\u0150"+
    "\3\0\1\u01f1\77\0\1\u01f2\1\u01f3\74\0\1\u0154\2\0"+
    "\1\u01f2\1\u01f3\100\0\1\u01f4\105\0\63\u01f5\10\0\1\u01f6"+
    "\1\u01f7\74\0\1\u0158\2\0\1\u01f6\1\u01f7\105\0\63\u01f8"+
    "\10\0\1\u01f9\1\u01fa\74\0\1\u015b\2\0\1\u01f9\1\u01fa"+
    "\105\0\63\u01fb\11\0\1\u01fc\74\0\1\u015e\3\0\1\u01fc"+
    "\105\0\63\u01fd\11\0\1\u01fe\74\0\1\u0161\3\0\1\u01fe"+
    "\73\0\2\u01ff\1\u0200\1\u01ff\1\u0175\1\u015a\73\0\2\u0201"+
    "\1\u0202\1\u0201\1\u0175\1\u0203\100\0\1\u0204\74\0\1\u0169"+
    "\3\0\1\u0204\100\0\1\u0205\74\0\1\u016d\3\0\1\u0205"+
    "\100\0\1\u0206\74\0\1\u016f\3\0\1\u0206\73\0\2\u0207"+
    "\1\u0208\1\u0207\1\u0175\1\u015d\73\0\2\u0209\1\u020a\1\u0209"+
    "\1\u0175\1\u015a\77\0\1\u020b\1\u020c\74\0\1\u0173\2\0"+
    "\1\u020b\1\u020c\100\0\1\u020d\77\0\1\u020e\1\u020f\74\0"+
    "\1\u0176\2\0\1\u020e\1\u020f\77\0\1\u0210\1\u0211\74\0"+
    "\1\u0178\2\0\1\u0210\1\u0211\77\0\1\u0212\1\u0213\74\0"+
    "\1\u017a\2\0\1\u0212\1\u0213\100\0\1\u0214\74\0\1\u017c"+
    "\3\0\1\u0214\100\0\1\u0215\74\0\1\u0181\3\0\1\u0215"+
    "\100\0\1\u0216\74\0\1\u0186\3\0\1\u0216\73\0\2\u0217"+
    "\1\u0218\1\u0217\1\u0175\1\u015a\73\0\2\u0219\1\u021a\1\u0219"+
    "\1\u0175\1\u015a\105\0\63\u021b\5\0\1\u018c\10\0\63\u021b"+
    "\16\0\63\u020d\11\0\1\u021c\74\0\1\u0197\3\0\1\u021c"+
    "\100\0\1\u021d\74\0\1\u019b\3\0\1\u021d\77\0\1\u01e8"+
    "\1\u021e\3\0\1\u01e8\15\0\1\u021f\1\0\1\u0220\50\0"+
    "\1\u019f\2\0\1\u01e8\1\u021e\3\0\1\u01e8\15\0\1\u021f"+
    "\1\0\1\u0220\47\0\2\u0221\1\u0222\1\u0221\1\u0175\1\u01d5"+
    "\73\0\2\u0223\1\u0224\1\u0223\1\u0175\1\u0225\73\0\2\u0226"+
    "\1\u0227\1\u0226\1\0\1\u015d\73\0\2\u0228\1\u0229\1\u0228"+
    "\1\0\1\u015a\100\0\1\u022a\74\0\1\u01a5\3\0\1\u022a"+
    "\100\0\1\u022b\74\0\1\u01a8\3\0\1\u022b\100\0\1\u022c"+
    "\74\0\1\u01aa\3\0\1\u022c\100\0\1\u022d\74\0\1\u01ac"+
    "\3\0\1\u022d\73\0\2\u022e\1\u022f\1\u022e\1\u0156\1\u01d5"+
    "\73\0\2\u0230\1\u0231\1\u0230\1\u0156\1\u0232\73\0\2\u0233"+
    "\1\u0234\1\u0233\1\u0156\1\u01ca\100\0\1\u0235\74\0\1\u01b2"+
    "\3\0\1\u0235\160\0\1\u01e4\102\0\1\u01e5\23\0\63\u0236"+
    "\10\0\1\u0237\1\u0238\74\0\1\u01c8\2\0\1\u0237\1\u0238"+
    "\105\0\63\u0239\10\0\1\u023a\1\u023b\74\0\1\u01cb\2\0"+
    "\1\u023a\1\u023b\105\0\63\u023c\10\0\1\u023d\1\u023e\74\0"+
    "\1\u01ce\2\0\1\u023d\1\u023e\77\0\1\u023f\1\u0240\74\0"+
    "\1\u01d0\2\0\1\u023f\1\u0240\105\0\63\u0241\10\0\1\u0242"+
    "\1\u0243\74\0\1\u01d3\2\0\1\u0242\1\u0243\105\0\63\u0244"+
    "\10\0\1\u0245\1\u0246\74\0\1\u01d6\2\0\1\u0245\1\u0246"+
    "\77\0\1\u0247\1\u0248\74\0\1\u01d8\2\0\1\u0247\1\u0248"+
    "\105\0\63\u0249\16\0\63\u024a\11\0\1\u024b\74\0\1\u01dc"+
    "\3\0\1\u024b\105\0\63\u024c\67\0\1\u024d\21\0\1\u024e"+
    "\1\u024f\74\0\1\u01e0\2\0\1\u024e\1\u024f\77\0\1\u0250"+
    "\1\u0251\74\0\1\u01e2\2\0\1\u0250\1\u0251\73\0\2\u0252"+
    "\1\u0253\1\u0252\1\0\1\u01de\73\0\2\u0254\1\u0255\1\u0254"+
    "\1\0\1\u01de\100\0\1\u0256\74\0\1\u01e6\3\0\1\u0256"+
    "\105\0\63\u0257\16\0\2\u01ea\77\0\63\u0258\16\0\63\u0259"+
    "\10\0\1\u025a\1\u025b\74\0\1\u01ed\2\0\1\u025a\1\u025b"+
    "\77\0\1\u025c\1\u025d\74\0\1\u01ef\2\0\1\u025c\1\u025d"+
    "\105\0\63\u025e\11\0\1\u025f\105\0\63\u0260\16\0\63\u018e"+
    "\16\0\63\u0261\11\0\1\u0262\105\0\63\u0263\16\0\63\u0264"+
    "\11\0\1\u0265\105\0\63\u0266\16\0\63\u0267\16\0\63\u0268"+
    "\16\0\63\u0269\16\0\63\u026a\10\0\1\u026b\1\u026c\74\0"+
    "\1\u01ff\2\0\1\u026b\1\u026c\77\0\1\u026d\1\u026e\74\0"+
    "\1\u0201\2\0\1\u026d\1\u026e\105\0\63\u026f\16\0\63\u0270"+
    "\16\0\63\u0271\16\0\63\u0272\10\0\1\u0273\1\u0274\74\0"+
    "\1\u0207\2\0\1\u0273\1\u0274\77\0\1\u0275\1\u0276\74\0"+
    "\1\u0209\2\0\1\u0275\1\u0276\100\0\1\u0277\105\0\63\u0278"+
    "\16\0\63\u0279\11\0\1\u027a\105\0\63\u027b\11\0\1\u027c"+
    "\105\0\63\u027d\11\0\1\u027e\105\0\63\u027f\16\0\63\u0280"+
    "\16\0\63\u0281\16\0\63\u0282\10\0\1\u0283\1\u0284\74\0"+
    "\1\u0217\2\0\1\u0283\1\u0284\77\0\1\u0285\1\u0286\74\0"+
    "\1\u0219\2\0\1\u0285\1\u0286\105\0\63\u0287\16\0\63\u0288"+
    "\16\0\63\u0289\23\0\1\u028a\132\0\1\u028b\117\0\1\u028c"+
    "\14\0\1\u028d\1\u028e\74\0\1\u0221\2\0\1\u028d\1\u028e"+
    "\77\0\1\u028f\1\u0290\74\0\1\u0223\2\0\1\u028f\1\u0290"+
    "\105\0\63\u0291\11\0\1\u0292\74\0\1\u0226\3\0\1\u0292"+
    "\100\0\1\u0293\74\0\1\u0228\3\0\1\u0293\105\0\63\u0294"+
    "\16\0\63\u0295\16\0\63\u0296\16\0\63\u0297\10\0\1\u0298"+
    "\1\u0299\74\0\1\u022e\2\0\1\u0298\1\u0299\77\0\1\u029a"+
    "\1\u029b\74\0\1\u0230\2\0\1\u029a\1\u029b\105\0\63\u029c"+
    "\10\0\1\u029d\1\u029e\74\0\1\u0233\2\0\1\u029d\1\u029e"+
    "\105\0\63\u029f\16\0\63\u02a0\11\0\1\u02a1\105\0\63\u02a2"+
    "\16\0\63\u02a3\11\0\1\u02a4\105\0\63\u02a5\16\0\63\u02a6"+
    "\11\0\1\u02a7\105\0\63\u02a8\11\0\1\u02a9\105\0\63\u02aa"+
    "\16\0\63\u02ab\11\0\1\u02ac\105\0\63\u02ad\16\0\63\u02ae"+
    "\11\0\1\u02af\105\0\63\u02b0\11\0\1\u02b1\105\0\63\u02b2"+
    "\16\0\63\u02b3\15\0\1\u02b4\63\u0279\16\0\63\u02b5\16\0"+
    "\63\u02b6\51\0\1\u02b7\40\0\1\u02b8\105\0\63\u02b9\11\0"+
    "\1\u02ba\105\0\63\u02bb\11\0\1\u02bc\74\0\1\u0252\3\0"+
    "\1\u02bc\100\0\1\u02bd\74\0\1\u0254\3\0\1\u02bd\105\0"+
    "\63\u02be\16\0\63\u02bf\16\0\63\u02c0\15\0\1\u02c1\63\u0279"+
    "\11\0\1\u02c2\105\0\63\u02c3\11\0\1\u02c4\105\0\63\u02c5"+
    "\16\0\63\u02c6\16\0\63\u02c7\16\0\63\u02c8\15\0\1\u02c9"+
    "\63\u0279\16\0\63\u02ca\16\0\63\u02cb\16\0\63\u02cc\16\0"+
    "\63\u02cd\16\0\63\u02ce\15\0\1\u02cf\101\0\63\u02d0\11\0"+
    "\1\u02d1\105\0\63\u02d2\11\0\1\u02d3\105\0\63\u02d4\16\0"+
    "\63\u02d5\16\0\63\u02d6\16\0\63\u02d7\16\0\63\u02d8\11\0"+
    "\1\u02d9\105\0\63\u02da\11\0\1\u02db\105\0\63\u02dc\16\0"+
    "\63\u02dd\16\0\63\u02de\16\0\63\u02df\16\0\63\u02e0\16\0"+
    "\63\u02e1\16\0\63\u02e2\16\0\63\u02e3\16\0\63\u02e4\16\0"+
    "\63\u02e5\16\0\63\u02e6\16\0\63\u02e7\16\0\63\u02e8\11\0"+
    "\1\u02e9\105\0\63\u02ea\11\0\1\u02eb\105\0\63\u02ec\16\0"+
    "\63\u02ed\16\0\63\u02ee\16\0\63\u02ef\61\0\1\u02f0\112\0"+
    "\1\u02f1\71\0\1\u02f2\25\0\1\u02f3\105\0\63\u02f4\11\0"+
    "\1\u02f5\105\0\63\u02f6\16\0\63\u02f7\16\0\63\u02f8\16\0"+
    "\63\u02f9\16\0\63\u02fa\16\0\63\u02fb\16\0\63\u02fc\16\0"+
    "\63\u02fd\11\0\1\u02fe\105\0\63\u02ff\11\0\1\u0300\105\0"+
    "\63\u0301\16\0\63\u0302\11\0\1\u0303\105\0\63\u0304\16\0"+
    "\63\u0305\15\0\1\u02c1\101\0\63\u0306\16\0\63\u0307\16\0"+
    "\63\u0308\16\0\63\u0309\15\0\1\u02c1\63\u030a\16\0\63\u030b"+
    "\16\0\63\u030c\16\0\63\u030d\16\0\63\u030e\15\0\1\u02c1"+
    "\63\u030f\16\0\63\u0310\16\0\63\u0311\15\0\1\u02cf\63\u0279"+
    "\16\0\63\u0312\16\0\63\u0313\16\0\63\u0314\16\0\63\u0315"+
    "\15\0\1\u0316\63\u0317\7\0\1\u02df\37\0\2\u02df\26\0"+
    "\2\u02df\1\0\1\u02df\14\0\63\u0318\15\0\1\u0319\136\0"+
    "\1\u031a\43\0\63\u031b\16\0\63\u031c\16\0\63\u031d\16\0"+
    "\63\u031e\16\0\63\u031f\16\0\63\u0320\16\0\63\u0321\16\0"+
    "\63\u0322\15\0\1\u0323\63\u0324\4\0\2\u02b4\1\u0325\1\u0326"+
    "\37\0\2\u02df\26\0\2\u02df\1\0\1\u02df\14\0\63\u0327"+
    "\16\0\63\u0328\16\0\63\u0329\16\0\63\u032a\15\0\1\u032b"+
    "\63\u032c\16\0\63\u032d\15\0\1\u032e\63\u032f\4\0\2\u02b4"+
    "\1\u0325\1\u02b4\10\0\61\u02df\16\0\63\u0330\15\0\1\u0331"+
    "\63\u0332\16\0\63\u0333\15\0\1\u0334\63\u0335\15\0\1\u0336"+
    "\67\0\2\u02b4\1\u0325\1\u02b4\106\0\1\u0337\63\u0338\16\0"+
    "\63\u0339\16\0\63\u033a\16\0\63\u033b\16\0\63\u033c\15\0"+
    "\1\u033d\63\u033e\15\0\1\u033f\63\u0340\15\0\1\u0341\63\u0342"+
    "\16\0\63\u0343\16\0\63\u0344\16\0\63\u0345\16\0\63\u0346"+
    "\16\0\63\u0347\15\0\1\u0348\63\u0349\16\0\63\u034a\15\0"+
    "\1\u034b\63\u034c\16\0\63\u034d\15\0\1\u034e\63\u034f\16\0"+
    "\63\u0350\15\0\1\u0351\63\u0352\15\0\1\u0353\63\u0354\15\0"+
    "\1\u0355\63\u0356\15\0\1\u0357\63\u0358\16\0\63\u0359\16\0"+
    "\63\u035a\16\0\63\u035b\16\0\63\u035c\16\0\63\u035d\15\0"+
    "\1\u035e\63\u035f\15\0\1\u0360\63\u0361\71\0\1\u0362\100\0"+
    "\1\u0363\64\0\1\u0364\41\0\63\u0365\16\0\63\u0366\16\0"+
    "\63\u0367\16\0\63\u0368\15\0\1\u02c1\63\u0369\16\0\63\u036a"+
    "\16\0\63\u036b\15\0\1\u036c\63\u036d\15\0\1\u036e\63\u036f"+
    "\15\0\1\u0370\63\u0371\15\0\1\u0372\63\u0373\16\0\63\u0374"+
    "\16\0\63\u0375\16\0\63\u0376\16\0\63\u0377\15\0\1\u02c1"+
    "\63\u0378\16\0\63\u0379\16\0\63\u037a\15\0\1\u037b\63\u037c"+
    "\16\0\63\u037d\16\0\63\u037e\16\0\63\u037f\15\0\1\u0380"+
    "\63\u030a\16\0\63\u0381\16\0\63\u0382\15\0\1\u0383\63\u0384"+
    "\16\0\63\u0385\15\0\1\u0386\63\u030f\16\0\63\u0387\16\0"+
    "\63\u0388\15\0\1\u0389\63\u038a\16\0\63\u038b\15\0\1\u038c"+
    "\63\u038d\16\0\63\u038e\15\0\1\u038f\63\u0390\4\0\2\u0391"+
    "\1\u0392\1\u0393\37\0\2\u0394\26\0\2\u0394\1\0\1\u0394"+
    "\14\0\63\u0395\15\0\1\u0396\72\0\1\u0397\1\u020d\36\0"+
    "\2\u0397\26\0\2\u0397\1\0\1\u0397\57\0\1\u0398\35\0"+
    "\63\u0399\15\0\1\u039a\63\u039b\16\0\63\u039c\15\0\1\u039d"+
    "\63\u039e\16\0\63\u039f\16\0\63\u03a0\15\0\1\u03a1\101\0"+
    "\63\u01e8\4\0\2\u03a2\1\u03a3\1\u03a4\37\0\2\u03a5\26\0"+
    "\2\u03a5\1\0\1\u03a5\14\0\63\u03a6\5\0\1\u02b4\1\0"+
    "\1\u02df\37\0\2\u02df\26\0\2\u02df\1\0\1\u02df\14\0"+
    "\63\u03a7\15\0\1\u03a8\63\u03a9\16\0\63\u03aa\15\0\1\u03ab"+
    "\63\u03ac\4\0\2\u03ad\1\u03ae\1\u03af\37\0\2\u03b0\26\0"+
    "\2\u03b0\1\0\1\u03b0\14\0\63\u03b1\16\0\63\u03b2\4\0"+
    "\2\u03b3\1\u03b4\1\u03b3\10\0\61\u03b5\16\0\63\u03b6\16\0"+
    "\63\u03b7\4\0\2\u03b8\1\u03b9\1\u03ba\37\0\2\u03bb\26\0"+
    "\2\u03bb\1\0\1\u03bb\14\0\63\u03bc\16\0\63\u03bd\7\0"+
    "\1\u03be\37\0\2\u03be\26\0\2\u03be\1\0\1\u03be\14\0"+
    "\63\u03bf\4\0\2\u0334\1\u03c0\1\u0334\75\0\2\u03c1\1\u03c2"+
    "\1\u03c3\37\0\2\u03c4\26\0\2\u03c4\1\0\1\u03c4\14\0"+
    "\63\u03c5\16\0\63\u03c6\15\0\1\u0353\63\u03c7\16\0\63\u03c8"+
    "\15\0\1\u03c9\67\0\2\u03ca\1\u03cb\1\u03cc\37\0\2\u03cd"+
    "\26\0\2\u03cd\1\0\1\u03cd\14\0\63\u03ce\4\0\2\u03cf"+
    "\1\u03d0\1\u03d1\37\0\2\u03d2\26\0\2\u03d2\1\0\1\u03d2"+
    "\14\0\63\u03d3\4\0\2\u03d4\1\u03d5\1\u03d6\37\0\2\u03d7"+
    "\26\0\2\u03d7\1\0\1\u03d7\14\0\63\u03d8\16\0\63\u03d9"+
    "\15\0\1\u03da\63\u03db\16\0\63\u03dc\15\0\1\u03dd\63\u03de"+
    "\4\0\2\u03df\1\u03e0\1\u03e1\37\0\2\u03e2\26\0\2\u03e2"+
    "\1\0\1\u03e2\14\0\63\u03e3\4\0\2\u03e4\1\u03e5\1\u03e6"+
    "\37\0\2\u03e7\26\0\2\u03e7\1\0\1\u03e7\14\0\63\u03e8"+
    "\4\0\2\u03e9\1\u03ea\1\u03eb\37\0\2\u03ec\26\0\2\u03ec"+
    "\1\0\1\u03ec\14\0\63\u03ed\4\0\2\u03ee\1\u03ef\1\u03f0"+
    "\37\0\2\u03f1\26\0\2\u03f1\1\0\1\u03f1\14\0\63\u03f2"+
    "\4\0\2\u03f3\1\u03f4\1\u03f5\37\0\2\u03f6\26\0\2\u03f6"+
    "\1\0\1\u03f6\14\0\63\u03f7\4\0\2\u03f8\1\u03f9\1\u03fa"+
    "\37\0\2\u03fb\26\0\2\u03fb\1\0\1\u03fb\14\0\63\u03fc"+
    "\4\0\2\u03fd\1\u03fe\1\u03ff\37\0\2\u0400\26\0\2\u0400"+
    "\1\0\1\u0400\14\0\63\u0401\16\0\63\u0402\15\0\1\u0403"+
    "\63\u0404\16\0\63\u0405\15\0\1\u0406\63\u0407\4\0\2\u0408"+
    "\1\u0409\1\u040a\37\0\2\u040b\26\0\2\u040b\1\0\1\u040b"+
    "\14\0\63\u040c\4\0\2\u040d\1\u040e\1\u040f\37\0\2\u0410"+
    "\26\0\2\u0410\1\0\1\u0410\14\0\63\u0411\24\0\1\u0412"+
    "\15\0\1\u0413\107\0\1\u0414\120\0\1\u0415\25\0\63\u0416"+
    "\15\0\1\u0417\63\u0418\16\0\63\u0419\15\0\1\u041a\63\u0369"+
    "\16\0\63\u041b\15\0\1\u041c\63\u041d\15\0\1\u041e\63\u041f"+
    "\4\0\2\u0420\1\u0421\1\u0422\37\0\2\u0423\26\0\2\u0423"+
    "\1\0\1\u0423\14\0\63\u0424\4\0\2\u0425\1\u0426\1\u0427"+
    "\37\0\2\u0428\26\0\2\u0428\1\0\1\u0428\14\0\63\u0429"+
    "\4\0\2\u042a\1\u042b\1\u042c\37\0\2\u042d\26\0\2\u042d"+
    "\1\0\1\u042d\14\0\63\u042e\4\0\2\u042f\1\u0430\1\u0431"+
    "\37\0\2\u0432\26\0\2\u0432\1\0\1\u0432\14\0\63\u0433"+
    "\16\0\63\u0434\15\0\1\u0435\63\u0436\16\0\63\u0437\15\0"+
    "\1\u0438\63\u0378\16\0\63\u0439\16\0\63\u043a\16\0\63\u043b"+
    "\4\0\2\u043c\1\u043d\1\u043e\37\0\2\u043f\26\0\2\u043f"+
    "\1\0\1\u043f\14\0\63\u0440\16\0\63\u0441\4\0\2\u0442"+
    "\1\u0443\1\u0444\37\0\2\u0445\26\0\2\u0445\1\0\1\u0445"+
    "\2\0\2\u0446\1\u0447\1\u0448\37\0\2\u0449\26\0\2\u0449"+
    "\1\0\1\u0449\14\0\63\u044a\4\0\2\u044b\1\u044c\1\u044d"+
    "\37\0\2\u044e\26\0\2\u044e\1\0\1\u044e\14\0\63\u044f"+
    "\4\0\2\u0450\1\u0451\1\u0450\107\0\63\u0452\4\0\2\u0453"+
    "\1\u0454\1\u0455\37\0\2\u0456\26\0\2\u0456\1\0\1\u0456"+
    "\14\0\63\u0457\4\0\2\u0458\1\u0459\1\u045a\37\0\2\u045b"+
    "\26\0\2\u045b\1\0\1\u045b\14\0\63\u045c\7\0\1\u0394"+
    "\37\0\2\u0394\26\0\2\u0394\1\0\1\u0394\3\0\1\u0391"+
    "\1\0\1\u0394\37\0\2\u0394\26\0\2\u0394\1\0\1\u0394"+
    "\5\0\1\u045d\1\u045e\36\0\2\u045d\26\0\2\u045d\1\0"+
    "\1\u045d\13\0\1\u045f\151\0\1\u0460\16\0\2\u0461\1\u0462"+
    "\1\u0463\37\0\2\u0464\26\0\2\u0464\1\0\1\u0464\14\0"+
    "\63\u0465\4\0\2\u0466\1\u0467\1\u0468\37\0\2\u0469\26\0"+
    "\2\u0469\1\0\1\u0469\14\0\63\u046a\15\0\1\u046b\100\0"+
    "\1\u046c\72\0\1\u046d\1\u046e\36\0\2\u046d\26\0\2\u046d"+
    "\1\0\1\u046d\5\0\1\u03a5\37\0\2\u03a5\26\0\2\u03a5"+
    "\1\0\1\u03a5\3\0\1\u03a2\1\0\1\u03a5\37\0\2\u03a5"+
    "\26\0\2\u03a5\1\0\1\u03a5\2\0\2\u046f\1\u0470\1\u0471"+
    "\37\0\2\u0472\26\0\2\u0472\1\0\1\u0472\14\0\63\u0473"+
    "\4\0\2\u0474\1\u0475\1\u0476\37\0\2\u0477\26\0\2\u0477"+
    "\1\0\1\u0477\14\0\63\u0478\7\0\1\u03b0\37\0\2\u03b0"+
    "\26\0\2\u03b0\1\0\1\u03b0\3\0\1\u03ad\1\0\1\u03b0"+
    "\37\0\2\u03b0\26\0\2\u03b0\1\0\1\u03b0\14\0\63\u0479"+
    "\7\0\1\u03b5\37\0\2\u03b5\26\0\2\u03b5\1\0\1\u03b5"+
    "\3\0\1\u03b3\1\0\1\u03b5\37\0\2\u03b5\26\0\2\u03b5"+
    "\1\0\1\u03b5\14\0\63\u047a\7\0\1\u03bb\37\0\2\u03bb"+
    "\26\0\2\u03bb\1\0\1\u03bb\3\0\1\u03b8\1\0\1\u03bb"+
    "\37\0\2\u03bb\26\0\2\u03bb\1\0\1\u03bb\14\0\63\u047b"+
    "\5\0\1\u0334\1\0\1\u03be\37\0\2\u03be\26\0\2\u03be"+
    "\1\0\1\u03be\5\0\1\u03c4\37\0\2\u03c4\26\0\2\u03c4"+
    "\1\0\1\u03c4\3\0\1\u03c1\1\0\1\u03c4\37\0\2\u03c4"+
    "\26\0\2\u03c4\1\0\1\u03c4\14\0\63\u047c\4\0\2\u047d"+
    "\1\u047e\1\u047f\37\0\2\u0480\26\0\2\u0480\1\0\1\u0480"+
    "\5\0\1\u03cd\37\0\2\u03cd\26\0\2\u03cd\1\0\1\u03cd"+
    "\3\0\1\u03ca\1\0\1\u03cd\37\0\2\u03cd\26\0\2\u03cd"+
    "\1\0\1\u03cd\5\0\1\u03d2\37\0\2\u03d2\26\0\2\u03d2"+
    "\1\0\1\u03d2\3\0\1\u03cf\1\0\1\u03d2\37\0\2\u03d2"+
    "\26\0\2\u03d2\1\0\1\u03d2\5\0\1\u03d7\37\0\2\u03d7"+
    "\26\0\2\u03d7\1\0\1\u03d7\3\0\1\u03d4\1\0\1\u03d7"+
    "\37\0\2\u03d7\26\0\2\u03d7\1\0\1\u03d7\2\0\2\u0481"+
    "\1\u0482\1\u0483\37\0\2\u0484\26\0\2\u0484\1\0\1\u0484"+
    "\14\0\63\u0485\4\0\2\u0486\1\u0487\1\u0488\37\0\2\u0489"+
    "\26\0\2\u0489\1\0\1\u0489\14\0\63\u048a\7\0\1\u03e2"+
    "\37\0\2\u03e2\26\0\2\u03e2\1\0\1\u03e2\3\0\1\u03df"+
    "\1\0\1\u03e2\37\0\2\u03e2\26\0\2\u03e2\1\0\1\u03e2"+
    "\5\0\1\u03e7\37\0\2\u03e7\26\0\2\u03e7\1\0\1\u03e7"+
    "\3\0\1\u03e4\1\0\1\u03e7\37\0\2\u03e7\26\0\2\u03e7"+
    "\1\0\1\u03e7\5\0\1\u03ec\37\0\2\u03ec\26\0\2\u03ec"+
    "\1\0\1\u03ec\3\0\1\u03e9\1\0\1\u03ec\37\0\2\u03ec"+
    "\26\0\2\u03ec\1\0\1\u03ec\5\0\1\u03f1\37\0\2\u03f1"+
    "\26\0\2\u03f1\1\0\1\u03f1\3\0\1\u03ee\1\0\1\u03f1"+
    "\37\0\2\u03f1\26\0\2\u03f1\1\0\1\u03f1\5\0\1\u03f6"+
    "\37\0\2\u03f6\26\0\2\u03f6\1\0\1\u03f6\3\0\1\u03f3"+
    "\1\0\1\u03f6\37\0\2\u03f6\26\0\2\u03f6\1\0\1\u03f6"+
    "\5\0\1\u03fb\37\0\2\u03fb\26\0\2\u03fb\1\0\1\u03fb"+
    "\3\0\1\u03f8\1\0\1\u03fb\37\0\2\u03fb\26\0\2\u03fb"+
    "\1\0\1\u03fb\5\0\1\u0400\37\0\2\u0400\26\0\2\u0400"+
    "\1\0\1\u0400\3\0\1\u03fd\1\0\1\u0400\37\0\2\u0400"+
    "\26\0\2\u0400\1\0\1\u0400\2\0\2\u048b\1\u048c\1\u048d"+
    "\37\0\2\u048e\26\0\2\u048e\1\0\1\u048e\14\0\63\u048f"+
    "\4\0\2\u0490\1\u0491\1\u0492\37\0\2\u0493\26\0\2\u0493"+
    "\1\0\1\u0493\14\0\63\u0494\7\0\1\u040b\37\0\2\u040b"+
    "\26\0\2\u040b\1\0\1\u040b\3\0\1\u0408\1\0\1\u040b"+
    "\37\0\2\u040b\26\0\2\u040b\1\0\1\u040b\5\0\1\u0410"+
    "\37\0\2\u0410\26\0\2\u0410\1\0\1\u0410\3\0\1\u040d"+
    "\1\0\1\u0410\37\0\2\u0410\26\0\2\u0410\1\0\1\u0410"+
    "\75\0\1\u0495\62\0\1\u0496\47\0\1\u0497\136\0\1\u01e8"+
    "\16\0\2\u0498\1\u0499\1\u0498\107\0\63\u049a\4\0\2\u049b"+
    "\1\u049c\1\u049d\37\0\2\u049e\26\0\2\u049e\1\0\1\u049e"+
    "\2\0\2\u049f\1\u04a0\1\u04a1\37\0\2\u04a2\26\0\2\u04a2"+
    "\1\0\1\u04a2\14\0\63\u04a3\4\0\2\u04a4\1\u04a5\1\u04a6"+
    "\37\0\2\u04a7\26\0\2\u04a7\1\0\1\u04a7\14\0\63\u04a8"+
    "\7\0\1\u0423\37\0\2\u0423\26\0\2\u0423\1\0\1\u0423"+
    "\3\0\1\u0420\1\0\1\u0423\37\0\2\u0423\26\0\2\u0423"+
    "\1\0\1\u0423\5\0\1\u0428\37\0\2\u0428\26\0\2\u0428"+
    "\1\0\1\u0428\3\0\1\u0425\1\0\1\u0428\37\0\2\u0428"+
    "\26\0\2\u0428\1\0\1\u0428\5\0\1\u042d\37\0\2\u042d"+
    "\26\0\2\u042d\1\0\1\u042d\3\0\1\u042a\1\0\1\u042d"+
    "\37\0\2\u042d\26\0\2\u042d\1\0\1\u042d\5\0\1\u0432"+
    "\37\0\2\u0432\26\0\2\u0432\1\0\1\u0432\3\0\1\u042f"+
    "\1\0\1\u0432\37\0\2\u0432\26\0\2\u0432\1\0\1\u0432"+
    "\14\0\63\u04a9\4\0\2\u04aa\1\u04ab\1\u04aa\107\0\63\u04ac"+
    "\16\0\63\u04ad\4\0\2\u04ae\1\u04af\1\u04b0\37\0\2\u04b1"+
    "\26\0\2\u04b1\1\0\1\u04b1\14\0\63\u04b2\16\0\63\u04b3"+
    "\7\0\1\u043f\37\0\2\u043f\26\0\2\u043f\1\0\1\u043f"+
    "\3\0\1\u043c\1\0\1\u043f\37\0\2\u043f\26\0\2\u043f"+
    "\1\0\1\u043f\5\0\1\u0445\37\0\2\u0445\26\0\2\u0445"+
    "\1\0\1\u0445\3\0\1\u0442\1\0\1\u0445\37\0\2\u0445"+
    "\26\0\2\u0445\1\0\1\u0445\5\0\1\u0449\37\0\2\u0449"+
    "\26\0\2\u0449\1\0\1\u0449\3\0\1\u0446\1\0\1\u0449"+
    "\37\0\2\u0449\26\0\2\u0449\1\0\1\u0449\5\0\1\u044e"+
    "\37\0\2\u044e\26\0\2\u044e\1\0\1\u044e\3\0\1\u044b"+
    "\1\0\1\u044e\37\0\2\u044e\26\0\2\u044e\1\0\1\u044e"+
    "\14\0\63\u04b4\7\0\1\u04b5\37\0\2\u04b5\26\0\2\u04b5"+
    "\1\0\1\u04b5\3\0\1\u0450\1\0\1\u04b5\37\0\2\u04b5"+
    "\26\0\2\u04b5\1\0\1\u04b5\5\0\1\u0456\37\0\2\u0456"+
    "\26\0\2\u0456\1\0\1\u0456\3\0\1\u0453\1\0\1\u0456"+
    "\37\0\2\u0456\26\0\2\u0456\1\0\1\u0456\5\0\1\u045b"+
    "\37\0\2\u045b\26\0\2\u045b\1\0\1\u045b\3\0\1\u0458"+
    "\1\0\1\u045b\37\0\2\u045b\26\0\2\u045b\1\0\1\u045b"+
    "\13\0\1\u04b6\101\0\63\u04b7\10\0\1\u020d\114\0\1\u04b8"+
    "\63\0\1\u0464\37\0\2\u0464\26\0\2\u0464\1\0\1\u0464"+
    "\3\0\1\u0461\1\0\1\u0464\37\0\2\u0464\26\0\2\u0464"+
    "\1\0\1\u0464\5\0\1\u0469\37\0\2\u0469\26\0\2\u0469"+
    "\1\0\1\u0469\3\0\1\u0466\1\0\1\u0469\37\0\2\u0469"+
    "\26\0\2\u0469\1\0\1\u0469\5\0\1\u04b9\1\u04ba\36\0"+
    "\2\u04b9\26\0\2\u04b9\1\0\1\u04b9\5\0\1\u04bb\1\u04bc"+
    "\36\0\2\u04bb\26\0\2\u04bb\1\0\1\u04bb\13\0\1\u04bd"+
    "\101\0\63\u04be\7\0\1\u0472\37\0\2\u0472\26\0\2\u0472"+
    "\1\0\1\u0472\3\0\1\u046f\1\0\1\u0472\37\0\2\u0472"+
    "\26\0\2\u0472\1\0\1\u0472\5\0\1\u0477\37\0\2\u0477"+
    "\26\0\2\u0477\1\0\1\u0477\3\0\1\u0474\1\0\1\u0477"+
    "\37\0\2\u0477\26\0\2\u0477\1\0\1\u0477\5\0\1\u0480"+
    "\37\0\2\u0480\26\0\2\u0480\1\0\1\u0480\3\0\1\u047d"+
    "\1\0\1\u0480\37\0\2\u0480\26\0\2\u0480\1\0\1\u0480"+
    "\5\0\1\u0484\37\0\2\u0484\26\0\2\u0484\1\0\1\u0484"+
    "\3\0\1\u0481\1\0\1\u0484\37\0\2\u0484\26\0\2\u0484"+
    "\1\0\1\u0484\5\0\1\u0489\37\0\2\u0489\26\0\2\u0489"+
    "\1\0\1\u0489\3\0\1\u0486\1\0\1\u0489\37\0\2\u0489"+
    "\26\0\2\u0489\1\0\1\u0489\5\0\1\u048e\37\0\2\u048e"+
    "\26\0\2\u048e\1\0\1\u048e\3\0\1\u048b\1\0\1\u048e"+
    "\37\0\2\u048e\26\0\2\u048e\1\0\1\u048e\5\0\1\u0493"+
    "\37\0\2\u0493\26\0\2\u0493\1\0\1\u0493\3\0\1\u0490"+
    "\1\0\1\u0493\37\0\2\u0493\26\0\2\u0493\1\0\1\u0493"+
    "\71\0\1\u01e8\71\0\1\u04bf\101\0\1\u04c0\22\0\1\u04c1"+
    "\37\0\2\u04c1\26\0\2\u04c1\1\0\1\u04c1\3\0\1\u0498"+
    "\1\0\1\u04c1\37\0\2\u04c1\26\0\2\u04c1\1\0\1\u04c1"+
    "\5\0\1\u049e\37\0\2\u049e\26\0\2\u049e\1\0\1\u049e"+
    "\3\0\1\u049b\1\0\1\u049e\37\0\2\u049e\26\0\2\u049e"+
    "\1\0\1\u049e\5\0\1\u04a2\37\0\2\u04a2\26\0\2\u04a2"+
    "\1\0\1\u04a2\3\0\1\u049f\1\0\1\u04a2\37\0\2\u04a2"+
    "\26\0\2\u04a2\1\0\1\u04a2\5\0\1\u04a7\37\0\2\u04a7"+
    "\26\0\2\u04a7\1\0\1\u04a7\3\0\1\u04a4\1\0\1\u04a7"+
    "\37\0\2\u04a7\26\0\2\u04a7\1\0\1\u04a7\14\0\63\u04c2"+
    "\7\0\1\u04c3\37\0\2\u04c3\26\0\2\u04c3\1\0\1\u04c3"+
    "\3\0\1\u04aa\1\0\1\u04c3\37\0\2\u04c3\26\0\2\u04c3"+
    "\1\0\1\u04c3\14\0\63\u04c4\7\0\1\u04b1\37\0\2\u04b1"+
    "\26\0\2\u04b1\1\0\1\u04b1\3\0\1\u04ae\1\0\1\u04b1"+
    "\37\0\2\u04b1\26\0\2\u04b1\1\0\1\u04b1\14\0\63\u04c5"+
    "\10\0\1\u04c6\106\0\63\u04c7\65\0\1\u04c8\30\0\1\u04c9"+
    "\101\0\63\u04ca\15\0\1\u04cb\101\0\63\u04cc\10\0\1\u04cd"+
    "\106\0\63\u04ce\67\0\1\u04cf\65\0\1\u04d0\42\0\63\u04d1"+
    "\21\0\1\u04d2\67\0\1\u04d3\106\0\63\u04d4\10\0\1\u04d5"+
    "\106\0\63\u04d6\16\0\63\u04d7\63\0\1\u04d8\72\0\1\u04d9"+
    "\41\0\63\u04da\63\0\1\u04db\33\0\63\u04dc\16\0\63\u04dd"+
    "\16\0\63\u04de\55\0\1\u01e8\122\0\1\u01e8\52\0\1\u04df"+
    "\45\0\63\u04e0\16\0\63\u04e1\65\0\1\u04e2\66\0\1\u04e3"+
    "\113\0\1\u019f\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[62270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\44\0\1\11\161\0\1\1\3\11\3\0\1\1\1\0"+
    "\1\11\1\0\4\1\1\0\7\1\1\0\1\1\2\0"+
    "\5\1\1\0\1\1\6\0\1\11\1\0\4\11\1\0"+
    "\2\11\3\0\3\11\11\0\1\11\1\0\1\1\6\0"+
    "\2\1\1\11\1\0\3\1\7\0\4\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\3\0\1\1\11\0\1\1"+
    "\1\0\3\1\4\0\3\1\3\0\1\1\6\0\1\1"+
    "\17\0\3\11\3\0\2\1\14\0\2\11\4\0\2\11"+
    "\17\0\2\11\2\0\2\11\2\0\2\11\21\0\3\1"+
    "\2\0\3\1\2\0\2\11\5\0\10\1\2\0\2\1"+
    "\2\0\2\1\10\0\1\1\11\0\1\1\2\0\4\1"+
    "\3\0\14\1\1\11\40\0\1\11\2\1\63\0\1\1"+
    "\102\0\1\1\2\0\1\1\2\0\1\1\73\0\1\1"+
    "\2\0\1\1\4\0\1\1\2\0\1\1\20\0\1\1"+
    "\10\0\1\1\2\0\1\1\1\0\1\1\7\0\1\1"+
    "\2\0\1\1\5\0\1\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\21\0\1\1\2\0\4\1\4\0"+
    "\1\1\4\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\6\0"+
    "\1\1\1\0\1\1\7\0\1\1\1\0\1\1\1\0"+
    "\1\1\17\0\1\1\1\0\1\1\7\0\1\1\1\0"+
    "\1\1\1\11\2\0\1\11\2\0\1\11\2\0\1\11"+
    "\11\0\1\1\1\0\1\1\1\11\10\0\1\1\1\0"+
    "\1\1\1\0\2\1\11\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\11\1\0\1\11\1\0\2\11\2\0"+
    "\1\11\1\0\1\11\3\0\1\11\2\0\1\11\4\0"+
    "\1\1\2\11\3\0\1\11\2\0\1\11\7\0\1\1"+
    "\3\11\2\0\1\11\4\0\1\1\2\11\3\0\2\11"+
    "\3\0\1\1\2\11\1\0\2\11\3\0\1\1\3\11"+
    "\1\0\1\11\3\0\1\1\2\11\2\0\1\1\2\11"+
    "\2\0\1\1\3\11\2\0\1\11\4\0\1\1\2\11"+
    "\2\0\1\1\2\11\2\0\1\1\2\11\2\0\1\1"+
    "\2\11\2\0\1\1\2\11\2\0\1\1\2\11\2\0"+
    "\1\1\3\11\2\0\1\11\4\0\1\1\2\11\2\0"+
    "\1\1\2\11\2\0\1\1\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\6\0\1\1\2\11\2\0\1\1\2\11"+
    "\2\0\1\1\2\11\2\0\1\1\2\11\5\0\1\11"+
    "\4\0\1\1\3\11\2\0\1\1\1\11\2\0\1\1"+
    "\2\11\2\0\1\1\1\11\3\0\1\11\2\0\1\1"+
    "\2\11\2\0\1\1\2\11\6\0\1\1\2\11\2\0"+
    "\1\1\2\11\6\0\1\1\2\11\2\0\1\1\6\11"+
    "\2\0\1\1\1\11\2\0\1\1\2\11\2\0\1\1"+
    "\2\11\2\0\1\1\2\11\2\0\1\1\2\11\5\0"+
    "\1\11\2\0\1\1\1\11\2\0\1\1\2\11\2\0"+
    "\1\1\2\11\3\0\1\11\3\0\1\1\1\11\1\0"+
    "\3\11\13\0\5\11\1\0\1\11\6\0\1\11\5\0"+
    "\1\11\1\0\1\11\3\0\1\11\3\0\1\11\1\0"+
    "\2\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 261: break;
          case 2:
            { return token(yytext(),"LLAVE_A",yyline,yycolumn);
            }
            // fall through
          case 262: break;
          case 3:
            { return token(yytext(),"LLAVE_C",yyline,yycolumn);
            }
            // fall through
          case 263: break;
          case 4:
            { return token(yytext(),"PARENTESIS_A",yyline,yycolumn);
            }
            // fall through
          case 264: break;
          case 5:
            { return token(yytext(),"PARENTESIS_C",yyline,yycolumn);
            }
            // fall through
          case 265: break;
          case 6:
            { return token(yytext(),"COMA",yyline,yycolumn);
            }
            // fall through
          case 266: break;
          case 7:
            { return token(yytext(), "DirSimple", yyline, yycolumn);
            }
            // fall through
          case 267: break;
          case 8:
            { return token(yytext(),"Inst_ABA",yyline,yycolumn);
            }
            // fall through
          case 268: break;
          case 9:
            { return token(yytext(),"Inst_ABX",yyline,yycolumn);
            }
            // fall through
          case 269: break;
          case 10:
            { return token(yytext(),"Inst_ABY",yyline,yycolumn);
            }
            // fall through
          case 270: break;
          case 11:
            { return token(yytext(),"Inst_EORA_Index",yyline,yycolumn);
            }
            // fall through
          case 271: break;
          case 12:
            { return token(yytext(),"Inst_BCC",yyline,yycolumn);
            }
            // fall through
          case 272: break;
          case 13:
            { return token(yytext(),"Inst_BEQ",yyline,yycolumn);
            }
            // fall through
          case 273: break;
          case 14:
            { return token(yytext(),"Inst_BGE",yyline,yycolumn);
            }
            // fall through
          case 274: break;
          case 15:
            { return token(yytext(),"Inst_BGT",yyline,yycolumn);
            }
            // fall through
          case 275: break;
          case 16:
            { return token(yytext(),"Inst_BHI",yyline,yycolumn);
            }
            // fall through
          case 276: break;
          case 17:
            { return token(yytext(),"Inst_BLE",yyline,yycolumn);
            }
            // fall through
          case 277: break;
          case 18:
            { return token(yytext(),"Inst_BLS",yyline,yycolumn);
            }
            // fall through
          case 278: break;
          case 19:
            { return token(yytext(),"Inst_BLT",yyline,yycolumn);
            }
            // fall through
          case 279: break;
          case 20:
            { return token(yytext(),"Inst_BMI",yyline,yycolumn);
            }
            // fall through
          case 280: break;
          case 21:
            { return token(yytext(),"Inst_BNE",yyline,yycolumn);
            }
            // fall through
          case 281: break;
          case 22:
            { return token(yytext(),"Inst_BPL",yyline,yycolumn);
            }
            // fall through
          case 282: break;
          case 23:
            { return token(yytext(),"Inst_BRA",yyline,yycolumn);
            }
            // fall through
          case 283: break;
          case 24:
            { return token(yytext(),"Inst_BRN",yyline,yycolumn);
            }
            // fall through
          case 284: break;
          case 25:
            { return token(yytext(),"Inst_BVC",yyline,yycolumn);
            }
            // fall through
          case 285: break;
          case 26:
            { return token(yytext(),"Inst_BVS",yyline,yycolumn);
            }
            // fall through
          case 286: break;
          case 27:
            { return token(yytext(),"Inst_CBA",yyline,yycolumn);
            }
            // fall through
          case 287: break;
          case 28:
            { return token(yytext(),"Inst_CLC",yyline,yycolumn);
            }
            // fall through
          case 288: break;
          case 29:
            { return token(yytext(),"Inst_CLI",yyline,yycolumn);
            }
            // fall through
          case 289: break;
          case 30:
            { return token(yytext(),"Inst_CLV",yyline,yycolumn);
            }
            // fall through
          case 290: break;
          case 31:
            { return token(yytext(),"Inst_DAA",yyline,yycolumn);
            }
            // fall through
          case 291: break;
          case 32:
            { return token(yytext(),"Inst_DES",yyline,yycolumn);
            }
            // fall through
          case 292: break;
          case 33:
            { return token(yytext(),"Inst_DEX",yyline,yycolumn);
            }
            // fall through
          case 293: break;
          case 34:
            { return token(yytext(),"Inst_DEY",yyline,yycolumn);
            }
            // fall through
          case 294: break;
          case 35:
            { return token(yytext(),"FINAL",yyline,yycolumn);
            }
            // fall through
          case 295: break;
          case 36:
            { return token(yytext(),"Directiva_EQU",yyline,yycolumn);
            }
            // fall through
          case 296: break;
          case 37:
            { return token(yytext(),"Directiva_FCB",yyline,yycolumn);
            }
            // fall through
          case 297: break;
          case 38:
            { return token(yytext(),"Inst_INS",yyline,yycolumn);
            }
            // fall through
          case 298: break;
          case 39:
            { return token(yytext(),"Inst_INX",yyline,yycolumn);
            }
            // fall through
          case 299: break;
          case 40:
            { return token(yytext(),"Inst_INY",yyline,yycolumn);
            }
            // fall through
          case 300: break;
          case 41:
            { return token(yytext(),"Inst_MUL",yyline,yycolumn);
            }
            // fall through
          case 301: break;
          case 42:
            { return token(yytext(),"Inst_NOP",yyline,yycolumn);
            }
            // fall through
          case 302: break;
          case 43:
            { return token(yytext(),"Inst_RTI",yyline,yycolumn);
            }
            // fall through
          case 303: break;
          case 44:
            { return token(yytext(),"Inst_RTS",yyline,yycolumn);
            }
            // fall through
          case 304: break;
          case 45:
            { return token(yytext(),"Inst_SBA",yyline,yycolumn);
            }
            // fall through
          case 305: break;
          case 46:
            { return token(yytext(),"Inst_SEC",yyline,yycolumn);
            }
            // fall through
          case 306: break;
          case 47:
            { return token(yytext(),"Inst_SEI",yyline,yycolumn);
            }
            // fall through
          case 307: break;
          case 48:
            { return token(yytext(),"Inst_SEV",yyline,yycolumn);
            }
            // fall through
          case 308: break;
          case 49:
            { return token(yytext(),"Inst_SWI",yyline,yycolumn);
            }
            // fall through
          case 309: break;
          case 50:
            { return token(yytext(),"Inst_TAB",yyline,yycolumn);
            }
            // fall through
          case 310: break;
          case 51:
            { return token(yytext(),"Inst_TAP",yyline,yycolumn);
            }
            // fall through
          case 311: break;
          case 52:
            { return token(yytext(),"Inst_TBA",yyline,yycolumn);
            }
            // fall through
          case 312: break;
          case 53:
            { return token(yytext(),"Inst_TPA",yyline,yycolumn);
            }
            // fall through
          case 313: break;
          case 54:
            { return token(yytext(),"Inst_TSX",yyline,yycolumn);
            }
            // fall through
          case 314: break;
          case 55:
            { return token(yytext(),"Inst_TXS",yyline,yycolumn);
            }
            // fall through
          case 315: break;
          case 56:
            { return token(yytext(),"Inst_WAI",yyline,yycolumn);
            }
            // fall through
          case 316: break;
          case 57:
            { return token(yytext(),"Inst_ASLA",yyline,yycolumn);
            }
            // fall through
          case 317: break;
          case 58:
            { return token(yytext(),"Inst_ASLB",yyline,yycolumn);
            }
            // fall through
          case 318: break;
          case 59:
            { return token(yytext(),"Inst_ASLD",yyline,yycolumn);
            }
            // fall through
          case 319: break;
          case 60:
            { return token(yytext(),"Inst_ASRA",yyline,yycolumn);
            }
            // fall through
          case 320: break;
          case 61:
            { return token(yytext(),"Inst_ASRB",yyline,yycolumn);
            }
            // fall through
          case 321: break;
          case 62:
            { return token(yytext(),"Inst_CLRA",yyline,yycolumn);
            }
            // fall through
          case 322: break;
          case 63:
            { return token(yytext(),"Inst_CLRB",yyline,yycolumn);
            }
            // fall through
          case 323: break;
          case 64:
            { return token(yytext(),"Inst_COMA",yyline,yycolumn);
            }
            // fall through
          case 324: break;
          case 65:
            { return token(yytext(),"Inst_COMB",yyline,yycolumn);
            }
            // fall through
          case 325: break;
          case 66:
            { return token(yytext(),"Inst_DECA",yyline,yycolumn);
            }
            // fall through
          case 326: break;
          case 67:
            { return token(yytext(),"Inst_DECB",yyline,yycolumn);
            }
            // fall through
          case 327: break;
          case 68:
            { return token(yytext(),"Inst_FDIV",yyline,yycolumn);
            }
            // fall through
          case 328: break;
          case 69:
            { return token(yytext(),"Inst_IDIV",yyline,yycolumn);
            }
            // fall through
          case 329: break;
          case 70:
            { return token(yytext(),"Inst_INCA",yyline,yycolumn);
            }
            // fall through
          case 330: break;
          case 71:
            { return token(yytext(),"Inst_INCB",yyline,yycolumn);
            }
            // fall through
          case 331: break;
          case 72:
            { return token(yytext(),"Inst_LSRA",yyline,yycolumn);
            }
            // fall through
          case 332: break;
          case 73:
            { return token(yytext(),"Inst_LSRB",yyline,yycolumn);
            }
            // fall through
          case 333: break;
          case 74:
            { return token(yytext(),"Inst_LSRD",yyline,yycolumn);
            }
            // fall through
          case 334: break;
          case 75:
            { return token(yytext(),"Inst_NEGA",yyline,yycolumn);
            }
            // fall through
          case 335: break;
          case 76:
            { return token(yytext(),"Inst_NEGB",yyline,yycolumn);
            }
            // fall through
          case 336: break;
          case 77:
            { return token(yytext(),"Inst_PSHA",yyline,yycolumn);
            }
            // fall through
          case 337: break;
          case 78:
            { return token(yytext(),"Inst_PSHB",yyline,yycolumn);
            }
            // fall through
          case 338: break;
          case 79:
            { return token(yytext(),"Inst_PSHX",yyline,yycolumn);
            }
            // fall through
          case 339: break;
          case 80:
            { return token(yytext(),"Inst_PSHY",yyline,yycolumn);
            }
            // fall through
          case 340: break;
          case 81:
            { return token(yytext(),"Inst_PULA",yyline,yycolumn);
            }
            // fall through
          case 341: break;
          case 82:
            { return token(yytext(),"Inst_PULB",yyline,yycolumn);
            }
            // fall through
          case 342: break;
          case 83:
            { return token(yytext(),"Inst_PULX",yyline,yycolumn);
            }
            // fall through
          case 343: break;
          case 84:
            { return token(yytext(),"Inst_PULY",yyline,yycolumn);
            }
            // fall through
          case 344: break;
          case 85:
            { return token(yytext(),"Inst_ROLA",yyline,yycolumn);
            }
            // fall through
          case 345: break;
          case 86:
            { return token(yytext(),"Inst_ROLB",yyline,yycolumn);
            }
            // fall through
          case 346: break;
          case 87:
            { return token(yytext(),"Inst_RORA",yyline,yycolumn);
            }
            // fall through
          case 347: break;
          case 88:
            { return token(yytext(),"Inst_RORB",yyline,yycolumn);
            }
            // fall through
          case 348: break;
          case 89:
            { return token(yytext(),"Inst_STOP",yyline,yycolumn);
            }
            // fall through
          case 349: break;
          case 90:
            { return token(yytext(),"Inst_TEST",yyline,yycolumn);
            }
            // fall through
          case 350: break;
          case 91:
            { return token(yytext(),"Inst_TSTA",yyline,yycolumn);
            }
            // fall through
          case 351: break;
          case 92:
            { return token(yytext(),"Inst_TSTB",yyline,yycolumn);
            }
            // fall through
          case 352: break;
          case 93:
            { return token(yytext(),"Inst_XGDX",yyline,yycolumn);
            }
            // fall through
          case 353: break;
          case 94:
            { return token(yytext(),"Inst_XGDY",yyline,yycolumn);
            }
            // fall through
          case 354: break;
          case 95:
            { return token(yytext(), "DirExt", yyline, yycolumn);
            }
            // fall through
          case 355: break;
          case 96:
            { return token(yytext(),"ERROR_6",yyline,yycolumn);
            }
            // fall through
          case 356: break;
          case 97:
            { return token(yytext(),"ERROR_9",yyline,yycolumn);
            }
            // fall through
          case 357: break;
          case 98:
            { return token(yytext(),"Inst_ADCD_Dir",yyline,yycolumn);
            }
            // fall through
          case 358: break;
          case 99:
            { return token(yytext(),"Inst_ADDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 359: break;
          case 100:
            { return token(yytext(),"Inst_CPD_Dir",yyline,yycolumn);
            }
            // fall through
          case 360: break;
          case 101:
            { return token(yytext(),"Inst_CPX_Dir",yyline,yycolumn);
            }
            // fall through
          case 361: break;
          case 102:
            { return token(yytext(),"Inst_CPY_Dir",yyline,yycolumn);
            }
            // fall through
          case 362: break;
          case 103:
            { return token(yytext(),"Inst_JSR_Dir",yyline,yycolumn);
            }
            // fall through
          case 363: break;
          case 104:
            { return token(yytext(),"Inst_LDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 364: break;
          case 105:
            { return token(yytext(),"Inst_LDS_Dir",yyline,yycolumn);
            }
            // fall through
          case 365: break;
          case 106:
            { return token(yytext(),"Inst_LDX_Dir",yyline,yycolumn);
            }
            // fall through
          case 366: break;
          case 107:
            { return token(yytext(),"Inst_LDY_Dir",yyline,yycolumn);
            }
            // fall through
          case 367: break;
          case 108:
            { return token(yytext(),"Inst_SBCD_Dir",yyline,yycolumn);
            }
            // fall through
          case 368: break;
          case 109:
            { return token(yytext(),"Inst_STD_Dir",yyline,yycolumn);
            }
            // fall through
          case 369: break;
          case 110:
            { return token(yytext(),"Inst_STS_Dir",yyline,yycolumn);
            }
            // fall through
          case 370: break;
          case 111:
            { return token(yytext(),"Inst_STX_Dir",yyline,yycolumn);
            }
            // fall through
          case 371: break;
          case 112:
            { return token(yytext(),"Inst_STY_Dir",yyline,yycolumn);
            }
            // fall through
          case 372: break;
          case 113:
            { return token(yytext(),"Inst_SUBD_Dir",yyline,yycolumn);
            }
            // fall through
          case 373: break;
          case 114:
            { return token(yytext(),"Inst_ADCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 374: break;
          case 115:
            { return token(yytext(),"Inst_ADDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 375: break;
          case 116:
            { return token(yytext(),"Inst_ANDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 376: break;
          case 117:
            { return token(yytext(),"Inst_ANDB_Dir",yyline,yycolumn);
            }
            // fall through
          case 377: break;
          case 118:
            { return token(yytext(),"Inst_BITA_Dir",yyline,yycolumn);
            }
            // fall through
          case 378: break;
          case 119:
            { return token(yytext(),"Inst_BITB_Dir",yyline,yycolumn);
            }
            // fall through
          case 379: break;
          case 120:
            { return token(yytext(),"Inst_CMPA_Dir",yyline,yycolumn);
            }
            // fall through
          case 380: break;
          case 121:
            { return token(yytext(),"Inst_CMPB_Dir",yyline,yycolumn);
            }
            // fall through
          case 381: break;
          case 122:
            { return token(yytext(),"Inst_EORA_Dir",yyline,yycolumn);
            }
            // fall through
          case 382: break;
          case 123:
            { return token(yytext(),"Inst_EORB_Dir",yyline,yycolumn);
            }
            // fall through
          case 383: break;
          case 124:
            { return token(yytext(),"Inst_LDAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 384: break;
          case 125:
            { return token(yytext(),"Inst_LDAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 385: break;
          case 126:
            { return token(yytext(),"Inst_LDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 386: break;
          case 127:
            { return token(yytext(),"Inst_LDS_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 387: break;
          case 128:
            { return token(yytext(),"Inst_LDX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 388: break;
          case 129:
            { return token(yytext(),"Inst_LDY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 389: break;
          case 130:
            { return token(yytext(),"Inst_ORAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 390: break;
          case 131:
            { return token(yytext(),"Inst_ORAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 391: break;
          case 132:
            { return token(yytext(),"INICIO",yyline,yycolumn);
            }
            // fall through
          case 392: break;
          case 133:
            { return token(yytext(),"Inst_SBCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 393: break;
          case 134:
            { return token(yytext(),"Inst_STAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 394: break;
          case 135:
            { return token(yytext(),"Inst_STAB_Dir",yyline,yycolumn);
            }
            // fall through
          case 395: break;
          case 136:
            { return token(yytext(),"Inst_SUBA_Dir",yyline,yycolumn);
            }
            // fall through
          case 396: break;
          case 137:
            { return token(yytext(),"Inst_ADCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 397: break;
          case 138:
            { return token(yytext(),"Inst_ADCB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 398: break;
          case 139:
            { return token(yytext(),"Inst_ADCB_Ext",yyline,yycolumn);
            }
            // fall through
          case 399: break;
          case 140:
            { return token(yytext(),"Inst_ADDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 400: break;
          case 141:
            { return token(yytext(),"Inst_ADDB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 401: break;
          case 142:
            { return token(yytext(),"Inst_ADDB_Ext",yyline,yycolumn);
            }
            // fall through
          case 402: break;
          case 143:
            { return token(yytext(),"Inst_ANDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 403: break;
          case 144:
            { return token(yytext(),"Inst_ANDB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 404: break;
          case 145:
            { return token(yytext(),"Inst_ASR_Index",yyline,yycolumn);
            }
            // fall through
          case 405: break;
          case 146:
            { return token(yytext(),"Inst_ASR_Ext",yyline,yycolumn);
            }
            // fall through
          case 406: break;
          case 147:
            { return token(yytext(),"Inst_BITA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 407: break;
          case 148:
            { return token(yytext(),"Inst_BITB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 408: break;
          case 149:
            { return token(yytext(),"Inst_CLR_Index",yyline,yycolumn);
            }
            // fall through
          case 409: break;
          case 150:
            { return token(yytext(),"Inst_CLR_Ext",yyline,yycolumn);
            }
            // fall through
          case 410: break;
          case 151:
            { return token(yytext(),"Inst_CMPA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 411: break;
          case 152:
            { return token(yytext(),"Inst_CMPB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 412: break;
          case 153:
            { return token(yytext(),"Inst_COM_Index",yyline,yycolumn);
            }
            // fall through
          case 413: break;
          case 154:
            { return token(yytext(),"Inst_COM_Ext",yyline,yycolumn);
            }
            // fall through
          case 414: break;
          case 155:
            { return token(yytext(),"Inst_CPD_Index",yyline,yycolumn);
            }
            // fall through
          case 415: break;
          case 156:
            { return token(yytext(),"Inst_CPD_Ext",yyline,yycolumn);
            }
            // fall through
          case 416: break;
          case 157:
            { return token(yytext(),"Inst_CPX_Index",yyline,yycolumn);
            }
            // fall through
          case 417: break;
          case 158:
            { return token(yytext(),"Inst_CPX_Ext",yyline,yycolumn);
            }
            // fall through
          case 418: break;
          case 159:
            { return token(yytext(),"Inst_CPY_Index",yyline,yycolumn);
            }
            // fall through
          case 419: break;
          case 160:
            { return token(yytext(),"Inst_CPY_Ext",yyline,yycolumn);
            }
            // fall through
          case 420: break;
          case 161:
            { return token(yytext(),"Inst_DEC_Index",yyline,yycolumn);
            }
            // fall through
          case 421: break;
          case 162:
            { return token(yytext(),"Inst_DEC_Ext",yyline,yycolumn);
            }
            // fall through
          case 422: break;
          case 163:
            { return token(yytext(),"Inst_EORA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 423: break;
          case 164:
            { return token(yytext(),"Inst_EORB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 424: break;
          case 165:
            { return token(yytext(),"Inst_INC_Index",yyline,yycolumn);
            }
            // fall through
          case 425: break;
          case 166:
            { return token(yytext(),"Inst_INC_Ext",yyline,yycolumn);
            }
            // fall through
          case 426: break;
          case 167:
            { return token(yytext(),"Inst_JMP_Index",yyline,yycolumn);
            }
            // fall through
          case 427: break;
          case 168:
            { return token(yytext(),"Inst_JMP_Ext",yyline,yycolumn);
            }
            // fall through
          case 428: break;
          case 169:
            { return token(yytext(),"Inst_JSR_Index",yyline,yycolumn);
            }
            // fall through
          case 429: break;
          case 170:
            { return token(yytext(),"Inst_JSR_Ext",yyline,yycolumn);
            }
            // fall through
          case 430: break;
          case 171:
            { return token(yytext(),"Inst_LDAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 431: break;
          case 172:
            { return token(yytext(),"Inst_LDAB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 432: break;
          case 173:
            { return token(yytext(),"Inst_LDD_Index",yyline,yycolumn);
            }
            // fall through
          case 433: break;
          case 174:
            { return token(yytext(),"Inst_LDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 434: break;
          case 175:
            { return token(yytext(),"Inst_LDS_Index",yyline,yycolumn);
            }
            // fall through
          case 435: break;
          case 176:
            { return token(yytext(),"Inst_LDS_Ext",yyline,yycolumn);
            }
            // fall through
          case 436: break;
          case 177:
            { return token(yytext(),"Inst_LDX_Index",yyline,yycolumn);
            }
            // fall through
          case 437: break;
          case 178:
            { return token(yytext(),"Inst_LDX_Ext",yyline,yycolumn);
            }
            // fall through
          case 438: break;
          case 179:
            { return token(yytext(),"Inst_LDY_Index",yyline,yycolumn);
            }
            // fall through
          case 439: break;
          case 180:
            { return token(yytext(),"Inst_LDY_Ext",yyline,yycolumn);
            }
            // fall through
          case 440: break;
          case 181:
            { return token(yytext(),"Inst_ASL_Ext",yyline,yycolumn);
            }
            // fall through
          case 441: break;
          case 182:
            { return token(yytext(),"Inst_LSR_Index",yyline,yycolumn);
            }
            // fall through
          case 442: break;
          case 183:
            { return token(yytext(),"Inst_LSR_Ext",yyline,yycolumn);
            }
            // fall through
          case 443: break;
          case 184:
            { return token(yytext(),"Inst_NEG_Index",yyline,yycolumn);
            }
            // fall through
          case 444: break;
          case 185:
            { return token(yytext(),"Inst_NEG_Ext",yyline,yycolumn);
            }
            // fall through
          case 445: break;
          case 186:
            { return token(yytext(),"Inst_ORAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 446: break;
          case 187:
            { return token(yytext(),"Inst_ORAB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 447: break;
          case 188:
            { return token(yytext(),"Inst_ROL_Index",yyline,yycolumn);
            }
            // fall through
          case 448: break;
          case 189:
            { return token(yytext(),"Inst_ROL_Ext",yyline,yycolumn);
            }
            // fall through
          case 449: break;
          case 190:
            { return token(yytext(),"Inst_ROR_Index",yyline,yycolumn);
            }
            // fall through
          case 450: break;
          case 191:
            { return token(yytext(),"Inst_ROR_Ext",yyline,yycolumn);
            }
            // fall through
          case 451: break;
          case 192:
            { return token(yytext(),"Inst_SBCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 452: break;
          case 193:
            { return token(yytext(),"Inst_SBCB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 453: break;
          case 194:
            { return token(yytext(),"Inst_SBCB_Ext",yyline,yycolumn);
            }
            // fall through
          case 454: break;
          case 195:
            { return token(yytext(),"Inst_STD_Index",yyline,yycolumn);
            }
            // fall through
          case 455: break;
          case 196:
            { return token(yytext(),"Inst_STD_Ext",yyline,yycolumn);
            }
            // fall through
          case 456: break;
          case 197:
            { return token(yytext(),"Inst_STS_Index",yyline,yycolumn);
            }
            // fall through
          case 457: break;
          case 198:
            { return token(yytext(),"Inst_STS_Ext",yyline,yycolumn);
            }
            // fall through
          case 458: break;
          case 199:
            { return token(yytext(),"Inst_STX_Index",yyline,yycolumn);
            }
            // fall through
          case 459: break;
          case 200:
            { return token(yytext(),"Inst_STX_Ext",yyline,yycolumn);
            }
            // fall through
          case 460: break;
          case 201:
            { return token(yytext(),"Inst_STY_Index",yyline,yycolumn);
            }
            // fall through
          case 461: break;
          case 202:
            { return token(yytext(),"Inst_STY_Ext",yyline,yycolumn);
            }
            // fall through
          case 462: break;
          case 203:
            { return token(yytext(),"Inst_SUBB_Ext",yyline,yycolumn);
            }
            // fall through
          case 463: break;
          case 204:
            { return token(yytext(),"Inst_TST_Index",yyline,yycolumn);
            }
            // fall through
          case 464: break;
          case 205:
            { return token(yytext(),"Inst_TST_Ext",yyline,yycolumn);
            }
            // fall through
          case 465: break;
          case 206:
            { return token(yytext(),"Inst_ADCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 466: break;
          case 207:
            { return token(yytext(),"Inst_ADCB_Index",yyline,yycolumn);
            }
            // fall through
          case 467: break;
          case 208:
            { return token(yytext(),"Inst_ADDA_Index",yyline,yycolumn);
            }
            // fall through
          case 468: break;
          case 209:
            { return token(yytext(),"Inst_ADDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 469: break;
          case 210:
            { return token(yytext(),"Inst_ADDB_Index",yyline,yycolumn);
            }
            // fall through
          case 470: break;
          case 211:
            { return token(yytext(),"Inst_ADDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 471: break;
          case 212:
            { return token(yytext(),"Inst_ANDA_Index",yyline,yycolumn);
            }
            // fall through
          case 472: break;
          case 213:
            { return token(yytext(),"Inst_ANDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 473: break;
          case 214:
            { return token(yytext(),"Inst_ANDB_Index",yyline,yycolumn);
            }
            // fall through
          case 474: break;
          case 215:
            { return token(yytext(),"Inst_ANDB_Ext",yyline,yycolumn);
            }
            // fall through
          case 475: break;
          case 216:
            { return token(yytext(),"Inst_BITA_Index",yyline,yycolumn);
            }
            // fall through
          case 476: break;
          case 217:
            { return token(yytext(),"Inst_BITA_Ext",yyline,yycolumn);
            }
            // fall through
          case 477: break;
          case 218:
            { return token(yytext(),"Inst_BITB_Index",yyline,yycolumn);
            }
            // fall through
          case 478: break;
          case 219:
            { return token(yytext(),"Inst_BITB_Ext",yyline,yycolumn);
            }
            // fall through
          case 479: break;
          case 220:
            { return token(yytext(),"Inst_CMPA_Index",yyline,yycolumn);
            }
            // fall through
          case 480: break;
          case 221:
            { return token(yytext(),"Inst_CMPA_Ext",yyline,yycolumn);
            }
            // fall through
          case 481: break;
          case 222:
            { return token(yytext(),"Inst_CMPB_Index",yyline,yycolumn);
            }
            // fall through
          case 482: break;
          case 223:
            { return token(yytext(),"Inst_CMPB_Ext",yyline,yycolumn);
            }
            // fall through
          case 483: break;
          case 224:
            { return token(yytext(),"Inst_CPD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 484: break;
          case 225:
            { return token(yytext(),"Inst_CPX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 485: break;
          case 226:
            { return token(yytext(),"Inst_CPY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 486: break;
          case 227:
            { return token(yytext(),"Inst_EORA_Ext",yyline,yycolumn);
            }
            // fall through
          case 487: break;
          case 228:
            { return token(yytext(),"Inst_EORB_Index",yyline,yycolumn);
            }
            // fall through
          case 488: break;
          case 229:
            { return token(yytext(),"Inst_LDAA_Index",yyline,yycolumn);
            }
            // fall through
          case 489: break;
          case 230:
            { return token(yytext(),"Inst_LDAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 490: break;
          case 231:
            { return token(yytext(),"Inst_LDAB_Index",yyline,yycolumn);
            }
            // fall through
          case 491: break;
          case 232:
            { return token(yytext(),"Inst_LDAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 492: break;
          case 233:
            { return token(yytext(),"Inst_ORAA_Index",yyline,yycolumn);
            }
            // fall through
          case 493: break;
          case 234:
            { return token(yytext(),"Inst_ORAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 494: break;
          case 235:
            { return token(yytext(),"Inst_ORAB_Index",yyline,yycolumn);
            }
            // fall through
          case 495: break;
          case 236:
            { return token(yytext(),"Inst_ORAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 496: break;
          case 237:
            { return token(yytext(),"Inst_SBCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 497: break;
          case 238:
            { return token(yytext(),"Inst_SBCB_Index",yyline,yycolumn);
            }
            // fall through
          case 498: break;
          case 239:
            { return token(yytext(),"Inst_STAA_Index",yyline,yycolumn);
            }
            // fall through
          case 499: break;
          case 240:
            { return token(yytext(),"Inst_STAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 500: break;
          case 241:
            { return token(yytext(),"Inst_STAB_Index",yyline,yycolumn);
            }
            // fall through
          case 501: break;
          case 242:
            { return token(yytext(),"Inst_STAB_Ext",yyline,yycolumn);
            }
            // fall through
          case 502: break;
          case 243:
            { return token(yytext(),"Inst_SUBA_Ext",yyline,yycolumn);
            }
            // fall through
          case 503: break;
          case 244:
            { return token(yytext(),"Inst_SUBB_Index",yyline,yycolumn);
            }
            // fall through
          case 504: break;
          case 245:
            { return token(yytext(),"Inst_SUBD_Ext",yyline,yycolumn);
            }
            // fall through
          case 505: break;
          case 246:
            { return token(yytext(),"Inst_ADDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 506: break;
          case 247:
            { return token(yytext(),"Inst_ADDD_Index",yyline,yycolumn);
            }
            // fall through
          case 507: break;
          case 248:
            { return token(yytext(),"Inst_SBCA_Index",yyline,yycolumn);
            }
            // fall through
          case 508: break;
          case 249:
            { return token(yytext(),"Inst_SUBA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 509: break;
          case 250:
            { return token(yytext(),"Inst_SUBA_Index",yyline,yycolumn);
            }
            // fall through
          case 510: break;
          case 251:
            { return token(yytext(),"Inst_SUBB_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 511: break;
          case 252:
            { return token(yytext(),"Inst_SUBD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 512: break;
          case 253:
            { return token(yytext(),"Inst_BCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 513: break;
          case 254:
            { return token(yytext(),"Inst_BSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 514: break;
          case 255:
            { return token(yytext(),"Inst_BRCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 515: break;
          case 256:
            { return token(yytext(),"Inst_BRSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 516: break;
          case 257:
            { return token(yytext(),"Inst_BCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 517: break;
          case 258:
            { return token(yytext(),"Inst_BSET_Index",yyline,yycolumn);
            }
            // fall through
          case 518: break;
          case 259:
            { return token(yytext(),"Inst_BRCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 519: break;
          case 260:
            { return token(yytext(),"Inst_BRSET_Index",yyline,yycolumn);
            }
            // fall through
          case 520: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
