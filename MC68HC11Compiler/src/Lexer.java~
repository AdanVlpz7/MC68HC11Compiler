// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\2\0\1\5\1\6\3\0\1\7\1\10\1\11\1\0"+
    "\1\12\3\0\12\13\7\0\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\23\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\23\1\40\1\41\1\23\4\0\1\23\1\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\23"+
    "\1\51\2\23\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\23\1\65\1\66"+
    "\1\23\1\67\1\70\1\71\103\0\1\23\7\0\1\23"+
    "\3\0\1\23\3\0\1\23\1\0\1\23\6\0\1\23"+
    "\1\0\1\23\4\0\1\23\7\0\1\23\3\0\1\23"+
    "\3\0\1\23\1\0\1\23\6\0\1\23\1\0\1\23"+
    "\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\30\0\1\3\67\0\1\7\1\10\1\11\1\12\10\0"+
    "\1\13\6\0\1\14\1\0\1\15\1\16\1\17\1\20"+
    "\1\0\1\21\1\22\3\0\1\23\1\24\1\25\1\26"+
    "\2\0\1\27\1\30\44\0\1\31\4\0\1\32\14\0"+
    "\1\33\1\0\1\34\1\35\6\0\1\36\3\0\1\37"+
    "\2\0\1\40\126\0\1\41\2\0\1\42\2\0\1\43"+
    "\24\0\1\44\2\0\1\45\2\0\1\46\2\0\1\47"+
    "\11\0\1\50\3\0\1\41\2\0\1\42\2\0\1\43"+
    "\14\0\1\51\2\0\1\52\2\0\1\53\1\0\1\44"+
    "\2\0\1\45\2\0\1\46\2\0\1\47\7\0\1\54"+
    "\1\0\1\50\2\0\1\55\2\0\1\56\2\0\1\57"+
    "\2\0\1\60\1\0\1\61\4\0\1\62\1\0\1\63"+
    "\1\0\1\51\2\0\1\52\2\0\1\53\1\0\1\64"+
    "\1\0\1\65\1\66\1\0\1\67\2\0\1\70\1\71"+
    "\1\0\1\72\2\0\1\73\6\0\2\74\1\75\1\0"+
    "\1\76\2\0\2\77\3\0\1\100\3\0\2\101\3\0"+
    "\1\102\2\0\2\103\1\104\1\0\1\105\2\0\2\106"+
    "\2\0\2\107\1\110\1\0\1\111\1\112\1\0\1\113"+
    "\2\0\1\114\2\0\2\115\2\0\2\116\3\0\2\117"+
    "\2\0\2\120\12\0\2\121\1\122\1\123\1\124\2\0"+
    "\2\125\2\0\2\126\2\0\2\127\3\0\2\130\1\131"+
    "\1\0\1\132\5\0\1\133\1\134\2\0\1\135\1\0"+
    "\1\136\1\0\1\137\2\0\1\140\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[551];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\256\0\72\0\72\0\350"+
    "\0\72\0\u0122\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\72\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\72\0\72\0\72\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\72\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\72\0\u166e\0\72\0\72"+
    "\0\72\0\72\0\u16a8\0\72\0\72\0\u16e2\0\u171c\0\u1756"+
    "\0\72\0\72\0\72\0\72\0\u1790\0\u17ca\0\72\0\72"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\72\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\72\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\72\0\u23cc"+
    "\0\72\0\72\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\72\0\u2562\0\u259c\0\u25d6\0\72\0\u2610\0\u264a\0\72"+
    "\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a"+
    "\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea"+
    "\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba"+
    "\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a"+
    "\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a"+
    "\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a"+
    "\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa"+
    "\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a"+
    "\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a"+
    "\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a"+
    "\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a"+
    "\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda"+
    "\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa"+
    "\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a"+
    "\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a"+
    "\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a"+
    "\0\u4554\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea"+
    "\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba"+
    "\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a"+
    "\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a"+
    "\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a"+
    "\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\72\0\u4f4c\0\u4f86\0\u4fc0"+
    "\0\u4ffa\0\72\0\u5034\0\u506e\0\72\0\u50a8\0\u50e2\0\72"+
    "\0\u511c\0\u5156\0\72\0\u5190\0\72\0\u51ca\0\u5204\0\u523e"+
    "\0\u5278\0\72\0\u52b2\0\72\0\u52ec\0\u5326\0\u5360\0\u539a"+
    "\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\72\0\u54f6\0\72"+
    "\0\72\0\u5530\0\72\0\u556a\0\u55a4\0\72\0\72\0\u55de"+
    "\0\72\0\u5618\0\u5652\0\72\0\u568c\0\u56c6\0\u5700\0\u573a"+
    "\0\u5774\0\u57ae\0\u5774\0\72\0\72\0\u57e8\0\72\0\u5822"+
    "\0\u585c\0\u5822\0\72\0\u5896\0\u58d0\0\u590a\0\72\0\u5944"+
    "\0\u597e\0\u59b8\0\u597e\0\72\0\u59f2\0\u5a2c\0\u5a66\0\72"+
    "\0\u5aa0\0\u5ada\0\u5aa0\0\72\0\72\0\u5b14\0\72\0\u5b4e"+
    "\0\u5b88\0\u5b4e\0\72\0\u5bc2\0\u5bfc\0\u5bc2\0\72\0\72"+
    "\0\u5c36\0\72\0\72\0\u5c70\0\72\0\u5caa\0\u5ce4\0\72"+
    "\0\u5d1e\0\u5d58\0\u5d1e\0\72\0\u5d92\0\u5dcc\0\u5d92\0\72"+
    "\0\u5e06\0\u5e40\0\u5e7a\0\u5e40\0\72\0\u5eb4\0\u5eee\0\u5eb4"+
    "\0\72\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084"+
    "\0\u60be\0\u60f8\0\u6132\0\u60f8\0\72\0\72\0\72\0\72"+
    "\0\u616c\0\u61a6\0\u616c\0\72\0\u61e0\0\u621a\0\u61e0\0\72"+
    "\0\u6254\0\u628e\0\u6254\0\72\0\u62c8\0\u6302\0\u633c\0\u6302"+
    "\0\72\0\72\0\u6376\0\72\0\u63b0\0\u63ea\0\u6424\0\u645e"+
    "\0\u6498\0\72\0\72\0\u64d2\0\u650c\0\72\0\u6546\0\72"+
    "\0\u6580\0\72\0\u65ba\0\u65f4\0\72\0\72\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[551];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\0\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\0\1\20\1\0\1\21\1\22\1\23\3\0"+
    "\1\24\1\25\4\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\1\0\1\35\1\36\1\37\3\0"+
    "\1\40\1\41\4\0\1\4\1\0\1\42\74\0\1\2"+
    "\102\0\54\43\3\0\2\10\1\2\1\3\66\10\15\0"+
    "\1\44\1\0\1\45\7\0\1\46\60\0\1\47\5\0"+
    "\1\50\6\0\1\51\1\52\52\0\1\53\7\0\1\54"+
    "\1\55\1\0\1\56\1\57\54\0\1\60\3\0\1\61"+
    "\100\0\1\62\1\63\1\0\1\64\55\0\1\65\1\66"+
    "\71\0\1\67\7\0\1\70\100\0\1\71\53\0\1\72"+
    "\104\0\1\73\53\0\1\74\20\0\1\75\67\0\1\76"+
    "\100\0\1\77\1\0\1\100\6\0\1\101\61\0\1\102"+
    "\4\0\1\103\6\0\1\104\1\105\53\0\1\106\6\0"+
    "\1\107\1\110\1\0\1\111\1\112\55\0\1\113\3\0"+
    "\1\114\77\0\1\115\1\116\1\0\1\117\56\0\1\120"+
    "\1\121\71\0\1\122\6\0\1\123\100\0\1\124\54\0"+
    "\1\125\103\0\1\126\54\0\1\127\17\0\1\130\67\0"+
    "\1\131\23\0\54\132\17\0\1\133\23\0\1\134\1\135"+
    "\46\0\1\136\1\137\71\0\1\140\77\0\1\141\101\0"+
    "\1\142\52\0\1\143\15\0\1\144\55\0\1\145\65\0"+
    "\1\146\110\0\1\147\67\0\1\150\66\0\1\151\62\0"+
    "\1\152\20\0\1\153\1\154\44\0\1\155\73\0\1\156"+
    "\15\0\1\157\3\0\1\160\1\161\47\0\1\162\105\0"+
    "\1\163\74\0\1\164\50\0\1\165\100\0\1\166\71\0"+
    "\1\167\63\0\1\170\15\0\1\171\3\0\1\172\1\173"+
    "\55\0\1\174\66\0\1\175\63\0\1\176\5\0\1\177"+
    "\63\0\1\200\1\0\1\201\70\0\1\202\111\0\1\203"+
    "\76\0\1\133\22\0\1\134\1\135\47\0\1\204\1\205"+
    "\71\0\1\206\76\0\1\207\101\0\1\210\53\0\1\211"+
    "\14\0\1\212\56\0\1\213\65\0\1\146\107\0\1\214"+
    "\67\0\1\215\66\0\1\216\63\0\1\152\17\0\1\153"+
    "\1\154\45\0\1\155\73\0\1\217\14\0\1\157\3\0"+
    "\1\160\1\161\50\0\1\162\104\0\1\220\74\0\1\164"+
    "\51\0\1\165\77\0\1\221\71\0\1\222\64\0\1\170"+
    "\14\0\1\171\3\0\1\172\1\173\55\0\1\174\67\0"+
    "\1\223\63\0\1\224\5\0\1\177\63\0\1\200\1\0"+
    "\1\225\70\0\1\226\110\0\1\227\22\0\54\230\17\0"+
    "\1\231\71\0\1\232\2\0\1\233\66\0\1\234\110\0"+
    "\1\235\52\0\1\236\102\0\1\237\64\0\1\240\106\0"+
    "\1\241\35\0\2\242\1\243\1\242\1\0\1\244\5\0"+
    "\1\245\71\0\1\246\56\0\2\247\1\250\1\247\1\0"+
    "\1\251\5\0\1\252\56\0\2\253\1\254\1\253\1\0"+
    "\1\255\64\0\2\256\1\257\1\256\1\0\1\260\64\0"+
    "\2\261\1\262\1\261\1\0\1\263\64\0\2\264\1\265"+
    "\1\264\1\0\1\266\5\0\1\267\71\0\1\270\114\0"+
    "\1\271\71\0\1\272\33\0\2\273\1\274\1\273\1\0"+
    "\1\275\64\0\2\276\1\277\1\276\1\0\1\300\5\0"+
    "\1\301\71\0\1\302\71\0\1\303\74\0\1\304\66\0"+
    "\1\305\117\0\1\231\71\0\1\232\2\0\1\233\66\0"+
    "\1\234\107\0\1\235\53\0\1\236\101\0\1\306\65\0"+
    "\1\307\105\0\1\241\10\0\2\242\1\243\1\242\35\0"+
    "\1\245\71\0\1\246\30\0\2\247\1\250\1\247\1\0"+
    "\1\251\33\0\1\252\30\0\2\264\1\265\1\264\1\0"+
    "\1\266\33\0\1\267\71\0\1\270\113\0\1\271\71\0"+
    "\1\272\6\0\2\276\1\277\1\276\1\0\1\300\33\0"+
    "\1\301\71\0\1\302\71\0\1\303\74\0\1\304\66\0"+
    "\1\305\42\0\54\310\4\0\2\311\1\312\1\311\1\0"+
    "\1\313\64\0\2\314\1\315\1\314\1\0\1\316\64\0"+
    "\2\317\1\320\1\317\1\0\1\321\64\0\2\322\1\323"+
    "\1\322\1\0\1\324\64\0\2\325\1\326\1\325\1\0"+
    "\1\327\64\0\2\330\1\331\1\330\120\0\1\332\73\0"+
    "\1\333\35\0\2\334\1\335\1\334\1\0\1\336\71\0"+
    "\1\337\65\0\1\242\3\0\1\337\76\0\54\340\4\0"+
    "\2\341\1\342\1\341\1\0\1\343\71\0\1\344\65\0"+
    "\1\247\3\0\1\344\76\0\54\345\10\0\1\346\1\347"+
    "\65\0\1\253\2\0\1\346\1\347\76\0\54\350\10\0"+
    "\1\351\1\352\65\0\1\256\2\0\1\351\1\352\76\0"+
    "\54\353\10\0\1\354\1\355\65\0\1\261\2\0\1\354"+
    "\1\355\76\0\54\356\11\0\1\357\65\0\1\264\3\0"+
    "\1\357\76\0\54\360\4\0\2\361\1\362\1\361\1\0"+
    "\1\363\71\0\1\364\65\0\1\273\3\0\1\364\76\0"+
    "\54\365\11\0\1\366\65\0\1\276\3\0\1\366\76\0"+
    "\54\367\4\0\2\370\1\371\1\370\1\0\1\372\64\0"+
    "\2\373\1\374\1\373\1\0\1\375\64\0\2\376\1\377"+
    "\1\376\1\0\1\u0100\143\0\1\332\73\0\1\333\14\0"+
    "\1\u0101\1\u0102\65\0\1\311\2\0\1\u0101\1\u0102\76\0"+
    "\54\u0103\10\0\1\u0104\1\u0105\65\0\1\314\2\0\1\u0104"+
    "\1\u0105\76\0\54\u0106\10\0\1\u0107\1\u0108\65\0\1\317"+
    "\2\0\1\u0107\1\u0108\76\0\54\u0109\10\0\1\u010a\1\u010b"+
    "\65\0\1\322\2\0\1\u010a\1\u010b\76\0\54\u010c\11\0"+
    "\1\327\65\0\1\325\3\0\1\327\76\0\54\u010d\10\0"+
    "\1\u010e\66\0\1\330\2\0\1\u010e\65\0\2\u010f\1\u0110"+
    "\1\u010f\1\0\1\u0111\64\0\2\u0112\1\u0113\1\u0112\1\0"+
    "\1\u0114\71\0\1\336\65\0\1\334\3\0\1\336\76\0"+
    "\54\u0115\16\0\54\u0116\16\0\54\u0117\10\0\1\u0118\1\u0119"+
    "\65\0\1\341\2\0\1\u0118\1\u0119\76\0\54\u011a\16\0"+
    "\54\u011b\16\0\54\u011c\11\0\1\u011d\76\0\54\u011e\16\0"+
    "\54\u011f\11\0\1\u0120\76\0\54\u0121\16\0\54\u0122\11\0"+
    "\1\u0123\76\0\54\u0124\16\0\54\u0125\16\0\54\u0126\16\0"+
    "\54\u0127\10\0\1\u0128\1\u0129\65\0\1\361\2\0\1\u0128"+
    "\1\u0129\76\0\54\u012a\16\0\54\u012b\16\0\54\u012c\16\0"+
    "\54\u012d\16\0\54\u012e\10\0\1\u012f\1\u0130\65\0\1\370"+
    "\2\0\1\u012f\1\u0130\76\0\54\u0131\10\0\1\u0132\1\u0133"+
    "\65\0\1\373\2\0\1\u0132\1\u0133\76\0\54\u0134\10\0"+
    "\1\u0135\1\u0136\65\0\1\376\2\0\1\u0135\1\u0136\76\0"+
    "\54\u0137\11\0\1\u0138\76\0\54\u0139\16\0\54\u013a\11\0"+
    "\1\u013b\76\0\54\u013c\16\0\54\u013d\11\0\1\u013e\76\0"+
    "\54\u013f\16\0\54\u0140\11\0\1\u0141\76\0\54\u0142\16\0"+
    "\54\u0143\16\0\54\u0144\11\0\1\u0145\71\0\1\u0111\65\0"+
    "\1\u010f\3\0\1\u0111\76\0\54\u0146\11\0\1\u0114\65\0"+
    "\1\u0112\3\0\1\u0114\76\0\54\u0147\16\0\54\u0148\16\0"+
    "\54\u0149\16\0\54\u014a\11\0\1\u014b\76\0\54\u014c\16\0"+
    "\54\u014d\16\0\54\u014e\16\0\54\u014f\16\0\54\u0150\16\0"+
    "\54\u0151\16\0\54\u0152\16\0\54\u0153\16\0\54\u0154\16\0"+
    "\54\u0155\16\0\54\u0156\16\0\54\u0157\16\0\54\u0158\16\0"+
    "\54\u0159\16\0\54\u015a\11\0\1\u015b\76\0\54\u015c\16\0"+
    "\54\u015d\16\0\54\u015e\16\0\54\u015f\16\0\54\u0160\16\0"+
    "\54\u0161\11\0\1\u0162\76\0\54\u0163\16\0\54\u0164\11\0"+
    "\1\u0165\76\0\54\u0166\16\0\54\u0167\11\0\1\u0168\76\0"+
    "\54\u0169\16\0\54\u016a\16\0\54\u016b\16\0\54\u016c\16\0"+
    "\54\u016d\16\0\54\u016e\16\0\54\u016f\16\0\54\u0170\16\0"+
    "\54\u0171\16\0\54\u0172\16\0\54\u0173\16\0\54\u0174\16\0"+
    "\54\u0175\16\0\54\u0176\15\0\1\u0177\72\0\54\u0178\16\0"+
    "\54\u0179\16\0\54\u017a\15\0\1\u017b\71\0\1\u017c\54\u014a"+
    "\16\0\54\u017d\16\0\54\u017e\16\0\54\u017f\16\0\54\u0180"+
    "\15\0\1\u0181\54\u014f\16\0\54\u0182\16\0\54\u0183\15\0"+
    "\1\u0184\54\u0152\16\0\54\u0185\16\0\54\u0186\15\0\1\u0187"+
    "\54\u0155\16\0\54\u0188\16\0\54\u0189\15\0\1\u018a\54\u0158"+
    "\16\0\54\u018b\15\0\1\u018c\54\u015a\16\0\54\u018d\16\0"+
    "\54\u018e\16\0\54\u018f\16\0\54\u0190\15\0\1\u0191\54\u015f"+
    "\16\0\54\u0192\15\0\1\u0193\54\u0161\16\0\54\u0194\16\0"+
    "\54\u0195\16\0\54\u0196\16\0\54\u0197\16\0\54\u0198\16\0"+
    "\54\u0199\16\0\54\u019a\16\0\54\u019b\16\0\54\u019c\16\0"+
    "\54\u019d\16\0\54\u019e\15\0\1\u019f\54\u016d\16\0\54\u01a0"+
    "\16\0\54\u01a1\15\0\1\u01a2\54\u0170\16\0\54\u01a3\16\0"+
    "\54\u01a4\15\0\1\u01a5\54\u0173\16\0\54\u01a6\16\0\54\u01a7"+
    "\15\0\1\u01a8\54\u0176\16\0\54\u01a9\7\0\1\u01aa\1\u01ab"+
    "\32\0\2\u01aa\23\0\2\u01aa\1\0\1\u01aa\14\0\54\u01ac"+
    "\15\0\1\u01ad\71\0\1\u01ae\63\0\1\u01af\1\u01b0\32\0"+
    "\2\u01af\23\0\2\u01af\1\0\1\u01af\2\0\2\u01b1\1\u01b2"+
    "\1\u01b3\33\0\2\u01b4\23\0\2\u01b4\1\0\1\u01b4\14\0"+
    "\54\u01b5\15\0\1\u01b6\54\u0180\16\0\54\u01b7\4\0\2\u01b8"+
    "\1\u01b9\1\u01ba\33\0\2\u01bb\23\0\2\u01bb\1\0\1\u01bb"+
    "\14\0\54\u01bc\4\0\2\u01bd\1\u01be\1\u01bd\7\0\53\u01bf"+
    "\16\0\54\u01c0\4\0\2\u01c1\1\u01c2\1\u01c3\33\0\2\u01c4"+
    "\23\0\2\u01c4\1\0\1\u01c4\14\0\54\u01c5\4\0\2\u01c6"+
    "\1\u01c7\1\u01c6\7\0\53\u01c8\4\0\2\u01c9\1\u01ca\1\u01cb"+
    "\33\0\2\u01cc\23\0\2\u01cc\1\0\1\u01cc\14\0\54\u01cd"+
    "\15\0\1\u01ce\54\u0190\16\0\54\u01cf\4\0\2\u01d0\1\u01d1"+
    "\1\u01d2\33\0\2\u01d3\23\0\2\u01d3\1\0\1\u01d3\2\0"+
    "\2\u01d4\1\u01d5\1\u01d6\33\0\2\u01d7\23\0\2\u01d7\1\0"+
    "\1\u01d7\14\0\54\u01d8\15\0\1\u01d9\54\u0197\16\0\54\u01da"+
    "\16\0\54\u01db\15\0\1\u01dc\54\u019a\16\0\54\u01dd\16\0"+
    "\54\u01de\15\0\1\u01df\54\u019d\16\0\54\u01e0\4\0\2\u01e1"+
    "\1\u01e2\1\u01e3\33\0\2\u01e4\23\0\2\u01e4\1\0\1\u01e4"+
    "\2\0\2\u01e5\1\u01e6\1\u01e7\33\0\2\u01e8\23\0\2\u01e8"+
    "\1\0\1\u01e8\14\0\54\u01e9\4\0\2\u01ea\1\u01eb\1\u01ec"+
    "\33\0\2\u01ed\23\0\2\u01ed\1\0\1\u01ed\2\0\2\u01ee"+
    "\1\u01ef\1\u01f0\33\0\2\u01f1\23\0\2\u01f1\1\0\1\u01f1"+
    "\13\0\1\u01f2\72\0\54\u01f3\7\0\1\u01f4\1\u01f5\32\0"+
    "\2\u01f4\23\0\2\u01f4\1\0\1\u01f4\5\0\1\u01f6\1\u01f7"+
    "\32\0\2\u01f6\23\0\2\u01f6\1\0\1\u01f6\13\0\1\u01f8"+
    "\72\0\54\u01f9\7\0\1\u01b4\33\0\2\u01b4\23\0\2\u01b4"+
    "\1\0\1\u01b4\3\0\1\u01b1\1\0\1\u01b4\33\0\2\u01b4"+
    "\23\0\2\u01b4\1\0\1\u01b4\2\0\2\u01fa\1\u01fb\1\u01fc"+
    "\33\0\2\u01fd\23\0\2\u01fd\1\0\1\u01fd\5\0\1\u01bb"+
    "\33\0\2\u01bb\23\0\2\u01bb\1\0\1\u01bb\3\0\1\u01b8"+
    "\1\0\1\u01bb\33\0\2\u01bb\23\0\2\u01bb\1\0\1\u01bb"+
    "\14\0\54\u01fe\7\0\1\u01bf\33\0\2\u01bf\23\0\2\u01bf"+
    "\1\0\1\u01bf\3\0\1\u01bd\1\0\1\u01bf\33\0\2\u01bf"+
    "\23\0\2\u01bf\1\0\1\u01bf\14\0\54\u01ff\7\0\1\u01c4"+
    "\33\0\2\u01c4\23\0\2\u01c4\1\0\1\u01c4\3\0\1\u01c1"+
    "\1\0\1\u01c4\33\0\2\u01c4\23\0\2\u01c4\1\0\1\u01c4"+
    "\14\0\54\u0200\7\0\1\u01c8\33\0\2\u01c8\23\0\2\u01c8"+
    "\1\0\1\u01c8\3\0\1\u01c6\1\0\1\u01c8\33\0\2\u01c8"+
    "\23\0\2\u01c8\1\0\1\u01c8\5\0\1\u01cc\33\0\2\u01cc"+
    "\23\0\2\u01cc\1\0\1\u01cc\3\0\1\u01c9\1\0\1\u01cc"+
    "\33\0\2\u01cc\23\0\2\u01cc\1\0\1\u01cc\2\0\2\u0201"+
    "\1\u0202\1\u0203\33\0\2\u0204\23\0\2\u0204\1\0\1\u0204"+
    "\5\0\1\u01d3\33\0\2\u01d3\23\0\2\u01d3\1\0\1\u01d3"+
    "\3\0\1\u01d0\1\0\1\u01d3\33\0\2\u01d3\23\0\2\u01d3"+
    "\1\0\1\u01d3\5\0\1\u01d7\33\0\2\u01d7\23\0\2\u01d7"+
    "\1\0\1\u01d7\3\0\1\u01d4\1\0\1\u01d7\33\0\2\u01d7"+
    "\23\0\2\u01d7\1\0\1\u01d7\2\0\2\u0205\1\u0206\1\u0207"+
    "\33\0\2\u0208\23\0\2\u0208\1\0\1\u0208\2\0\2\u0209"+
    "\1\u020a\1\u020b\33\0\2\u020c\23\0\2\u020c\1\0\1\u020c"+
    "\14\0\54\u020d\4\0\2\u020e\1\u020f\1\u0210\33\0\2\u0211"+
    "\23\0\2\u0211\1\0\1\u0211\5\0\1\u01e4\33\0\2\u01e4"+
    "\23\0\2\u01e4\1\0\1\u01e4\3\0\1\u01e1\1\0\1\u01e4"+
    "\33\0\2\u01e4\23\0\2\u01e4\1\0\1\u01e4\5\0\1\u01e8"+
    "\33\0\2\u01e8\23\0\2\u01e8\1\0\1\u01e8\3\0\1\u01e5"+
    "\1\0\1\u01e8\33\0\2\u01e8\23\0\2\u01e8\1\0\1\u01e8"+
    "\14\0\54\u0212\7\0\1\u01ed\33\0\2\u01ed\23\0\2\u01ed"+
    "\1\0\1\u01ed\3\0\1\u01ea\1\0\1\u01ed\33\0\2\u01ed"+
    "\23\0\2\u01ed\1\0\1\u01ed\5\0\1\u01f1\33\0\2\u01f1"+
    "\23\0\2\u01f1\1\0\1\u01f1\3\0\1\u01ee\1\0\1\u01f1"+
    "\33\0\2\u01f1\23\0\2\u01f1\1\0\1\u01f1\6\0\1\u0213"+
    "\77\0\54\u0214\15\0\1\u0215\72\0\54\u0216\15\0\1\u0217"+
    "\72\0\54\u0218\10\0\1\u0219\77\0\54\u021a\7\0\1\u01fd"+
    "\33\0\2\u01fd\23\0\2\u01fd\1\0\1\u01fd\3\0\1\u01fa"+
    "\1\0\1\u01fd\33\0\2\u01fd\23\0\2\u01fd\1\0\1\u01fd"+
    "\5\0\1\u0204\33\0\2\u0204\23\0\2\u0204\1\0\1\u0204"+
    "\3\0\1\u0201\1\0\1\u0204\33\0\2\u0204\23\0\2\u0204"+
    "\1\0\1\u0204\5\0\1\u0208\33\0\2\u0208\23\0\2\u0208"+
    "\1\0\1\u0208\3\0\1\u0205\1\0\1\u0208\33\0\2\u0208"+
    "\23\0\2\u0208\1\0\1\u0208\5\0\1\u020c\33\0\2\u020c"+
    "\23\0\2\u020c\1\0\1\u020c\3\0\1\u0209\1\0\1\u020c"+
    "\33\0\2\u020c\23\0\2\u020c\1\0\1\u020c\14\0\54\u021b"+
    "\7\0\1\u0211\33\0\2\u0211\23\0\2\u0211\1\0\1\u0211"+
    "\3\0\1\u020e\1\0\1\u0211\33\0\2\u0211\23\0\2\u0211"+
    "\1\0\1\u0211\14\0\54\u021c\10\0\1\u021d\77\0\54\u021e"+
    "\10\0\1\u021f\77\0\54\u0220\16\0\54\u0221\16\0\54\u0222"+
    "\16\0\54\u0223\16\0\54\u0224\16\0\54\u0225\16\0\54\u0226"+
    "\16\0\54\u0227\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26158];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\30\0\1\11\67\0\1\1\3\11\10\0\1\11\6\0"+
    "\1\11\1\0\4\11\1\0\2\11\3\0\4\11\2\0"+
    "\2\11\44\0\1\11\4\0\1\11\14\0\1\11\1\0"+
    "\2\11\6\0\1\11\3\0\1\11\2\0\1\11\126\0"+
    "\1\1\2\0\1\1\2\0\1\1\24\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\11\0\1\1\3\0"+
    "\1\1\2\0\1\1\2\0\1\1\14\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\2\0\1\1\7\0\1\11\1\0\1\1\2\0"+
    "\1\11\2\0\1\11\2\0\1\11\2\0\1\11\1\0"+
    "\1\11\4\0\1\11\1\0\1\11\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0"+
    "\1\1\2\11\1\0\1\11\2\0\1\1\1\11\3\0"+
    "\1\11\3\0\1\1\1\11\3\0\1\11\2\0\1\1"+
    "\2\11\1\0\1\11\2\0\1\1\1\11\2\0\1\1"+
    "\2\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\1\1\11\2\0\1\1\1\11\3\0\1\1\1\11"+
    "\2\0\1\1\1\11\12\0\1\1\4\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\2\0\1\1\1\11\3\0"+
    "\1\1\2\11\1\0\1\11\5\0\2\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[551];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 99: break;
          case 2:
            { return token(yytext(),"LLAVE_A",yyline,yycolumn);
            }
            // fall through
          case 100: break;
          case 3:
            { return token(yytext(),"LLAVE_C",yyline,yycolumn);
            }
            // fall through
          case 101: break;
          case 4:
            { return token(yytext(),"PARENTESIS_A",yyline,yycolumn);
            }
            // fall through
          case 102: break;
          case 5:
            { return token(yytext(),"PARENTESIS_C",yyline,yycolumn);
            }
            // fall through
          case 103: break;
          case 6:
            { return token(yytext(),"COMA",yyline,yycolumn);
            }
            // fall through
          case 104: break;
          case 7:
            { return token(yytext(), "DirSimple", yyline, yycolumn);
            }
            // fall through
          case 105: break;
          case 8:
            { return token(yytext(),"Inst_ABA",yyline,yycolumn);
            }
            // fall through
          case 106: break;
          case 9:
            { return token(yytext(),"Inst_ABX",yyline,yycolumn);
            }
            // fall through
          case 107: break;
          case 10:
            { return token(yytext(),"Inst_ABY",yyline,yycolumn);
            }
            // fall through
          case 108: break;
          case 11:
            { return token(yytext(),"Inst_CBA",yyline,yycolumn);
            }
            // fall through
          case 109: break;
          case 12:
            { return token(yytext(),"Inst_DAA",yyline,yycolumn);
            }
            // fall through
          case 110: break;
          case 13:
            { return token(yytext(),"Inst_DES",yyline,yycolumn);
            }
            // fall through
          case 111: break;
          case 14:
            { return token(yytext(),"Inst_DEX",yyline,yycolumn);
            }
            // fall through
          case 112: break;
          case 15:
            { return token(yytext(),"Inst_DEY",yyline,yycolumn);
            }
            // fall through
          case 113: break;
          case 16:
            { return token(yytext(),"Directiva_END",yyline,yycolumn);
            }
            // fall through
          case 114: break;
          case 17:
            { return token(yytext(),"Directiva_EQU",yyline,yycolumn);
            }
            // fall through
          case 115: break;
          case 18:
            { return token(yytext(),"Directiva_FCB",yyline,yycolumn);
            }
            // fall through
          case 116: break;
          case 19:
            { return token(yytext(),"Inst_INS",yyline,yycolumn);
            }
            // fall through
          case 117: break;
          case 20:
            { return token(yytext(),"Inst_INX",yyline,yycolumn);
            }
            // fall through
          case 118: break;
          case 21:
            { return token(yytext(),"Inst_INY",yyline,yycolumn);
            }
            // fall through
          case 119: break;
          case 22:
            { return token(yytext(),"Inst_MUL",yyline,yycolumn);
            }
            // fall through
          case 120: break;
          case 23:
            { return token(yytext(),"Directiva_ORG",yyline,yycolumn);
            }
            // fall through
          case 121: break;
          case 24:
            { return token(yytext(),"Inst_SBA",yyline,yycolumn);
            }
            // fall through
          case 122: break;
          case 25:
            { return token(yytext(),"Inst_CLRA",yyline,yycolumn);
            }
            // fall through
          case 123: break;
          case 26:
            { return token(yytext(),"Inst_COMA",yyline,yycolumn);
            }
            // fall through
          case 124: break;
          case 27:
            { return token(yytext(),"Inst_DECA",yyline,yycolumn);
            }
            // fall through
          case 125: break;
          case 28:
            { return token(yytext(),"Inst_FDIV",yyline,yycolumn);
            }
            // fall through
          case 126: break;
          case 29:
            { return token(yytext(),"Inst_IDIV",yyline,yycolumn);
            }
            // fall through
          case 127: break;
          case 30:
            { return token(yytext(),"Inst_NEGA",yyline,yycolumn);
            }
            // fall through
          case 128: break;
          case 31:
            { return token(yytext(),"Inst_TSTA",yyline,yycolumn);
            }
            // fall through
          case 129: break;
          case 32:
            { return token(yytext(), "DirExt", yyline, yycolumn);
            }
            // fall through
          case 130: break;
          case 33:
            { return token(yytext(),"Inst_CPD_Dir",yyline,yycolumn);
            }
            // fall through
          case 131: break;
          case 34:
            { return token(yytext(),"Inst_CPX_Dir",yyline,yycolumn);
            }
            // fall through
          case 132: break;
          case 35:
            { return token(yytext(),"Inst_CPY_Dir",yyline,yycolumn);
            }
            // fall through
          case 133: break;
          case 36:
            { return token(yytext(),"Inst_ADCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 134: break;
          case 37:
            { return token(yytext(),"Inst_ADDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 135: break;
          case 38:
            { return token(yytext(),"Inst_ADDD_Dir",yyline,yycolumn);
            }
            // fall through
          case 136: break;
          case 39:
            { return token(yytext(),"Inst_ANDA_Dir",yyline,yycolumn);
            }
            // fall through
          case 137: break;
          case 40:
            { return token(yytext(),"Inst_CMPA_Dir",yyline,yycolumn);
            }
            // fall through
          case 138: break;
          case 41:
            { return token(yytext(),"Inst_ORAA_Dir",yyline,yycolumn);
            }
            // fall through
          case 139: break;
          case 42:
            { return token(yytext(),"Inst_SBCA_Dir",yyline,yycolumn);
            }
            // fall through
          case 140: break;
          case 43:
            { return token(yytext(),"Inst_SUBD_Dir",yyline,yycolumn);
            }
            // fall through
          case 141: break;
          case 44:
            { return token(yytext(),"Inst_CLR_Ext",yyline,yycolumn);
            }
            // fall through
          case 142: break;
          case 45:
            { return token(yytext(),"Inst_COM_Ext",yyline,yycolumn);
            }
            // fall through
          case 143: break;
          case 46:
            { return token(yytext(),"Inst_CPD_Ext",yyline,yycolumn);
            }
            // fall through
          case 144: break;
          case 47:
            { return token(yytext(),"Inst_CPX_Ext",yyline,yycolumn);
            }
            // fall through
          case 145: break;
          case 48:
            { return token(yytext(),"Inst_CPY_Ext",yyline,yycolumn);
            }
            // fall through
          case 146: break;
          case 49:
            { return token(yytext(),"Inst_DEC_Ext",yyline,yycolumn);
            }
            // fall through
          case 147: break;
          case 50:
            { return token(yytext(),"Inst_INC_Ext",yyline,yycolumn);
            }
            // fall through
          case 148: break;
          case 51:
            { return token(yytext(),"Inst_NEG_Ext",yyline,yycolumn);
            }
            // fall through
          case 149: break;
          case 52:
            { return token(yytext(),"Inst_ADCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 150: break;
          case 53:
            { return token(yytext(),"Inst_ADCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 151: break;
          case 54:
            { return token(yytext(),"Inst_ADDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 152: break;
          case 55:
            { return token(yytext(),"Inst_ADDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 153: break;
          case 56:
            { return token(yytext(),"Inst_ADDD_Ext",yyline,yycolumn);
            }
            // fall through
          case 154: break;
          case 57:
            { return token(yytext(),"Inst_ANDA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 155: break;
          case 58:
            { return token(yytext(),"Inst_ANDA_Ext",yyline,yycolumn);
            }
            // fall through
          case 156: break;
          case 59:
            { return token(yytext(),"Inst_BITA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 157: break;
          case 60:
            { return token(yytext(),"Inst_CLR_Index",yyline,yycolumn);
            }
            // fall through
          case 158: break;
          case 61:
            { return token(yytext(),"Inst_CMPA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 159: break;
          case 62:
            { return token(yytext(),"Inst_CMPA_Ext",yyline,yycolumn);
            }
            // fall through
          case 160: break;
          case 63:
            { return token(yytext(),"Inst_COM_Index",yyline,yycolumn);
            }
            // fall through
          case 161: break;
          case 64:
            { return token(yytext(),"Inst_CPD_Index",yyline,yycolumn);
            }
            // fall through
          case 162: break;
          case 65:
            { return token(yytext(),"Inst_CPX_Index",yyline,yycolumn);
            }
            // fall through
          case 163: break;
          case 66:
            { return token(yytext(),"Inst_CPY_Index",yyline,yycolumn);
            }
            // fall through
          case 164: break;
          case 67:
            { return token(yytext(),"Inst_DEC_Index",yyline,yycolumn);
            }
            // fall through
          case 165: break;
          case 68:
            { return token(yytext(),"Inst_EORA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 166: break;
          case 69:
            { return token(yytext(),"Inst_EORA_Ext",yyline,yycolumn);
            }
            // fall through
          case 167: break;
          case 70:
            { return token(yytext(),"Inst_INC_Index",yyline,yycolumn);
            }
            // fall through
          case 168: break;
          case 71:
            { return token(yytext(),"Inst_NEG_Index",yyline,yycolumn);
            }
            // fall through
          case 169: break;
          case 72:
            { return token(yytext(),"Inst_ORAA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 170: break;
          case 73:
            { return token(yytext(),"Inst_ORAA_Ext",yyline,yycolumn);
            }
            // fall through
          case 171: break;
          case 74:
            { return token(yytext(),"Inst_SBCA_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 172: break;
          case 75:
            { return token(yytext(),"Inst_SBCA_Ext",yyline,yycolumn);
            }
            // fall through
          case 173: break;
          case 76:
            { return token(yytext(),"Inst_SUBD_Ext",yyline,yycolumn);
            }
            // fall through
          case 174: break;
          case 77:
            { return token(yytext(),"Inst_ADCA_Index",yyline,yycolumn);
            }
            // fall through
          case 175: break;
          case 78:
            { return token(yytext(),"Inst_ADDA_Index",yyline,yycolumn);
            }
            // fall through
          case 176: break;
          case 79:
            { return token(yytext(),"Inst_ADDD_Index",yyline,yycolumn);
            }
            // fall through
          case 177: break;
          case 80:
            { return token(yytext(),"Inst_ANDA_Index",yyline,yycolumn);
            }
            // fall through
          case 178: break;
          case 81:
            { return token(yytext(),"Inst_CMPA_Index",yyline,yycolumn);
            }
            // fall through
          case 179: break;
          case 82:
            { return token(yytext(),"Inst_CPD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 180: break;
          case 83:
            { return token(yytext(),"Inst_CPX_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 181: break;
          case 84:
            { return token(yytext(),"Inst_CPY_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 182: break;
          case 85:
            { return token(yytext(),"Inst_EORA_Index",yyline,yycolumn);
            }
            // fall through
          case 183: break;
          case 86:
            { return token(yytext(),"Inst_ORAA_Index",yyline,yycolumn);
            }
            // fall through
          case 184: break;
          case 87:
            { return token(yytext(),"Inst_SBCA_Index",yyline,yycolumn);
            }
            // fall through
          case 185: break;
          case 88:
            { return token(yytext(),"Inst_SUBD_Index",yyline,yycolumn);
            }
            // fall through
          case 186: break;
          case 89:
            { return token(yytext(),"Inst_ADDD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 187: break;
          case 90:
            { return token(yytext(),"Inst_BCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 188: break;
          case 91:
            { return token(yytext(),"Inst_BSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 189: break;
          case 92:
            { return token(yytext(),"Inst_SUBD_INMEDIATO",yyline,yycolumn);
            }
            // fall through
          case 190: break;
          case 93:
            { return token(yytext(),"Inst_BRCLR_Dir",yyline,yycolumn);
            }
            // fall through
          case 191: break;
          case 94:
            { return token(yytext(),"Inst_BRSET_Dir",yyline,yycolumn);
            }
            // fall through
          case 192: break;
          case 95:
            { return token(yytext(),"Inst_BCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 193: break;
          case 96:
            { return token(yytext(),"Inst_BSET_Index",yyline,yycolumn);
            }
            // fall through
          case 194: break;
          case 97:
            { return token(yytext(),"Inst_BRCLR_Index",yyline,yycolumn);
            }
            // fall through
          case 195: break;
          case 98:
            { return token(yytext(),"Inst_BRSET_Index",yyline,yycolumn);
            }
            // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
