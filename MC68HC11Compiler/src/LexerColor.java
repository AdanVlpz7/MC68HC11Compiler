// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\2\0\1\5\1\6\5\0\1\7\1\0\1\10\3\0"+
    "\12\11\7\0\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\24\4\0\1\24\1\0\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\24\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\24\1\0\1\73\104\0\1\24\7\0\1\24\3\0"+
    "\1\24\3\0\1\24\1\0\1\24\6\0\1\24\1\0"+
    "\1\24\4\0\1\24\7\0\1\24\3\0\1\24\3\0"+
    "\1\24\1\0\1\24\6\0\1\24\1\0\1\24\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\1\3\45\0\2\3\136\0\1\4"+
    "\1\5\3\0\1\5\11\0\1\6\17\0\1\5\45\0"+
    "\1\4\37\0\1\5\4\0\3\5\3\0\1\5\5\0"+
    "\1\5\1\0\1\5\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\74\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec"+
    "\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c"+
    "\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\74\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0"+
    "\0\u22ec\0\u2328\0\74\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634"+
    "\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814"+
    "\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4"+
    "\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4"+
    "\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94"+
    "\0\74\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138"+
    "\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318"+
    "\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8"+
    "\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8"+
    "\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3750\0\u3840"+
    "\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20"+
    "\0\u3a5c\0\u3a98\0\u3ad4\0\u3a20\0\u3b10\0\u3b4c\0\u3b88";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\2\1\4\1\5\1\6\1\4"+
    "\1\0\1\7\1\10\1\11\1\12\1\13\1\14\2\0"+
    "\1\15\1\16\1\0\1\17\1\20\1\21\1\22\1\23"+
    "\1\0\1\24\1\25\1\26\2\0\1\27\1\30\1\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\0\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\0\1\46"+
    "\1\47\1\50\2\0\1\51\1\52\100\0\1\2\102\0"+
    "\62\53\1\0\2\6\1\54\1\55\70\6\13\0\1\56"+
    "\1\0\1\57\11\0\1\60\4\0\1\61\53\0\1\62"+
    "\1\0\1\63\1\0\1\64\1\65\1\66\2\0\1\67"+
    "\1\70\1\71\1\0\1\72\1\0\1\73\1\74\2\0"+
    "\1\75\47\0\1\76\11\0\1\77\1\100\1\0\1\101"+
    "\1\102\3\0\1\103\50\0\1\76\3\0\1\104\104\0"+
    "\1\105\1\106\1\0\1\107\55\0\1\110\1\111\73\0"+
    "\1\111\11\0\1\104\72\0\1\112\5\0\1\113\54\0"+
    "\1\114\16\0\1\115\75\0\1\72\53\0\1\116\11\0"+
    "\1\117\76\0\1\120\74\0\1\121\1\0\1\122\65\0"+
    "\1\123\4\0\1\65\51\0\1\124\2\0\1\125\16\0"+
    "\1\126\1\127\1\0\1\70\45\0\1\130\1\76\2\0"+
    "\1\131\12\0\1\76\2\0\1\132\4\0\1\133\44\0"+
    "\1\70\101\0\1\134\117\0\1\135\1\0\1\136\10\0"+
    "\1\137\4\0\1\140\54\0\1\141\1\0\1\142\1\0"+
    "\1\143\1\144\1\145\1\0\1\146\1\147\1\150\1\0"+
    "\1\151\1\0\1\152\1\153\2\0\1\154\50\0\1\155"+
    "\10\0\1\156\1\157\1\0\1\160\1\161\3\0\1\162"+
    "\51\0\1\155\3\0\1\163\103\0\1\164\1\165\1\0"+
    "\1\166\56\0\1\167\1\170\73\0\1\170\10\0\1\163"+
    "\72\0\1\171\5\0\1\172\55\0\1\173\15\0\1\174"+
    "\75\0\1\151\54\0\1\175\10\0\1\176\76\0\1\177"+
    "\74\0\1\200\1\0\1\201\65\0\1\202\4\0\1\144"+
    "\52\0\1\203\2\0\1\204\15\0\1\205\1\206\1\0"+
    "\1\147\46\0\1\207\1\155\2\0\1\210\11\0\1\155"+
    "\2\0\1\211\4\0\1\212\45\0\1\147\101\0\1\213"+
    "\33\0\62\214\3\0\1\54\103\0\1\215\26\0\2\215"+
    "\45\0\1\216\1\217\73\0\1\220\103\0\1\221\5\0"+
    "\1\222\54\0\1\215\10\0\1\223\6\0\1\215\71\0"+
    "\1\215\57\0\1\215\16\0\1\215\60\0\1\215\11\0"+
    "\1\215\74\0\1\220\54\0\1\215\11\0\1\215\3\0"+
    "\2\215\60\0\1\215\67\0\1\215\102\0\1\215\60\0"+
    "\1\215\1\0\1\224\12\0\1\215\4\0\1\225\55\0"+
    "\1\226\14\0\1\215\54\0\1\215\17\0\1\215\51\0"+
    "\1\215\75\0\1\215\5\0\1\215\10\0\1\222\3\0"+
    "\1\215\65\0\1\220\70\0\1\222\62\0\1\227\23\0"+
    "\1\230\1\231\73\0\1\232\45\0\1\222\17\0\1\215"+
    "\4\0\2\215\46\0\1\233\111\0\1\234\76\0\1\233"+
    "\50\0\1\233\102\0\1\235\102\0\1\236\75\0\1\237"+
    "\52\0\1\220\2\0\1\240\16\0\1\240\4\0\2\240"+
    "\56\0\1\241\5\0\1\241\60\0\1\222\104\0\1\215"+
    "\54\0\1\220\5\0\1\233\74\0\1\242\77\0\1\242"+
    "\73\0\1\222\5\0\1\222\52\0\1\215\1\0\1\243"+
    "\73\0\1\215\5\0\1\215\14\0\1\215\46\0\1\244"+
    "\2\0\1\237\12\0\1\117\3\0\1\237\4\0\2\237"+
    "\44\0\1\245\73\0\1\215\15\0\1\215\76\0\1\246"+
    "\74\0\1\222\3\0\1\215\66\0\1\215\54\0\1\247"+
    "\121\0\1\215\25\0\2\215\46\0\1\250\1\251\73\0"+
    "\1\252\102\0\1\253\5\0\1\254\55\0\1\215\7\0"+
    "\1\255\6\0\1\215\71\0\1\215\60\0\1\215\15\0"+
    "\1\215\61\0\1\215\10\0\1\215\74\0\1\252\55\0"+
    "\1\215\10\0\1\215\3\0\2\215\61\0\1\215\67\0"+
    "\1\215\101\0\1\215\61\0\1\215\1\0\1\256\11\0"+
    "\1\215\4\0\1\257\56\0\1\260\13\0\1\215\55\0"+
    "\1\215\16\0\1\215\52\0\1\215\75\0\1\215\5\0"+
    "\1\215\7\0\1\254\3\0\1\215\65\0\1\252\70\0"+
    "\1\254\63\0\1\227\22\0\1\230\1\231\73\0\1\232"+
    "\46\0\1\254\16\0\1\215\4\0\2\215\47\0\1\233"+
    "\110\0\1\261\76\0\1\233\51\0\1\233\102\0\1\262"+
    "\101\0\1\236\75\0\1\237\53\0\1\252\2\0\1\240"+
    "\15\0\1\240\4\0\2\240\56\0\1\263\5\0\1\263"+
    "\61\0\1\254\103\0\1\215\55\0\1\252\5\0\1\233"+
    "\74\0\1\264\76\0\1\264\73\0\1\254\5\0\1\254"+
    "\53\0\1\215\1\0\1\265\73\0\1\215\5\0\1\215"+
    "\13\0\1\215\47\0\1\266\2\0\1\237\11\0\1\176"+
    "\3\0\1\237\4\0\2\237\45\0\1\267\73\0\1\215"+
    "\14\0\1\215\76\0\1\270\74\0\1\254\3\0\1\215"+
    "\66\0\1\215\55\0\1\271\36\0\62\272\13\0\1\273"+
    "\1\274\72\0\1\240\1\274\1\0\1\275\70\0\2\240"+
    "\72\0\2\215\1\0\1\215\57\0\2\276\1\277\1\276"+
    "\5\0\2\215\113\0\1\300\65\0\1\223\64\0\1\226"+
    "\112\0\1\300\37\0\2\301\1\302\1\301\70\0\2\303"+
    "\1\304\1\303\70\0\2\305\1\306\1\305\70\0\2\307"+
    "\1\310\1\307\101\0\1\240\1\311\117\0\1\215\35\0"+
    "\2\276\1\277\1\276\70\0\2\312\1\313\1\312\70\0"+
    "\2\314\1\315\1\314\70\0\2\276\1\277\1\276\5\0"+
    "\2\215\1\0\1\215\70\0\2\215\25\0\2\215\43\0"+
    "\1\316\1\274\72\0\2\237\72\0\1\275\1\317\1\0"+
    "\1\320\113\0\1\215\77\0\2\215\74\0\1\273\1\274"+
    "\72\0\1\240\1\274\1\0\1\275\70\0\2\240\72\0"+
    "\2\215\1\0\1\215\26\0\2\276\1\277\1\276\36\0"+
    "\2\215\112\0\1\300\65\0\1\255\65\0\1\260\111\0"+
    "\1\300\51\0\1\240\1\311\116\0\1\215\5\0\2\276"+
    "\1\277\1\276\36\0\2\215\1\0\1\215\70\0\2\215"+
    "\24\0\2\215\44\0\1\316\1\274\72\0\2\237\72\0"+
    "\1\275\1\317\1\0\1\320\112\0\1\215\77\0\2\215"+
    "\12\0\62\321\2\0\2\322\1\323\1\322\70\0\2\314"+
    "\1\315\1\314\1\0\1\324\66\0\2\325\1\326\1\325"+
    "\75\0\1\327\67\0\1\276\3\0\1\327\66\0\2\330"+
    "\1\331\1\330\74\0\1\332\1\333\67\0\1\301\2\0"+
    "\1\332\1\333\72\0\1\332\1\334\67\0\1\303\2\0"+
    "\1\332\1\334\72\0\1\332\1\335\67\0\1\305\2\0"+
    "\1\332\1\335\73\0\1\336\67\0\1\307\3\0\1\336"+
    "\66\0\2\337\1\340\1\337\75\0\1\334\67\0\1\312"+
    "\3\0\1\334\72\0\1\341\1\334\67\0\1\314\2\0"+
    "\1\341\1\334\66\0\2\342\1\343\1\342\70\0\2\303"+
    "\1\304\1\303\1\0\1\324\66\0\2\344\1\345\1\344"+
    "\74\0\1\341\1\324\67\0\1\322\2\0\1\341\1\324"+
    "\76\0\62\346\6\0\1\332\1\347\67\0\1\325\2\0"+
    "\1\332\1\347\76\0\62\350\7\0\1\351\67\0\1\330"+
    "\3\0\1\351\73\0\1\352\76\0\62\353\12\0\62\354"+
    "\12\0\62\355\12\0\62\356\6\0\1\341\1\357\67\0"+
    "\1\337\2\0\1\341\1\357\73\0\1\360\72\0\1\341"+
    "\1\347\67\0\1\342\2\0\1\341\1\347\72\0\1\332"+
    "\1\324\67\0\1\344\2\0\1\332\1\324\76\0\62\361"+
    "\12\0\62\362\12\0\62\363\12\0\62\364\12\0\62\365"+
    "\12\0\62\366\12\0\62\367\12\0\62\370\12\0\62\371"+
    "\12\0\62\372\12\0\62\373\12\0\62\374\11\0\1\375"+
    "\62\373\12\0\62\376\12\0\62\360\11\0\1\377\62\373"+
    "\11\0\1\u0100\62\373\11\0\1\u0101\74\0\62\u0102\12\0"+
    "\62\215\11\0\1\u0101\62\373\2\0\2\u0100\1\u0103\1\u0104"+
    "\34\0\2\215\26\0\3\215\10\0\1\u0105\64\0\2\u0100"+
    "\1\u0103\1\u0100\5\0\61\215\5\0\1\215\34\0\2\215"+
    "\26\0\3\215\1\0\2\u0100\1\u0103\1\u0100\77\0\1\375"+
    "\65\0\1\u0100\1\0\1\215\34\0\2\215\26\0\3\215"+
    "\4\0\1\u0106\1\360\33\0\2\u0106\26\0\3\u0106\10\0"+
    "\1\u0107\70\0\1\360\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\45\0\1\11\1\1"+
    "\136\0\1\1\1\11\3\0\1\1\11\0\1\11\17\0"+
    "\1\1\45\0\1\11\37\0\1\1\4\0\3\1\3\0"+
    "\1\1\5\0\1\1\1\0\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 7: break;
          case 2:
            { return textColor(yychar, yylength(), new Color(167, 97, 94));
            }
            // fall through
          case 8: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 9: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(254, 164, 160));
            }
            // fall through
          case 10: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(255, 87, 51));
            }
            // fall through
          case 11: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(138, 14, 146));
            }
            // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
